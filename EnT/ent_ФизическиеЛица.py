import json
import requests
import mysql.connector
import time
from mysql.connector import Error

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ API
base_url = "https://enote.zoolux.clinic/09e599a6-2486-11e3-0983-08606e6953d2/odata/standard.odata/Catalog_–§–∏–∑–∏—á–µ—Å–∫–∏–µ–õ–∏—Ü–∞"
api_auth = ('zooluxcab', 'mTuee0m5')  # –õ–æ–≥—ñ–Ω —ñ –ø–∞—Ä–æ–ª—å –¥–ª—è API

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ MySQL
mysql_host = "wealth0.mysql.tools"
mysql_user = "wealth0_raid"
mysql_password = "n5yM5ZT87z"
mysql_db = "wealth0_analytics"

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
def connect_to_db():
    return mysql.connector.connect(
        host=mysql_host,
        user=mysql_user,
        password=mysql_password,
        database=mysql_db
    )

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API
def fetch_data_from_api():
    response = requests.get(f"{base_url}?$format=json", auth=api_auth)
    response.raise_for_status()
    return response.json().get('value', [])

# –í—Å—Ç–∞–≤–∫–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –ë–î
def upsert_records_into_mysql(records):
    try:
        connection = connect_to_db()
        if connection.is_connected():
            cursor = connection.cursor()
            upsert_query = """
            INSERT INTO ent_Catalog_–§–∏–∑–∏—á–µ—Å–∫–∏–µ–õ–∏—Ü–∞ 
            (Ref_Key, DataVersion, DeletionMark, Parent_Key, IsFolder, Code, Description, –î–∞—Ç–∞–†–æ–∂–¥–µ–Ω–∏—è, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, 
             –î–æ–ª–∂–Ω–æ—Å—Ç—å_Key, –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å–ì—Ä–∞—Ñ–∏–∫–†–∞–±–æ—Ç—ã, –£–î–ê–õ–ò–¢–¨–†–∞–∑—Ä–µ—à–∏—Ç—å–í—ã–±–∏—Ä–∞—Ç—å–ë–µ–∑–ü–∞—Ä–æ–ª—è, –£–î–ê–õ–ò–¢–¨–ù–∞–±–æ—Ä–ü—Ä–∞–≤_Key, 
             –£–î–ê–õ–ò–¢–¨–í–∞—Ä–∏–∞–Ω—Ç–ü–µ—á–∞—Ç–∏, –ù–µ–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å–í–ì—Ä–∞—Ñ–∏–∫–µ–†–∞–±–æ—Ç—ã, SOVA_UDS–í–Ω–µ—à–Ω–∏–π–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –î–∞—Ç–∞–ü—Ä–∏–µ–º–∞, –î–∞—Ç–∞–£–≤–æ–ª—å–Ω–µ–Ω–∏—è, 
             –†–æ–ª—å_Key, –î–æ–ø–†–æ–ª—å1_Key, –î–æ–ø–†–æ–ª—å2_Key, –î–æ–ø–†–æ–ª—å3_Key, –ú–ü–ö_–ó–∞–ø–∏—Å—å–†–∞–∑—Ä–µ—à–µ–Ω–∞, –ú–ü–ö_–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–î–æ–ª–∂–Ω–æ—Å—Ç–∏, 
             –ú–ü–ö_–§–æ—Ç–æ–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞_Key, ID, –ò–ù–ù, Predefined, PredefinedDataName)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE 
            DataVersion = VALUES(DataVersion),
            Description = VALUES(Description),
            –î–∞—Ç–∞–†–æ–∂–¥–µ–Ω–∏—è = VALUES(–î–∞—Ç–∞–†–æ–∂–¥–µ–Ω–∏—è),
            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π = VALUES(–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π),
            –î–æ–ª–∂–Ω–æ—Å—Ç—å_Key = VALUES(–î–æ–ª–∂–Ω–æ—Å—Ç—å_Key),
            –î–∞—Ç–∞–ü—Ä–∏–µ–º–∞ = VALUES(–î–∞—Ç–∞–ü—Ä–∏–µ–º–∞),
            –î–∞—Ç–∞–£–≤–æ–ª—å–Ω–µ–Ω–∏—è = VALUES(–î–∞—Ç–∞–£–≤–æ–ª—å–Ω–µ–Ω–∏—è);
            """
            cursor.executemany(upsert_query, records)
            connection.commit()
            print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ {cursor.rowcount} –∑–∞–ø–∏—Å—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—é ent_Catalog_–§–∏–∑–∏—á–µ—Å–∫–∏–µ–õ–∏—Ü–∞.")
    except Error as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ MySQL: {e}")
    finally:
        if 'connection' in locals() and connection.is_connected():
            cursor.close()
            connection.close()

# –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
def main():
    print("üîÑ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ API...")
    entries = fetch_data_from_api()
    records = []
    
    for entry in entries:
        records.append((
            entry['Ref_Key'], entry['DataVersion'], entry['DeletionMark'], entry['Parent_Key'], entry['IsFolder'],
            entry['Code'], entry['Description'], entry.get('–î–∞—Ç–∞–†–æ–∂–¥–µ–Ω–∏—è'), entry.get('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'),
            entry.get('–î–æ–ª–∂–Ω–æ—Å—Ç—å_Key'), entry.get('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å–ì—Ä–∞—Ñ–∏–∫–†–∞–±–æ—Ç—ã'), entry.get('–£–î–ê–õ–ò–¢–¨–†–∞–∑—Ä–µ—à–∏—Ç—å–í—ã–±–∏—Ä–∞—Ç—å–ë–µ–∑–ü–∞—Ä–æ–ª—è'),
            entry.get('–£–î–ê–õ–ò–¢–¨–ù–∞–±–æ—Ä–ü—Ä–∞–≤_Key'), entry.get('–£–î–ê–õ–ò–¢–¨–í–∞—Ä–∏–∞–Ω—Ç–ü–µ—á–∞—Ç–∏'), entry.get('–ù–µ–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å–í–ì—Ä–∞—Ñ–∏–∫–µ–†–∞–±–æ—Ç—ã'),
            entry.get('SOVA_UDS–í–Ω–µ—à–Ω–∏–π–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä'), entry.get('–î–∞—Ç–∞–ü—Ä–∏–µ–º–∞'), entry.get('–î–∞—Ç–∞–£–≤–æ–ª—å–Ω–µ–Ω–∏—è'),
            entry.get('–†–æ–ª—å_Key'), entry.get('–î–æ–ø–†–æ–ª—å1_Key'), entry.get('–î–æ–ø–†–æ–ª—å2_Key'), entry.get('–î–æ–ø–†–æ–ª—å3_Key'),
            entry.get('–ú–ü–ö_–ó–∞–ø–∏—Å—å–†–∞–∑—Ä–µ—à–µ–Ω–∞'), entry.get('–ú–ü–ö_–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–î–æ–ª–∂–Ω–æ—Å—Ç–∏'), entry.get('–ú–ü–ö_–§–æ—Ç–æ–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞_Key'),
            entry.get('ID', ''), entry.get('–ò–ù–ù'), entry['Predefined'], entry['PredefinedDataName']
        ))
    
    if records:
        print("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É –ë–î...")
        upsert_records_into_mysql(records)
    else:
        print("‚ö†Ô∏è –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
    
if __name__ == "__main__":
    main()
