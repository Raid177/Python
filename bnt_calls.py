import requests
import json
import time
import datetime
import mysql.connector
from mysql.connector import Error
from dotenv import load_dotenv
import os

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env
load_dotenv()

# üîπ API Binotel
API_URL = "https://api.binotel.com/api/4.0/stats/list-of-calls-for-period.json"
API_KEY = os.getenv("BNT_KEY")
API_SECRET = os.getenv("BNT_SECRET")

# üîπ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è MySQL
DB_CONFIG = {
    "host": os.getenv("DB_HOST"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "database": os.getenv("DB_DATABASE")
}

# üîπ –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑ API
def get_calls(start_time, stop_time):
    payload = {
        "startTime": start_time,
        "stopTime": stop_time,
        "key": API_KEY,
        "secret": API_SECRET
    }

    headers = {"Content-Type": "application/json"}
    print(f"üì° –ó–∞–ø–∏—Ç –¥–æ API: {API_URL}, –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {payload}")

    try:
        response = requests.post(API_URL, json=payload, headers=headers, timeout=10)
        print(f"üîç –ö–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API: {response.status_code}, –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response.text[:500]}")

        return response.json() if response.status_code == 200 else None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
        return None

# üîπ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è timestamp —É —Ñ–æ—Ä–º–∞—Ç MySQL
def convert_timestamp(ts):
    try:
        return datetime.datetime.fromtimestamp(int(ts)).strftime('%Y-%m-%d %H:%M:%S')
    except ValueError:
        return None

def save_to_db(call_data):
    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        cursor = connection.cursor()

        insert_query = """
        INSERT INTO bnt_calls (
            companyID, generalCallID, startTime, callType, internalNumber,
            internalAdditionalData, externalNumber, waitsec, billsec,
            disposition, isNewCall
        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        ON DUPLICATE KEY UPDATE
            companyID=VALUES(companyID), startTime=VALUES(startTime),
            callType=VALUES(callType), internalNumber=VALUES(internalNumber),
            internalAdditionalData=VALUES(internalAdditionalData),
            externalNumber=VALUES(externalNumber), waitsec=VALUES(waitsec),
            billsec=VALUES(billsec), disposition=VALUES(disposition),
            isNewCall=VALUES(isNewCall)
        """

        for call_id, call in call_data.get("callDetails", {}).items():  # üîπ –î–æ–¥–∞—î–º–æ .items() –¥–ª—è —Ä–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è ID
            start_time = convert_timestamp(call["startTime"])  # üîπ –ß–∞—Å –¥–∑–≤—ñ–Ω–∫–∞ —É –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
            if start_time:
                cursor.execute(insert_query, (
                    call["companyID"], call["generalCallID"], start_time,
                    call["callType"], call["internalNumber"], call.get("internalAdditionalData", ""),
                    call["externalNumber"], call["waitsec"], call["billsec"],
                    call["disposition"], call["isNewCall"]
                ))

        connection.commit()
        print("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤ MySQL")

    except Error as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ MySQL: {e}")

    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()


# üîπ –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–¥: –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑–∞ 20-21 –ª—é—Ç–æ–≥–æ 2025
if __name__ == "__main__":
    start_date = datetime.datetime(2025, 2, 20)
    end_date = datetime.datetime(2025, 2, 21, 23, 59, 59)

    while start_date <= end_date:
        start_time = int(start_date.timestamp())
        stop_time = start_time + 14400  # 4 –≥–æ–¥–∏–Ω–∏

        print(f"üîç –û—Ç—Ä–∏–º—É—î–º–æ –¥–∑–≤—ñ–Ω–∫–∏ –∑–∞ {start_date.strftime('%Y-%m-%d %H:%M:%S')}")

        call_data = get_calls(start_time, stop_time)
        if call_data and call_data.get("status") == "success":
            save_to_db(call_data)
        else:
            print("‚ùå –î–∞–Ω–∏—Ö –Ω–µ–º–∞ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ API")

        time.sleep(6)  # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
        start_date += datetime.timedelta(hours=4)  # –†—É—Ö–∞—î–º–æ—Å—å –ø–æ 4 –≥–æ–¥–∏–Ω–∏
