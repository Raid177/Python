#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
normalize_collation.py

–ü—Ä–∏–≤–æ–¥–∏—Ç—å –ë–î —Ç–∞ –≤—Å—ñ —ó—ó —Ç–∞–±–ª–∏—Ü—ñ/—Ç–µ–∫—Å—Ç–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ –∫–æ–ª–∞—Ü—ñ—ó utf8mb4_0900_ai_ci (MySQL 8+).
- –ß—ñ—Ç–∫–∏–π –∫–æ–Ω—Å–æ–ª—å–Ω–∏–π –ª–æ–≥.
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ .env (DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_DATABASE).
"""

import os
import sys
import time
import mysql.connector
from dotenv import load_dotenv

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ===
TARGET_CHARSET   = "utf8mb4"
TARGET_COLLATION = "utf8mb4_0900_ai_ci"

TEXT_DATA_TYPES = {
    "char", "varchar",
    "tinytext", "text", "mediumtext", "longtext",
    "enum", "set"
}

# ========= ENV loader =========
ENV_PROFILE = os.getenv("ENV_PROFILE", "prod")  # dev | prod
ENV_PATHS = {
    "dev":  r"C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/.env",
    "prod": "/root/Python/_Acces/.env.prod",
}
ENV_PATH = os.getenv("ENV_PATH") or ENV_PATHS.get(ENV_PROFILE)
if ENV_PATH and os.path.exists(ENV_PATH):
    load_dotenv(ENV_PATH, override=True)
else:
    load_dotenv(override=True)  # —à—É–∫–∞—î .env —É –ø–æ—Ç–æ—á–Ω—ñ–π –ø–∞–ø—Ü—ñ

def require_env(name: str) -> str:
    v = os.getenv(name)
    if not v:
        print(f"[ENV ERROR] Missing {name} in .env (path: {ENV_PATH or './.env'})", file=sys.stderr)
        sys.exit(1)
    return v

DB_HOST = require_env("DB_HOST")
DB_PORT = int(os.getenv("DB_PORT", "3306"))
DB_USER = require_env("DB_USER")
DB_PASSWORD = require_env("DB_PASSWORD")
DB_DATABASE = require_env("DB_DATABASE")

def connect():
    return mysql.connector.connect(
        host=DB_HOST,
        port=DB_PORT,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_DATABASE,
        autocommit=True,
    )

def exec_sql(cursor, sql, params=None, silent=False):
    if not silent:
        print(f"SQL> {sql if len(sql) < 300 else sql[:300]+' ...'}")
    cursor.execute(sql, params or ())

def fetchall(cursor, sql, params=None):
    cursor.execute(sql, params or ())
    return cursor.fetchall()

def show_server_defaults(cursor):
    rows = fetchall(cursor, "SHOW VARIABLES LIKE 'character_set_server'")
    charset = rows[0][1] if rows else "?"
    rows = fetchall(cursor, "SHOW VARIABLES LIKE 'collation_server'")
    coll = rows[0][1] if rows else "?"
    print(f"[SERVER DEFAULTS] character_set_server={charset}, collation_server={coll}")

def relax_sql_mode(cursor):
    # –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∞ –ø–æ—Å–ª–∞–±–∏—Ç–∏ sql_mode –Ω–∞ —á–∞—Å ALTER‚Äô—ñ–≤ (–ø—Ä–∏–±—Ä–∞—Ç–∏ –Ω—É–ª—å–æ–≤—ñ –¥–∞—Ç–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è)
    rows = fetchall(cursor, "SELECT @@SESSION.sql_mode")
    old_mode = rows[0][0] if rows and rows[0] else ""
    print(f"[SQL_MODE] session before: {old_mode}")
    exec_sql(cursor, """
        SET SESSION sql_mode = REPLACE(
            REPLACE(@@SESSION.sql_mode,'NO_ZERO_IN_DATE',''),
            'NO_ZERO_DATE',''
        )
    """, silent=True)
    rows = fetchall(cursor, "SELECT @@SESSION.sql_mode")
    new_mode = rows[0][0] if rows and rows[0] else ""
    print(f"[SQL_MODE] session after : {new_mode}")
    return old_mode

def restore_sql_mode(cursor, old_mode):
    esc = (old_mode or "").replace("'", "''")
    exec_sql(cursor, f"SET SESSION sql_mode = '{esc}'", silent=True)
    print("[SQL_MODE] session restored")

def alter_database_default(cursor):
    row = fetchall(cursor, """
        SELECT DEFAULT_CHARACTER_SET_NAME, DEFAULT_COLLATION_NAME
        FROM information_schema.SCHEMATA
        WHERE SCHEMA_NAME = %s
    """, (DB_DATABASE,))
    if not row:
        print(f"[ERROR] –ë–î `{DB_DATABASE}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        sys.exit(1)

    db_charset, db_collation = row[0]
    print(f"\n[DB] –ü–æ—Ç–æ—á–Ω—ñ –¥–µ—Ñ–æ–ª—Ç–∏: charset={db_charset}, collation={db_collation}")

    if db_collation == TARGET_COLLATION and db_charset == TARGET_CHARSET:
        print("[DB] –î–µ—Ñ–æ–ª—Ç–∏ –≤–∂–µ –æ–∫: –∑–º—ñ–Ω–∞ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞.")
        return

    print(f"[DB] –ó–º—ñ–Ω—é—é –¥–µ—Ñ–æ–ª—Ç–∏ –ë–î `{DB_DATABASE}` ‚Üí {TARGET_CHARSET}/{TARGET_COLLATION} ...")
    t0 = time.time()
    exec_sql(cursor, f"""
        ALTER DATABASE `{DB_DATABASE}`
        CHARACTER SET {TARGET_CHARSET}
        COLLATE {TARGET_COLLATION}
    """)
    print(f"[DB] ‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ {time.time()-t0:.2f}s")

def convert_table(cursor, table_schema: str, table_name: str, current_collation: str):
    print(f"\nüîé –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Ç–∞–±–ª–∏—Ü—é `{table_schema}.{table_name}` ...")
    print(f"   —Ñ–∞–∫—Ç–∏—á–Ω–∞ –∫–æ–ª—è—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—ñ: {current_collation}")
    if current_collation != TARGET_COLLATION:
        print(f"   –∑–º—ñ–Ω—é—é –∫–æ–ª—è—Ü—ñ—é —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞: {TARGET_COLLATION} ...")
        t0 = time.time()
        exec_sql(cursor, f"""
            ALTER TABLE `{table_schema}`.`{table_name}`
            CONVERT TO CHARACTER SET {TARGET_CHARSET} COLLATE {TARGET_COLLATION}
        """)
        print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü—é –∑–º—ñ–Ω–µ–Ω–æ –∑–∞ {time.time()-t0:.2f}s")
    else:
        print("   ‚úÖ –í–∂–µ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –∫–æ–ª—è—Ü—ñ—ó.")

def columns_to_fix(cursor, table_schema: str, table_name: str):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏, –¥–µ –∫–æ–ª–∞—Ü—ñ—è != TARGET_COLLATION."""
    rows = fetchall(cursor, """
        SELECT
            COLUMN_NAME,
            DATA_TYPE,
            CHARACTER_SET_NAME,
            COLLATION_NAME,
            COLUMN_TYPE,
            IS_NULLABLE,
            COLUMN_DEFAULT,
            EXTRA
        FROM information_schema.COLUMNS
        WHERE TABLE_SCHEMA = %s
          AND TABLE_NAME = %s
          AND CHARACTER_SET_NAME IS NOT NULL
          AND COLLATION_NAME <> %s
    """, (table_schema, table_name, TARGET_COLLATION))
    rows = [r for r in rows if (r[1] or '').lower() in TEXT_DATA_TYPES]
    return rows

def build_modify_clause(col):
    """
    col: (COLUMN_NAME, DATA_TYPE, CHARACTER_SET_NAME, COLLATION_NAME,
          COLUMN_TYPE, IS_NULLABLE, COLUMN_DEFAULT, EXTRA)
    """
    name, data_type, chs, coll, column_type, is_nullable, default, extra = col
    clause = f"MODIFY `{name}` {column_type} CHARACTER SET {TARGET_CHARSET} COLLATE {TARGET_COLLATION}"
    clause += " NOT NULL" if is_nullable == "NO" else " NULL"

    if default is not None:
        if isinstance(default, str) and default.upper() == "NULL":
            clause += " DEFAULT NULL"
        else:
            val = str(default).replace("'", "''")
            clause += f" DEFAULT '{val}'"

    if extra:
        clause += f" {extra}"
    return clause

def fix_columns_in_table(cursor, table_schema: str, table_name: str):
    cols = columns_to_fix(cursor, table_schema, table_name)
    if not cols:
        print(f"   –ö–æ–ª–æ–Ω–∫–∏: ‚úÖ –≤—Å—ñ –≤ –ø–æ—Ç—Ä—ñ–±–Ω—ñ–π –∫–æ–ª—è—Ü—ñ—ó.")
        return

    print(f"   –ö–æ–ª–æ–Ω–∫–∏: –∑–Ω–∞–π–¥–µ–Ω–æ {len(cols)} –∑ —ñ–Ω—à–æ—é –∫–æ–ª—è—Ü—ñ—î—é ‚Üí –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—é ...")
    BATCH = 50
    for i in range(0, len(cols), BATCH):
        batch = cols[i:i+BATCH]
        modifies = []
        for col in batch:
            clause = build_modify_clause(col)
            modifies.append(clause)
            colname, _, _, old_coll, *_ = col
            print(f"     üîß {table_name}.{colname}: {old_coll} ‚Üí {TARGET_COLLATION}")

        sql = f"ALTER TABLE `{table_schema}`.`{table_name}`\n  " + ",\n  ".join(modifies) + ";"
        t0 = time.time()
        exec_sql(cursor, sql)
        print(f"     ‚úÖ –ë–∞—Ç—á {i+1}-{i+len(batch)} –∑–º—ñ–Ω–µ–Ω–æ –∑–∞ {time.time()-t0:.2f}s")

def main():
    print(f"[INFO] –ü—ñ–¥–∫–ª—é—á–∞—é—Å—å –¥–æ MySQL {DB_HOST}:{DB_PORT}, –ë–î={DB_DATABASE}")
    conn = connect()
    cursor = conn.cursor()

    old_mode = None
    try:
        show_server_defaults(cursor)
        old_mode = relax_sql_mode(cursor)  # ‚¨ÖÔ∏è –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è '0000-00-00'
        alter_database_default(cursor)

        # 1) –í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ —Ç–∞ —ó—Ö –∫–æ–ª–∞—Ü—ñ—ó
        tables = fetchall(cursor, """
            SELECT TABLE_NAME, TABLE_COLLATION
            FROM information_schema.TABLES
            WHERE TABLE_SCHEMA = %s
            ORDER BY TABLE_NAME
        """, (DB_DATABASE,))

        total = len(tables)
        print(f"\n[INFO] –ó–Ω–∞–π–¥–µ–Ω–æ {total} —Ç–∞–±–ª–∏—Ü—å —É `{DB_DATABASE}`.")

        # 2) –ü—Ä–æ–π—Ç–∏—Å—å –ø–æ —Ç–∞–±–ª–∏—Ü—è—Ö
        for idx, (table_name, table_collation) in enumerate(tables, start=1):
            print(f"\n[{idx}/{total}] –¢–∞–±–ª–∏—Ü—è `{table_name}`")
            convert_table(cursor, DB_DATABASE, table_name, table_collation)
            fix_columns_in_table(cursor, DB_DATABASE, table_name)

        # 3) –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∏–π –ø—Ä–æ—Ö—ñ–¥
        print("\n[CHECK] –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∏–π –ø—Ä–æ—Ö—ñ–¥ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º –∑ –Ω–µ–≤—ñ—Ä–Ω–æ—é –∫–æ–ª—è—Ü—ñ—î—é ...")
        remaining = fetchall(cursor, """
            SELECT TABLE_NAME, COLUMN_NAME, COLLATION_NAME
            FROM information_schema.COLUMNS
            WHERE TABLE_SCHEMA = %s
              AND CHARACTER_SET_NAME IS NOT NULL
              AND COLLATION_NAME <> %s
        """, (DB_DATABASE, TARGET_COLLATION))

        if not remaining:
            print("‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ: —É—Å—ñ —Ç–µ–∫—Å—Ç–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –≤ `utf8mb4_0900_ai_ci`.")
        else:
            print(f"‚ö†Ô∏è –ó–∞–ª–∏—à–∏–ª–∏—Å—å {len(remaining)} –∫–æ–ª–æ–Ω–æ–∫ –∑ —ñ–Ω—à–æ—é –∫–æ–ª—è—Ü—ñ—î—é (–¥–∏–≤. –Ω–∏–∂—á–µ).")
            for t, c, col in remaining[:50]:
                print(f"   - {t}.{c}: {col}")
            print("   (–ó–∞ –ø–æ—Ç—Ä–µ–±–∏ –∑–∞–ø—É—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç —â–µ —Ä–∞–∑ –∞–±–æ –≤–∏–ø—Ä–∞–≤ —Ç–æ—á–∫–æ–≤–æ.)")

    finally:
        try:
            if old_mode is not None:
                restore_sql_mode(cursor, old_mode)
        except Exception:
            pass
        try:
            cursor.close()
            conn.close()
        except Exception:
            pass

if __name__ == "__main__":
    main()
