import os
import requests
import mysql.connector
from datetime import datetime, timedelta
from dotenv import load_dotenv
import time

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
ODATA_URL = os.getenv("ODATA_URL") + "InformationRegister_–¶–µ–Ω—ã–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã_RecordType"
ODATA_USER = os.getenv("ODATA_USER")
ODATA_PASSWORD = os.getenv("ODATA_PASSWORD")

DB_CONFIG = {
    "host": os.getenv("DB_HOST"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "database": os.getenv("DB_DATABASE"),
    "autocommit": True
}

BATCH_SIZE = 1000
DEFAULT_START_DATE = datetime(2024, 8, 1)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
conn = mysql.connector.connect(**DB_CONFIG)
cursor = conn.cursor()

# –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π Period
cursor.execute("SELECT MAX(Period) FROM et_InformationRegister_–¶–µ–Ω—ã–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã_RecordType")
result = cursor.fetchone()
last_date = result[0] if result and result[0] else DEFAULT_START_DATE
cutoff_date = last_date - timedelta(days=14)

print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–∞—Ç–∞ –≤ –ë–î: {last_date}")
print(f"–û–±—Ä–æ–±–ª—è—Ç–∏–º–µ–º–æ –ª–∏—à–µ –∑–∞–ø–∏—Å–∏ –∑ {cutoff_date}")

received_total = 0
written_total = 0
skip = 0

while True:
    params = {
        "$format": "json",
        "$orderby": "Period",
        "$top": BATCH_SIZE,
        "$skip": skip
    }

    response = requests.get(ODATA_URL, params=params, auth=(ODATA_USER, ODATA_PASSWORD))
    response.raise_for_status()
    data = response.json().get("value", [])

    if not data:
        break

    print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Å—ñ–≤: {len(data)}")

    for row in data:
        period_dt = datetime.fromisoformat(row["Period"])

        if period_dt >= cutoff_date:
            cursor.execute("""
                INSERT INTO et_InformationRegister_–¶–µ–Ω—ã–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã_RecordType (
                    Period, Recorder, Recorder_Type, LineNumber, Active,
                    –¢–∏–ø–¶–µ–Ω_Key, –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key, –ï–¥–∏–Ω–∏—Ü–∞–ò–∑–º–µ—Ä–µ–Ω–∏—è_Key, –í–∞–ª—é—Ç–∞_Key, –¶–µ–Ω–∞,
                    created_at, updated_at
                ) VALUES (
                    %(Period)s, %(Recorder)s, %(Recorder_Type)s, %(LineNumber)s, %(Active)s,
                    %(–¢–∏–ø–¶–µ–Ω_Key)s, %(–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key)s, %(–ï–¥–∏–Ω–∏—Ü–∞–ò–∑–º–µ—Ä–µ–Ω–∏—è_Key)s, %(–í–∞–ª—é—Ç–∞_Key)s, %(–¶–µ–Ω–∞)s,
                    NOW(), NOW()
                )
                ON DUPLICATE KEY UPDATE
                    Period = VALUES(Period),
                    Recorder_Type = VALUES(Recorder_Type),
                    Active = VALUES(Active),
                    –¢–∏–ø–¶–µ–Ω_Key = VALUES(–¢–∏–ø–¶–µ–Ω_Key),
                    –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key = VALUES(–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key),
                    –ï–¥–∏–Ω–∏—Ü–∞–ò–∑–º–µ—Ä–µ–Ω–∏—è_Key = VALUES(–ï–¥–∏–Ω–∏—Ü–∞–ò–∑–º–µ—Ä–µ–Ω–∏—è_Key),
                    –í–∞–ª—é—Ç–∞_Key = VALUES(–í–∞–ª—é—Ç–∞_Key),
                    –¶–µ–Ω–∞ = VALUES(–¶–µ–Ω–∞),
                    updated_at = NOW()
            """, {
                "Period": row["Period"],
                "Recorder": row["Recorder"],
                "Recorder_Type": row["Recorder_Type"],
                "LineNumber": int(row["LineNumber"]),
                "Active": row["Active"],
                "–¢–∏–ø–¶–µ–Ω_Key": row["–¢–∏–ø–¶–µ–Ω_Key"],
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key": row["–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key"],
                "–ï–¥–∏–Ω–∏—Ü–∞–ò–∑–º–µ—Ä–µ–Ω–∏—è_Key": row["–ï–¥–∏–Ω–∏—Ü–∞–ò–∑–º–µ—Ä–µ–Ω–∏—è_Key"],
                "–í–∞–ª—é—Ç–∞_Key": row["–í–∞–ª—é—Ç–∞_Key"],
                "–¶–µ–Ω–∞": float(row["–¶–µ–Ω–∞"])
            })
            written_total += 1

    received_total += len(data)
    skip += BATCH_SIZE
    time.sleep(1)

print(f"\nüîö –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")
print(f"–£—Å—å–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ OData: {received_total} —Ä—è–¥–∫—ñ–≤")
print(f"–ó–∞–ø–∏—Å–∞–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î (–∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 14 –¥–Ω—ñ–≤): {written_total} —Ä—è–¥–∫—ñ–≤")

cursor.close()
conn.close()
