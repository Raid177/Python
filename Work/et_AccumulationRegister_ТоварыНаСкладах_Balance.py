import requests
import pymysql
import xml.etree.ElementTree as ET
import os
import datetime
from dotenv import load_dotenv
from concurrent.futures import ThreadPoolExecutor, as_completed

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env
load_dotenv()

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ë–î
DB_HOST = os.getenv("DB_HOST")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_DATABASE = os.getenv("DB_DATABASE")

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ OData
ODATA_USER = os.getenv("ODATA_USER")
ODATA_PASSWORD = os.getenv("ODATA_PASSWORD")
ODATA_URL = os.getenv("ODATA_URL") + "AccumulationRegister_–¢–æ–≤–∞—Ä—ã–ù–∞–°–∫–ª–∞–¥–∞—Ö/Balance"

# –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Ç–æ–∫—ñ–≤
MAX_THREADS = 5  # –ú–æ–∂–Ω–∞ –∑–±—ñ–ª—å—à–∏—Ç–∏ –¥–æ 10

# –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –¥–∞—Ç–∏ –∑ –ë–î
def get_last_balance_date():
    connection = pymysql.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_DATABASE)
    with connection.cursor() as cursor:
        cursor.execute("SELECT MAX(–î–∞—Ç–∞–í—Ä–µ–º—è) FROM et_AccumulationRegister_–¢–æ–≤–∞—Ä—ã–ù–∞–°–∫–ª–∞–¥–∞—Ö_Balance")
        last_date = cursor.fetchone()[0]
    connection.close()
    
    if last_date:
        return last_date - datetime.timedelta(days=15)
    else:
        return datetime.datetime(2024, 7, 30)

# –§—É–Ω–∫—Ü—ñ—è –∑–∞–ø–∏—Ç—É –¥–æ OData
def fetch_balance_data(date):
    """–ó–∞–ø–∏—Ç –¥–æ OData —Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥ XML —É JSON"""
    formatted_date = date.strftime("%Y-%m-%dT00:00:00")
    url = f"{ODATA_URL}(Period=datetime'{formatted_date}')"

    try:
        response = requests.get(url, auth=(ODATA_USER, ODATA_PASSWORD), timeout=10)
        response.raise_for_status()  # –í–∏–∫–ª–∏—á–µ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ 4xx –∞–±–æ 5xx
        data = parse_xml(response.text, date)  # –ü–∞—Ä—Å–∏–º–æ XML —É —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤

        # –í–∏–≤–æ–¥–∏–º–æ —Ç—ñ–ª—å–∫–∏ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ä—è–¥–æ–∫
        print(f"‚úî –û—Ç—Ä–∏–º–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ {date.strftime('%Y-%m-%d')}")

        return data

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É {date.strftime('%Y-%m-%d')}: {e}")
        return []

# –§—É–Ω–∫—Ü—ñ—è –ø–∞—Ä—Å–∏–Ω–≥—É XML —É —Å–ø–∏—Å–æ–∫ JSON
def parse_xml(xml_data, period_date):
    """–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è XML-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É —Å–ø–∏—Å–æ–∫ JSON"""
    try:
        root = ET.fromstring(xml_data)
        namespace = {"d": "http://schemas.microsoft.com/ado/2007/08/dataservices"}
        results = []

        for element in root.findall(".//d:element", namespace):
            data = {
                "–î–∞—Ç–∞–í—Ä–µ–º—è": period_date,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–∞—Ç—É —ñ–∑ –∑–∞–ø–∏—Ç—É
                "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è_Key": element.find("d:–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è_Key", namespace).text,
                "–°–∫–ª–∞–¥_Key": element.find("d:–°–∫–ª–∞–¥_Key", namespace).text,
                "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key": element.find("d:–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key", namespace).text,
                "–°–µ—Ä–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã_Key": element.find("d:–°–µ—Ä–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã_Key", namespace).text,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æBalance": float(element.find("d:–ö–æ–ª–∏—á–µ—Å—Ç–≤–æBalance", namespace).text),
                "–°—Ç–æ–∏–º–æ—Å—Ç—åBalance": float(element.find("d:–°—Ç–æ–∏–º–æ—Å—Ç—åBalance", namespace).text)
            }
            results.append(data)
        
        return results
    except ET.ParseError:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É XML –∑–∞ {period_date.strftime('%Y-%m-%d')}")
        return []

# –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ë–î
def update_database(data):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ë–î"""
    if not data:
        return

    connection = pymysql.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_DATABASE)
    with connection.cursor() as cursor:
        for entry in data:
            cursor.execute("""
                SELECT –ö–æ–ª–∏—á–µ—Å—Ç–≤–æBalance, –°—Ç–æ–∏–º–æ—Å—Ç—åBalance FROM et_AccumulationRegister_–¢–æ–≤–∞—Ä—ã–ù–∞–°–∫–ª–∞–¥–∞—Ö_Balance 
                WHERE –î–∞—Ç–∞–í—Ä–µ–º—è=%s AND –°–∫–ª–∞–¥_Key=%s AND –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key=%s
            """, (entry["–î–∞—Ç–∞–í—Ä–µ–º—è"], entry["–°–∫–ª–∞–¥_Key"], entry["–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key"]))
            
            existing = cursor.fetchone()
            
            if existing:
                if (float(existing[0]) != entry["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æBalance"]) or (float(existing[1]) != entry["–°—Ç–æ–∏–º–æ—Å—Ç—åBalance"]):
                    cursor.execute("""
                        UPDATE et_AccumulationRegister_–¢–æ–≤–∞—Ä—ã–ù–∞–°–∫–ª–∞–¥–∞—Ö_Balance 
                        SET –ö–æ–ª–∏—á–µ—Å—Ç–≤–æBalance=%s, –°—Ç–æ–∏–º–æ—Å—Ç—åBalance=%s, updated_at=NOW()
                        WHERE –î–∞—Ç–∞–í—Ä–µ–º—è=%s AND –°–∫–ª–∞–¥_Key=%s AND –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key=%s
                    """, (entry["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æBalance"], entry["–°—Ç–æ–∏–º–æ—Å—Ç—åBalance"], entry["–î–∞—Ç–∞–í—Ä–µ–º—è"], entry["–°–∫–ª–∞–¥_Key"], entry["–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key"]))
            else:
                cursor.execute("""
                    INSERT INTO et_AccumulationRegister_–¢–æ–≤–∞—Ä—ã–ù–∞–°–∫–ª–∞–¥–∞—Ö_Balance 
                    (–î–∞—Ç–∞–í—Ä–µ–º—è, –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è_Key, –°–∫–ª–∞–¥_Key, –ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key, –°–µ—Ä–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã_Key, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æBalance, –°—Ç–æ–∏–º–æ—Å—Ç—åBalance, created_at, updated_at) 
                    VALUES (%s, %s, %s, %s, %s, %s, %s, NOW(), NOW())
                """, (entry["–î–∞—Ç–∞–í—Ä–µ–º—è"], entry["–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è_Key"], entry["–°–∫–ª–∞–¥_Key"], entry["–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞_Key"], entry["–°–µ—Ä–∏—è–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã_Key"], entry["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æBalance"], entry["–°—Ç–æ–∏–º–æ—Å—Ç—åBalance"]))
    
    connection.commit()
    connection.close()

# –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –¥–∞—Ç–∏ –≤ –ø–æ—Ç–æ—Ü—ñ
def process_date(date):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è (–æ—Ç—Ä–∏–º–∞–Ω–Ω—è + –∑–∞–ø–∏—Å —É –ë–î)"""
    data = fetch_balance_data(date)
    if data:
        update_database(data)

# –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å (–∑ –±–∞–≥–∞—Ç–æ–ø–æ—Ç–æ–∫–æ–≤—ñ—Å—Ç—é)
def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    start_date = get_last_balance_date()
    end_date = datetime.datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    
    print(f"üöÄ –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ {start_date.strftime('%Y-%m-%d')} –ø–æ {end_date.strftime('%Y-%m-%d')}, –ø–æ—Ç–æ–∫–∏: {MAX_THREADS}")

    dates = [start_date + datetime.timedelta(days=i) for i in range((end_date - start_date).days + 1)]

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç–æ–∫–∏
    with ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:
        future_to_date = {executor.submit(process_date, date): date for date in dates}
        
        for future in as_completed(future_to_date):
            date = future_to_date[future]
            try:
                future.result()  # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {date.strftime('%Y-%m-%d')}: {e}")

if __name__ == "__main__":
    main()
