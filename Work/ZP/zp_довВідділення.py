import os
import pickle
import pandas as pd
import gspread
from mysql.connector import connect
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow
from dotenv import load_dotenv

# === –®–õ–Ø–•–ò === #
BASE_DIR = "C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/Work/ZP"
ENV_PATH = "C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/.env"
CREDENTIALS_FILE = os.path.join(BASE_DIR, "client_secret.json")
TOKEN_FILE = os.path.join(BASE_DIR, "token.pickle")

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø === #
SHEET_ID = "19mfpQ8XgUSMpGNKQpLtL9ek5OrLj2UlvgUVR39yWubw"
SHEET_NAME = "–¥–æ–≤_–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è"
TABLE_NAME = "zp_–¥–æ–≤–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è"
SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets —á–µ—Ä–µ–∑ OAuth === #
def get_gspread_client():
    creds = None
    if os.path.exists(TOKEN_FILE):
        with open(TOKEN_FILE, 'rb') as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
            creds = flow.run_local_server(port=0)
        with open(TOKEN_FILE, 'wb') as token:
            pickle.dump(creds, token)
    return gspread.authorize(creds)

# === –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ === #
def main():
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets...")
    client = get_gspread_client()

    print(f"üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä–∫—É—à–∞: {SHEET_NAME}")
    worksheet = client.open_by_key(SHEET_ID).worksheet(SHEET_NAME)
    records = worksheet.get_all_records()
    df = pd.DataFrame(records)

    # –û—á–∏—â–µ–Ω–Ω—è –Ω–∞–∑–≤ –∫–æ–ª–æ–Ω–æ–∫ —ñ –∑–Ω–∞—á–µ–Ω—å
    df.columns = df.columns.str.strip()
    df = df.apply(lambda col: col.str.strip() if col.dtype == "object" else col)
    df.replace('', None, inplace=True)

    if df.empty:
        print("‚ö†Ô∏è –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ —É —Ç–∞–±–ª–∏—Ü—ñ.")
        return

    print("üíæ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL...")
    load_dotenv(dotenv_path=ENV_PATH)
    conn = connect(
        host=os.getenv("DB_HOST"),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASSWORD"),
        database=os.getenv("DB_DATABASE"),
        port=3306
    )
    cursor = conn.cursor()

    insert_sql = f"""
        INSERT INTO {TABLE_NAME} (`–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è`)
        VALUES (%s)
        ON DUPLICATE KEY UPDATE `–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è` = VALUES(`–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è`)
    """

    print(f"‚¨áÔ∏è –Ü–º–ø–æ—Ä—Ç {len(df)} —Ä—è–¥–∫—ñ–≤ —É {TABLE_NAME}...")
    for _, row in df.iterrows():
        cursor.execute(insert_sql, (row['–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è'],))

    conn.commit()
    cursor.close()
    conn.close()
    print("‚úÖ –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.")

# === –ó–∞–ø—É—Å–∫ === #
if __name__ == "__main__":
    main()
