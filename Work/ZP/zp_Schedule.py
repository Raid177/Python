import os
import pickle
import pandas as pd
import gspread
from mysql.connector import connect
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow
from dotenv import load_dotenv
from datetime import datetime, timedelta
from dateutil.parser import parse

# === –®–õ–Ø–•–ò === #
BASE_DIR = "C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/Work/ZP"
ENV_PATH = "C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/.env"
CREDENTIALS_FILE = os.path.join(BASE_DIR, "client_secret.json")
TOKEN_FILE = os.path.join(BASE_DIR, "token.pickle")

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø === #
SHEET_ID = "19mfpQ8XgUSMpGNKQpLtL9ek5OrLj2UlvgUVR39yWubw"
SHEET_NAME = "—Ñ–∫—Ç_–ì—Ä–∞—Ñ—ñ–∫–ü–ª–∞—Å–∫–∏–π"
TABLE_NAME = "zp_schedule"
SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets —á–µ—Ä–µ–∑ OAuth === #
def get_gspread_client():
    creds = None
    if os.path.exists(TOKEN_FILE):
        with open(TOKEN_FILE, 'rb') as token:
            creds = pickle.load(token)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
            creds = flow.run_local_server(port=0)
        with open(TOKEN_FILE, 'wb') as token:
            pickle.dump(creds, token)
    return gspread.authorize(creds)

# === –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ === #
def main():
    print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets...")
    client = get_gspread_client()

    print(f"üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä–∫—É—à–∞: {SHEET_NAME}")
    worksheet = client.open_by_key(SHEET_ID).worksheet(SHEET_NAME)
    records = worksheet.get_all_records()
    df = pd.DataFrame(records)

    df.columns = df.columns.str.strip()
    df = df.apply(lambda col: col.str.strip() if col.dtype == "object" else col)
    df.replace('', None, inplace=True)

    if df.empty:
        print("‚ö†Ô∏è –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ —É —Ç–∞–±–ª–∏—Ü—ñ.")
        return

    print("üìÇ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL...")
    load_dotenv(dotenv_path=ENV_PATH)
    conn = connect(
        host=os.getenv("DB_HOST"),
        user=os.getenv("DB_USER"),
        password=os.getenv("DB_PASSWORD"),
        database=os.getenv("DB_DATABASE"),
        port=3306,
        charset="utf8mb4"
    )
    cursor = conn.cursor()

    added = 0
    updated = 0
    errors = 0

    for _, row in df.iterrows():
        try:
            uuid = row["UUID"].strip()
            start_str = row["–§–∞–∫—Ç–ü–æ—á–∞—Ç–æ–∫"] or row["–ü–æ—á–∞—Ç–æ–∫–ó–º—ñ–Ω–∏"]
            end_str = row["–§–∞–∫—Ç–ö—ñ–Ω–µ—Ü—å"] or row["–ö—ñ–Ω–µ—Ü—å–ó–º—ñ–Ω–∏"]

            start_dt = parse(start_str, dayfirst=True)
            end_dt = parse(end_str, dayfirst=True)

            if end_dt < start_dt:
                end_dt += timedelta(days=1)

            duration = end_dt - start_dt
            duration_seconds = int(duration.total_seconds())
            duration_hours = round(duration_seconds / 3600, 2)
            duration_str = str(duration)

            date_of_shift = parse(row["–î–∞—Ç–∞ –∑–º—ñ–Ω–∏"], dayfirst=True).date()
            position = row["–ü–æ—Å–∞–¥–∞"]
            department = row["–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è"]
            shift_type = row["–¢–∏–ø–ó–º—ñ–Ω–∏"]
            surname = row["–ü—Ä—ñ–∑–≤–∏—â–µ"]
            comment = row["–ö–æ–º–µ–Ω—Ç–∞—Ä"]
            updated_at_sheet = parse(row["–û–Ω–æ–≤–ª–µ–Ω–æ"], dayfirst=True) if row["–û–Ω–æ–≤–ª–µ–Ω–æ"] else datetime.now()
            now = datetime.now()

            sql = f"""
                INSERT INTO {TABLE_NAME} (
                    UUID, –î–∞—Ç–∞–ó–º—ñ–Ω–∏, –ü–æ—á–∞—Ç–æ–∫–ó–º—ñ–Ω–∏, –ö—ñ–Ω–µ—Ü—å–ó–º—ñ–Ω–∏, –ü–æ—Å–∞–¥–∞,
                    –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è, –¢–∏–ø–ó–º—ñ–Ω–∏, –ü—Ä—ñ–∑–≤–∏—â–µ, –ö–æ–º–µ–Ω—Ç–∞—Ä, –û–Ω–æ–≤–ª–µ–Ω–æ,
                    –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å–î, –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å–ì, –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å–°–µ–∫, created_at, updated_at
                )
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ON DUPLICATE KEY UPDATE
                    –î–∞—Ç–∞–ó–º—ñ–Ω–∏=VALUES(–î–∞—Ç–∞–ó–º—ñ–Ω–∏),
                    –ü–æ—á–∞—Ç–æ–∫–ó–º—ñ–Ω–∏=VALUES(–ü–æ—á–∞—Ç–æ–∫–ó–º—ñ–Ω–∏),
                    –ö—ñ–Ω–µ—Ü—å–ó–º—ñ–Ω–∏=VALUES(–ö—ñ–Ω–µ—Ü—å–ó–º—ñ–Ω–∏),
                    –ü–æ—Å–∞–¥–∞=VALUES(–ü–æ—Å–∞–¥–∞),
                    –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è=VALUES(–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è),
                    –¢–∏–ø–ó–º—ñ–Ω–∏=VALUES(–¢–∏–ø–ó–º—ñ–Ω–∏),
                    –ü—Ä—ñ–∑–≤–∏—â–µ=VALUES(–ü—Ä—ñ–∑–≤–∏—â–µ),
                    –ö–æ–º–µ–Ω—Ç–∞—Ä=VALUES(–ö–æ–º–µ–Ω—Ç–∞—Ä),
                    –û–Ω–æ–≤–ª–µ–Ω–æ=VALUES(–û–Ω–æ–≤–ª–µ–Ω–æ),
                    –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å–î=VALUES(–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å–î),
                    –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å–ì=VALUES(–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å–ì),
                    –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å–°–µ–∫=VALUES(–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å–°–µ–∫),
                    updated_at=VALUES(updated_at)
            """

            cursor.execute(sql, (
                uuid, date_of_shift, start_dt, end_dt, position,
                department, shift_type, surname, comment, updated_at_sheet,
                duration_hours, duration_str, duration_seconds, now, now
            ))

            if cursor.rowcount == 1:
                added += 1
            elif cursor.rowcount == 2:
                updated += 1

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ UUID {row.get('UUID', '---')}: {e}")
            errors += 1

    conn.commit()
    cursor.close()
    conn.close()

    print(f"\n‚úÖ –î–æ–¥–∞–Ω–æ: {added}, –æ–Ω–æ–≤–ª–µ–Ω–æ: {updated}, –ø–æ–º–∏–ª–æ–∫: {errors}")

# === –ó–∞–ø—É—Å–∫ === #
if __name__ == "__main__":
    main()
