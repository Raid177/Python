# ============================================================================
# update_script_list_from_fs_to_gsheet.py
#
# üîß –©–æ —Ä–æ–±–∏—Ç—å:
# 1. –®—É–∫–∞—î .py-—Ñ–∞–π–ª–∏ —É /root/Python (–æ–∫—Äi–º venv)
# 2. –î–æ–¥–∞—î –Ω–æ–≤i –≤ Google Sheet 'rules' –∑ —Ç–∞–∫–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:
#    [–ü–∞–ø–∫–∞, –°–∫—Ä–∏–ø—Ç, –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫—É, –í–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –ø—ñ—Å–ª—è, –ü–∞—Ä–∞–ª–µ–ª—å–Ω–æ, –ö–æ–º–µ–Ω—Ç–∞—Ä, –î—É–±–ª—å?, –ü–æ–º–∏–ª–∫–∏]
# 3. –ó–Ω—ñ–º–∞—î –∂–∏—Ä–Ω—ñ—Å—Ç—å, —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ –≥—ñ–ø–µ—Ä–ø–æ—Å–∏–ª–∞–Ω–Ω—è —É –ø–µ—Ä—à–∏—Ö –¥–≤–æ—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
# 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î:
#    - –¥—É–±–ªi (–∑–∞–ø–∏—Å—É—î —Ä—è–¥–∫–∏ –≤ "–î—É–±–ª—å?")
#    - –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ωi i–Ω—Ç–µ—Ä–≤–∞–ª–∏ ("‚ùå –Ω–µ–≤—ñ–¥–æ–º–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª")
#    - –Ω–µi—Å–Ω—É—é—ái –∑–∞–ª–µ–∂–Ω–æ—Å—Çi ("‚ùå –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
#    - —Ü–∏–∫–ªi—á–Ωi –∑–∞–ª–µ–∂–Ω–æ—Å—Çi ("‚ùå —Ü–∏–∫–ª—ñ—á–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å")
# 5. üíæ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –¥–∞–Ω—ñ –≤ –ë–î —Ç–∞–±–ª–∏—Ü—é `cron_script_rules`, —â–æ–± –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –æ—Ñ–ª–∞–π–Ω
#
# üìã –§–æ—Ä–º–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –∑–∞–ø—É—Å–∫—É (–∫–æ–ª–æ–Ω–∫–∞ "–Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫—É"):
#   - daily@04:00             ‚Üí —â–æ–¥–Ω—è –æ 4:00
#   - weekly@Mon 06:00        ‚Üí —â–æ—Ç–∏–∂–Ω—è –≤ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –æ 6:00
#   - monthly@1 03:00         ‚Üí –∫–æ–∂–Ω–æ–≥–æ 1-–≥–æ —á–∏—Å–ª–∞ –º—ñ—Å—è—Ü—è –æ 3:00
#   - hourly@4                ‚Üí –∫–æ–∂–Ω—ñ 4 –≥–æ–¥–∏–Ω–∏
#   - every@2days             ‚Üí –∫–æ–∂–Ω—ñ 2 –¥–Ω—ñ
#   - –ö—ñ–ª—å–∫–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤:      daily@04:00,weekly@Sun 06:00
#
# üìÑ –¢–∞–±–ª–∏—Ü—è Google Sheets: https://docs.google.com/spreadsheets/d/1bTvSME9yUbMJ6B6mlhWyOZwHGZwAXncWbdxsxnBfYbA
# ============================================================================


from pathlib import Path
import re
from datetime import datetime
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
import mysql.connector
from dotenv import load_dotenv
import os

load_dotenv("/root/Python/.env")


# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TOKEN_PATH = "/root/Python/auth/token.json"
SPREADSHEET_ID = "1bTvSME9yUbMJ6B6mlhWyOZwHGZwAXncWbdxsxnBfYbA"
SHEET_NAME = "rules"
ROOT_DIR = Path("/root/Python")
DB_CONFIG = {
    "host": os.getenv("DB_HOST"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "database": os.getenv("DB_NAME"),
}

interval_patterns = [
    r"^$", r"^none$",
    r"^daily@\d{2}:\d{2}$",
    r"^weekly@\w{3} \d{2}:\d{2}$",
    r"^monthly@\d{1,2} \d{2}:\d{2}$",
    r"^hourly@\d{1,2}$",
    r"^every@\d+(days|weeks|months)$"
]

creds = Credentials.from_authorized_user_file(TOKEN_PATH, ["https://www.googleapis.com/auth/spreadsheets"])
service = build("sheets", "v4", credentials=creds)
sheet = service.spreadsheets()

# === –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –∑ Google Sheet ===
resp = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range=f"{SHEET_NAME}!A2:H").execute()
rows = resp.get("values", [])

# === –û—á–∏—Å—Ç–∫–∞ –∫–ª—ñ—Ç–∏–Ω–æ–∫ ===
cleaned = [[cell.strip() if isinstance(cell, str) else cell for cell in row] + [""] * (8 - len(row)) for row in rows]
sheet.values().update(
    spreadsheetId=SPREADSHEET_ID,
    range=f"{SHEET_NAME}!A2:H",
    valueInputOption="USER_ENTERED",
    body={"values": cleaned}
).execute()
rows = cleaned

# === –í–∏—è–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤ ===
existing = {(r[0], r[1]): idx + 2 for idx, r in enumerate(rows) if len(r) >= 2}
all_scripts = []
for f in ROOT_DIR.rglob("*.py"):
    if "venv" in f.parts:
        continue
    folder = f.parent.as_posix().replace(str(ROOT_DIR), "").lstrip("/")
    all_scripts.append((folder, f.name))

all_seen = {}
for idx, row in enumerate(rows, start=2):
    if len(row) >= 2:
        key = (row[0], row[1])
        all_seen.setdefault(key, []).append(idx)

new = [s for s in all_scripts if s not in existing]
values_to_append = [[folder, script, "", "", "—Ç–∞–∫", "", ", ".join(map(str, all_seen.get((folder, script), []))), ""] for folder, script in new]

if values_to_append:
    sheet.values().append(
        spreadsheetId=SPREADSHEET_ID,
        range=f"{SHEET_NAME}!A2",
        valueInputOption="USER_ENTERED",
        insertDataOption="INSERT_ROWS",
        body={"values": values_to_append}
    ).execute()

    metadata = sheet.get(spreadsheetId=SPREADSHEET_ID).execute()
    sid = next(s["properties"]["sheetId"] for s in metadata["sheets"] if s["properties"]["title"] == SHEET_NAME)
    start = len(rows) + 1
    end = start + len(values_to_append)
    fmt = {
        "repeatCell": {
            "range": {"sheetId": sid, "startRowIndex": start, "endRowIndex": end, "startColumnIndex": 0, "endColumnIndex": 2},
            "cell": {"userEnteredFormat": {"textFormat": {"bold": False}, "horizontalAlignment": "LEFT"}},
            "fields": "userEnteredFormat(textFormat,horizontalAlignment)"
        }
    }
    service.spreadsheets().batchUpdate(spreadsheetId=SPREADSHEET_ID, body={"requests": [fmt]}).execute()
    print(f"‚úÖ –î–æ–¥–∞–Ω–æ {len(values_to_append)} —Å–∫—Ä–∏–ø—Ç—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—é.")
else:
    print("‚úÖ –ù–æ–≤–∏—Ö —Å–∫—Ä–∏–ø—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —Ç–∞ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—ñ–≤ ===
rows_normalized = [[cell.strip() if isinstance(cell, str) else "" for cell in row] + [""] * (8 - len(row)) for row in rows]
reverse_map = {(r[0], r[1]): i for i, r in enumerate(rows_normalized)}
deps = {}
errors = ["" for _ in rows_normalized]

for i, row in enumerate(rows_normalized):
    key = (row[0], row[1])
    after = row[3]
    if after:
        dep_keys = []
        for part in after.split(","):
            part = part.strip()
            if "/" in part:
                folder_dep, script_dep = map(str.strip, part.split("/", 1))
            elif "," in part:
                folder_dep, script_dep = map(str.strip, part.split(",", 1))
            else:
                folder_dep, script_dep = "", part
            dep_keys.append((folder_dep, script_dep))
        deps[key] = set(dep_keys)

for i, row in enumerate(rows_normalized):
    key = (row[0], row[1])
    for dep in deps.get(key, []):
        if dep not in reverse_map:
            errors[i] += "‚ùå –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ; "
        elif key in deps.get(dep, set()):
            errors[i] += "‚ùå —Ü–∏–∫–ª—ñ—á–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å; "

for i, row in enumerate(rows_normalized):
    interval = row[2]
    parts = [p.strip() for p in interval.split(",") if p.strip()]
    for part in parts:
        if not any(re.match(pat, part) for pat in interval_patterns):
            errors[i] += "‚ùå –Ω–µ–≤—ñ–¥–æ–º–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª; "

# === –ó–∞–ø–∏—Å –ø–æ–º–∏–ª–æ–∫ ===
error_column = [[e.strip()] for e in errors]
sheet.values().update(
    spreadsheetId=SPREADSHEET_ID,
    range=f"{SHEET_NAME}!H2",
    valueInputOption="USER_ENTERED",
    body={"values": error_column}
).execute()

# === –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ –ë–î ===
conn = mysql.connector.connect(**DB_CONFIG)
cursor = conn.cursor()
cursor.execute("TRUNCATE TABLE cron_script_rules")
insert_sql = """
    INSERT INTO cron_script_rules (folder, script_name, run_interval, run_after, parallel, comment, duplicate_of, errors, synced_at)
    VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s)
"""
data = []
for i, row in enumerate(rows_normalized):
    folder = row[0]
    script = row[1]
    interval = row[2]
    after = row[3]
    parallel = row[4] or "—Ç–∞–∫"
    comment = row[5]
    duplicate_of = row[6] if row[6] else None
    errs = error_column[i][0]
    synced_at = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    data.append((folder, script, interval, after, parallel, comment, duplicate_of, errs, synced_at))

cursor.executemany(insert_sql, data)
conn.commit()
cursor.close()
conn.close()
print("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—é cron_script_rules.")