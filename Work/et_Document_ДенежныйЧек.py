import os
import requests
import mysql.connector
from dotenv import load_dotenv
from datetime import datetime, timedelta

load_dotenv()

ODATA_URL = os.getenv("ODATA_URL").rstrip("/")
ODATA_USER = os.getenv("ODATA_USER")
ODATA_PASSWORD = os.getenv("ODATA_PASSWORD")

DB_HOST = os.getenv("DB_HOST")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_DATABASE = os.getenv("DB_DATABASE")

ODATA_ENTITY = "Document_–î–µ–Ω–µ–∂–Ω—ã–π–ß–µ–∫"
MYSQL_TABLE = "et_Document_–î–µ–Ω–µ–∂–Ω—ã–π–ß–µ–∫"
PAGE_SIZE = 1000
START_DATE = datetime(2024, 7, 28)

# –ø–æ–ª—è –∑ –ë–î (–±–µ–∑ created_at, updated_at)
odata_fields = [
    "Ref_Key", "DataVersion", "DeletionMark", "Number", "Date", "Posted",
    "–í–∞–ª—é—Ç–∞_Key", "–í–∏–¥–î–≤–∏–∂–µ–Ω–∏—è", "–í–∏–¥–û–ø–ª–∞—Ç—ã–ë–µ–∑–Ω–∞–ª_Key", "–í–∏–¥–°–∫–∏–¥–∫–∏_Key",
    "–î–µ–Ω–µ–∂–Ω—ã–π–°—á–µ—Ç", "–î–µ–Ω–µ–∂–Ω—ã–π–°—á–µ—Ç_Type", "–î–µ–Ω–µ–∂–Ω—ã–π–°—á–µ—Ç–ë–µ–∑–Ω–∞–ª_Key", "–î–µ–Ω–µ–∂–Ω—ã–π–°—á–µ—Ç–ö—Ä–µ–¥–∏—Ç_Key",
    "–î–∏—Å–∫–æ–Ω—Ç–Ω–∞—è–ö–∞—Ä—Ç–æ—á–∫–∞_Key", "–ó–∞—è–≤–∫–∞_Key", "–ö–∞—Ä—Ç–æ—á–∫–∞_Key", "–ö–∞—Å—Å–∏—Ä–ò–ù–ù", "–ö–∞—Å—Å–∏—Ä–§–ò–û",
    "–ö–æ–¥–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å", "–ö—É—Ä—Å", "–ú–î–õ–ü–ò–î", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–î–≤–∏–∂–µ–Ω–∏—è",
    "–ù–µ–ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å–ö–∞—Å—Å–∏—Ä–∞", "–ù–æ–º–µ—Ä–ü–ª–∞—Ç–µ–∂–Ω–æ–π–ö–∞—Ä—Ç—ã", "–ù–æ–º–µ—Ä–ß–µ–∫–∞–≠–¢", "–û–±—ä–µ–∫—Ç", "–û–±—ä–µ–∫—Ç_Type",
    "–û–∫—Ä—É–≥–ª—è—Ç—å–ò—Ç–æ–≥–ß–µ–∫–∞", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è_Key", "–û—Å–Ω–æ–≤–∞–Ω–∏–µ", "–û—Å–Ω–æ–≤–∞–Ω–∏–µ_Type",
    "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π_Key", "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—åEmail", "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å–°–ú–°", "–ü–æ–¥–æ—Ç—á–µ—Ç",
    "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ_Key", "–ü—Ä–æ—Ü–µ–Ω—Ç–†—É—á–Ω–æ–π–°–∫–∏–¥–∫–∏–ù–∞—Ü–µ–Ω–∫–∏", "–°–¥–∞—á–∞", "–°–∏—Å—Ç–µ–º–∞–ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è",
    "–°–∫–∏–¥–∫–∞", "–°–ø–æ—Å–æ–±–û–∫—Ä—É–≥–ª–µ–Ω–∏—è–ò—Ç–æ–≥–∞–ß–µ–∫–∞", "–°—Å—ã–ª–æ—á–Ω—ã–π–ù–æ–º–µ—Ä", "–°—Å—ã–ª–æ—á–Ω—ã–π–ù–æ–º–µ—Ä–û—Å–Ω–æ–≤–∞–Ω–∏—è",
    "–°—É–º–º–∞", "–°—É–º–º–∞–ë–µ–∑–Ω–∞–ª", "–°—É–º–º–∞–ö–æ—Ä—Ä", "–°—É–º–º–∞–ö—Ä–µ–¥–∏—Ç", "–°—É–º–º–∞–ü–ª–∞—Ç–µ–∂–∞–ë–æ–Ω—É—Å—ã",
    "–°—É–º–º–∞–¢–æ—Ä–≥–æ–≤–æ–π–£—Å—Ç—É–ø–∫–∏", "–£–¥–∞–ª–∏—Ç—å–ú–µ–∂–¥—É–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏", "–£–¥–∞–ª–∏—Ç—å–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–ü–æ–ª—É—á–∞—Ç–µ–ª—å_Key",
    "–£–ò–î–ü–ª–∞—Ç–µ–∂–∞", "–£–ò–î–ü–ª–∞—Ç–µ–∂–∞1–°", "–£–∫–∞–∑–∞–Ω–Ω—ã–πEmail", "–£–∫–∞–∑–∞–Ω–Ω—ã–π–¢–µ–ª–µ—Ñ–æ–Ω",
    "–§–∏—Å–∫–∞–ª—å–Ω—ã–π–ù–æ–º–µ—Ä–ß–µ–∫–∞", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ", "–ò–Ω–≤–æ–π—Å_Key", "MistyLoyalty_–ü–∞—Ä–∞–º–µ—Ç—Ä—ã–û–ø–µ—Ä–∞—Ü–∏–∏_Type",
    "MistyLoyalty_–ü–∞—Ä–∞–º–µ—Ç—Ä—ã–û–ø–µ—Ä–∞—Ü–∏–∏_Base64Data", "–≠–∫–≤–∞–π—Ä–ò–î", "–¢–µ—Ä–º–∏–Ω–∞–ª–ò–î",
    "–ü–ª–∞—Ç–µ–∂–Ω–∞—è–°–∏—Å—Ç–µ–º–∞–≠–¢", "MistyLoyaltyOperationID", "–°—É–º–º–∞–í–∫–ª—é—á–∞–µ—Ç–ù–î–°",
    "–î–æ–∫—É–º–µ–Ω—Ç–ë–µ–∑–ù–î–°", "–≠–∫–≤–∞–π—Ä–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–î—Ä—É–≥–æ–µ–°—Ä–µ–¥—Å—Ç–≤–æ–û–ø–ª–∞—Ç—ã_Key",
    "–î–µ–Ω–µ–∂–Ω—ã–π–°—á–µ—Ç–ë–µ–∑–Ω–∞–ª–î–°–û_Key", "–°—É–º–º–∞–ë–µ–∑–Ω–∞–ª–î–°–û", "–ü—Ä–æ–≤–µ—Ä–µ–Ω"
]

def connect_db():
    return mysql.connector.connect(
        host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_DATABASE
    )

def get_last_date_from_db():
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute(f"SELECT MAX(`Date`) FROM `{MYSQL_TABLE}`")
    result = cursor.fetchone()[0]
    conn.close()
    if result:
        return result - timedelta(days=30)
    else:
        return START_DATE

def fetch_data(start_date, skip):
    filter_date = start_date.strftime("%Y-%m-%dT%H:%M:%S")
    select_fields = ",".join(odata_fields)
    url = (
        f"{ODATA_URL}/{ODATA_ENTITY}"
        f"?$format=json"
        f"&$orderby=Date"
        f"&$top={PAGE_SIZE}"
        f"&$skip={skip}"
        f"&$filter=Date ge datetime'{filter_date}'"
        f"&$select={select_fields}"
    )
    response = requests.get(url, auth=(ODATA_USER, ODATA_PASSWORD))
    response.raise_for_status()
    return response.json().get("value", [])

def insert_or_update_record(record, cursor):
    ref_key = record["Ref_Key"]
    dataversion = record.get("DataVersion", "")
    cursor.execute(
        f"SELECT `DataVersion` FROM `{MYSQL_TABLE}` WHERE `Ref_Key` = %s",
        (ref_key,)
    )
    result = cursor.fetchone()
    if result:
        if result[0] != dataversion:
            placeholders = ", ".join([f"`{k}` = %s" for k in record])
            sql = f"UPDATE `{MYSQL_TABLE}` SET {placeholders}, `updated_at` = NOW() WHERE `Ref_Key` = %s"
            cursor.execute(sql, list(record.values()) + [ref_key])
            return "updated"
        else:
            return "skipped"
    else:
        fields = ", ".join(f"`{k}`" for k in record)
        placeholders = ", ".join(["%s"] * len(record))
        sql = f"INSERT INTO `{MYSQL_TABLE}` ({fields}, `created_at`, `updated_at`) VALUES ({placeholders}, NOW(), NOW())"
        cursor.execute(sql, list(record.values()))
        return "inserted"

def main():
    print(f"üöÄ –°—Ç–∞—Ä—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è {ODATA_ENTITY}")
    start_date = get_last_date_from_db()
    print(f"üìÖ –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –¥–∞—Ç–∏: {start_date}")

    conn = connect_db()
    cursor = conn.cursor()
    skip = 0
    total_inserted = total_updated = total_skipped = 0

    while True:
        data = fetch_data(start_date, skip)
        if not data:
            break

        inserted = updated = skipped = 0
        dates = [d["Date"] for d in data if "Date" in d]
        min_date = min(dates)
        max_date = max(dates)

        for item in data:
            record = {k: item.get(k) for k in odata_fields}
            status = insert_or_update_record(record, cursor)
            if status == "inserted":
                inserted += 1
            elif status == "updated":
                updated += 1
            elif status == "skipped":
                skipped += 1

        conn.commit()

        print(f"üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤: –∑ {min_date} –ø–æ {max_date} | ‚ûï {inserted} üîÅ {updated} ‚è≠Ô∏è {skipped}")

        total_inserted += inserted
        total_updated += updated
        total_skipped += skipped
        skip += PAGE_SIZE

    conn.close()
    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å—å–æ–≥–æ ‚ûï {total_inserted} üîÅ {total_updated} ‚è≠Ô∏è {total_skipped}")

if __name__ == "__main__":
    main()
