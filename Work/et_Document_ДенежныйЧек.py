import os
import requests
import mysql.connector
from datetime import datetime, timedelta
from dotenv import load_dotenv
from requests.auth import HTTPBasicAuth

load_dotenv()

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
ODATA_URL = os.getenv("ODATA_URL") + "Document_–î–µ–Ω–µ–∂–Ω—ã–π–ß–µ–∫"
ODATA_USER = os.getenv("ODATA_USER")
ODATA_PASSWORD = os.getenv("ODATA_PASSWORD")
ODATA_AUTH = HTTPBasicAuth(ODATA_USER, ODATA_PASSWORD)

DB_CONFIG = {
    "host": os.getenv("DB_HOST"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "database": os.getenv("DB_DATABASE"),
    "autocommit": True
}

PAGE_SIZE = 1
START_DATE_FALLBACK = datetime(2024, 7, 28)

ODATA_FIELDS = [  # –≤—Å—ñ –ø–æ–ª—è –∑ —Ç–∞–±–ª–∏—Ü—ñ, –æ–∫—Ä—ñ–º created_at, updated_at
    "Ref_Key", "DataVersion", "DeletionMark", "Number", "Date", "Posted",
    "–í–∞–ª—é—Ç–∞_Key", "–í–∏–¥–î–≤–∏–∂–µ–Ω–∏—è", "–í–∏–¥–û–ø–ª–∞—Ç—ã–ë–µ–∑–Ω–∞–ª_Key", "–í–∏–¥–°–∫–∏–¥–∫–∏_Key",
    "–î–µ–Ω–µ–∂–Ω—ã–π–°—á–µ—Ç", "–î–µ–Ω–µ–∂–Ω—ã–π–°—á–µ—Ç_Type", "–î–µ–Ω–µ–∂–Ω—ã–π–°—á–µ—Ç–ë–µ–∑–Ω–∞–ª_Key", "–î–µ–Ω–µ–∂–Ω—ã–π–°—á–µ—Ç–ö—Ä–µ–¥–∏—Ç_Key",
    "–î–∏—Å–∫–æ–Ω—Ç–Ω–∞—è–ö–∞—Ä—Ç–æ—á–∫–∞_Key", "–ó–∞—è–≤–∫–∞_Key", "–ö–∞—Ä—Ç–æ—á–∫–∞_Key", "–ö–∞—Å—Å–∏—Ä–ò–ù–ù", "–ö–∞—Å—Å–∏—Ä–§–ò–û",
    "–ö–æ–¥–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å", "–ö—É—Ä—Å", "–ú–î–õ–ü–ò–î", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–î–≤–∏–∂–µ–Ω–∏—è",
    "–ù–µ–ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å–ö–∞—Å—Å–∏—Ä–∞", "–ù–æ–º–µ—Ä–ü–ª–∞—Ç–µ–∂–Ω–æ–π–ö–∞—Ä—Ç—ã", "–ù–æ–º–µ—Ä–ß–µ–∫–∞–≠–¢", "–û–±—ä–µ–∫—Ç", "–û–±—ä–µ–∫—Ç_Type",
    "–û–∫—Ä—É–≥–ª—è—Ç—å–ò—Ç–æ–≥–ß–µ–∫–∞", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è_Key", "–û—Å–Ω–æ–≤–∞–Ω–∏–µ", "–û—Å–Ω–æ–≤–∞–Ω–∏–µ_Type",
    "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π_Key", "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—åEmail", "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å–°–ú–°", "–ü–æ–¥–æ—Ç—á–µ—Ç",
    "–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ_Key", "–ü—Ä–æ—Ü–µ–Ω—Ç–†—É—á–Ω–æ–π–°–∫–∏–¥–∫–∏–ù–∞—Ü–µ–Ω–∫–∏", "–°–¥–∞—á–∞", "–°–∏—Å—Ç–µ–º–∞–ù–∞–ª–æ–≥–æ–æ–±–ª–æ–∂–µ–Ω–∏—è",
    "–°–∫–∏–¥–∫–∞", "–°–ø–æ—Å–æ–±–û–∫—Ä—É–≥–ª–µ–Ω–∏—è–ò—Ç–æ–≥–∞–ß–µ–∫–∞", "–°—Å—ã–ª–æ—á–Ω—ã–π–ù–æ–º–µ—Ä", "–°—Å—ã–ª–æ—á–Ω—ã–π–ù–æ–º–µ—Ä–û—Å–Ω–æ–≤–∞–Ω–∏—è",
    "–°—É–º–º–∞", "–°—É–º–º–∞–ë–µ–∑–Ω–∞–ª", "–°—É–º–º–∞–ö–æ—Ä—Ä", "–°—É–º–º–∞–ö—Ä–µ–¥–∏—Ç", "–°—É–º–º–∞–ü–ª–∞—Ç–µ–∂–∞–ë–æ–Ω—É—Å—ã",
    "–°—É–º–º–∞–¢–æ—Ä–≥–æ–≤–æ–π–£—Å—Ç—É–ø–∫–∏", "–£–¥–∞–ª–∏—Ç—å–ú–µ–∂–¥—É–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏", "–£–¥–∞–ª–∏—Ç—å–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–ü–æ–ª—É—á–∞—Ç–µ–ª—å_Key",
    "–£–ò–î–ü–ª–∞—Ç–µ–∂–∞", "–£–ò–î–ü–ª–∞—Ç–µ–∂–∞1–°", "–£–∫–∞–∑–∞–Ω–Ω—ã–πEmail", "–£–∫–∞–∑–∞–Ω–Ω—ã–π–¢–µ–ª–µ—Ñ–æ–Ω",
    "–§–∏—Å–∫–∞–ª—å–Ω—ã–π–ù–æ–º–µ—Ä–ß–µ–∫–∞", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ", "–ò–Ω–≤–æ–π—Å_Key", "MistyLoyalty_–ü–∞—Ä–∞–º–µ—Ç—Ä—ã–û–ø–µ—Ä–∞—Ü–∏–∏_Type",
    "MistyLoyalty_–ü–∞—Ä–∞–º–µ—Ç—Ä—ã–û–ø–µ—Ä–∞—Ü–∏–∏_Base64Data", "–≠–∫–≤–∞–π—Ä–ò–î", "–¢–µ—Ä–º–∏–Ω–∞–ª–ò–î",
    "–ü–ª–∞—Ç–µ–∂–Ω–∞—è–°–∏—Å—Ç–µ–º–∞–≠–¢", "MistyLoyaltyOperationID", "–°—É–º–º–∞–í–∫–ª—é—á–∞–µ—Ç–ù–î–°",
    "–î–æ–∫—É–º–µ–Ω—Ç–ë–µ–∑–ù–î–°", "–≠–∫–≤–∞–π—Ä–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–î—Ä—É–≥–æ–µ–°—Ä–µ–¥—Å—Ç–≤–æ–û–ø–ª–∞—Ç—ã_Key",
    "–î–µ–Ω–µ–∂–Ω—ã–π–°—á–µ—Ç–ë–µ–∑–Ω–∞–ª–î–°–û_Key", "–°—É–º–º–∞–ë–µ–∑–Ω–∞–ª–î–°–û", "–ü—Ä–æ–≤–µ—Ä–µ–Ω"
]

def get_last_date_from_db(cursor):
    cursor.execute("SELECT MAX(`Date`) FROM et_Document_–î–µ–Ω–µ–∂–Ω—ã–π–ß–µ–∫")
    result = cursor.fetchone()
    return result[0] if result and result[0] else None

def get_records_from_odata(start_date):
    while True:
        formatted_date = start_date.strftime("%Y-%m-%dT%H:%M")
        params = {
            "$format": "json",
            "$orderby": "Date",
            "$top": str(PAGE_SIZE),
            "$filter": f"cast(Date,'Edm.DateTime') ge {formatted_date}",

            "$select": ",".join(ODATA_FIELDS)
        }

        response = requests.get(ODATA_URL, auth=ODATA_AUTH, params=params)
        if response.status_code != 200:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ {response.status_code}: {response.text}")
            break

        data = response.json().get("value", [])
        if not data:
            break

        dates = [d["Date"] for d in data if "Date" in d]
        if dates:
            d_from = min(dates)
            d_to = max(dates)
            print(f"üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤ –∑ {d_from} –ø–æ {d_to}")
        else:
            print(f"üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤ (–¥–∞—Ç–∞ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞)")

        yield from data

        if len(data) < PAGE_SIZE:
            break

        start_date = datetime.fromisoformat(dates[-1]) + timedelta(seconds=1)

def insert_or_update(cursor, row):
    ref_key = row["Ref_Key"]
    data_version = row["DataVersion"]

    cursor.execute("SELECT DataVersion FROM et_Document_–î–µ–Ω–µ–∂–Ω—ã–π–ß–µ–∫ WHERE Ref_Key = %s", (ref_key,))
    existing = cursor.fetchone()

    if existing:
        if existing[0] != data_version:
            update_record(cursor, row)
            return "updated"
        return "skipped"
    else:
        insert_record(cursor, row)
        return "inserted"

def insert_record(cursor, row):
    fields = ", ".join(row.keys()) + ", created_at, updated_at"
    placeholders = ", ".join(["%s"] * len(row)) + ", NOW(), NOW()"
    values = tuple(row.values())
    cursor.execute(
        f"INSERT INTO et_Document_–î–µ–Ω–µ–∂–Ω—ã–π–ß–µ–∫ ({fields}) VALUES ({placeholders})", values
    )

def update_record(cursor, row):
    assignments = ", ".join([f"{key} = %s" for key in row.keys()])
    values = tuple(row.values()) + (row["Ref_Key"],)
    cursor.execute(
        f"UPDATE et_Document_–î–µ–Ω–µ–∂–Ω—ã–π–ß–µ–∫ SET {assignments}, updated_at = NOW() WHERE Ref_Key = %s", values
    )

def main():
    conn = mysql.connector.connect(**DB_CONFIG)
    cursor = conn.cursor()

    last_date = get_last_date_from_db(cursor)
    if last_date:
        date_from = last_date - timedelta(days=15)
    else:
        date_from = START_DATE_FALLBACK

    stats = {"inserted": 0, "updated": 0, "skipped": 0}

    for row in get_records_from_odata(date_from):
        result = insert_or_update(cursor, row)
        stats[result] += 1

    print("\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ:")
    print(f"‚ûï –î–æ–¥–∞–Ω–æ: {stats['inserted']}")
    print(f"‚úèÔ∏è  –û–Ω–æ–≤–ª–µ–Ω–æ: {stats['updated']}")
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω: {stats['skipped']}")

    cursor.close()
    conn.close()

if __name__ == "__main__":
    main()
