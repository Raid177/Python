import requests
import json
import os
import mysql.connector
from datetime import datetime, timedelta
from dotenv import load_dotenv

# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env
load_dotenv()

# üîπ –ß–µ–∫–ë–æ–∫—Å API: –î–∞–Ω—ñ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
CREDENTIALS = [
    {
        "license_key": os.getenv("DPS_LAV_LICENSE_KEY"),
        "pin_code": os.getenv("DPS_LAV_PIN_CODE"),
        "cash_register_id": os.getenv("DPS_LAV_CASH_REGISTER_ID"),
        "branch_id": os.getenv("DPS_LAV_BRANCH_ID"),
        "fop": "–õ—å–æ–¥—ñ–Ω –û–ª–µ–∫—Å—ñ–π –í–æ–ª–æ–¥–∏–º–∏—Ä–æ–≤–∏—á"
    },
    {
        "license_key": os.getenv("DPS_ZVO_LICENSE_KEY"),
        "pin_code": os.getenv("DPS_ZVO_PIN_CODE"),
        "cash_register_id": os.getenv("DPS_ZVO_CASH_REGISTER_ID"),
        "branch_id": os.getenv("DPS_ZVO_BRANCH_ID"),
        "fop": "–ñ–∏–ª—ñ–Ω–∞ –í–∞–ª–µ—Ä—ñ—è –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞"
    }
]

# üîπ –î–∞–Ω—ñ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
DB_HOST = os.getenv("DB_HOST")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_DATABASE = os.getenv("DB_DATABASE")

# üîπ URL-–∞–¥—Ä–µ—Å–∏ API
AUTH_URL = "https://api.checkbox.ua/api/v1/cashier/signinPinCode"
CASH_REGISTERS_URL = "https://api.checkbox.ua/api/v1/cash-registers"
BRANCHES_URL = "https://api.checkbox.ua/api/v1/branches"

# üîπ –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –¥–∞—Ç–∏ open_date –≤ –ë–î
def get_last_open_date(cash_register_id, branch_id):
    try:
        db_conn = mysql.connector.connect(
            host=DB_HOST,
            user=DB_USER,
            password=DB_PASSWORD,
            database=DB_DATABASE
        )
        cursor = db_conn.cursor()

        query = """
        SELECT MAX(open_date) FROM Z_CheckBox
        WHERE cash_register_id = %s AND branch_id = %s
        """
        cursor.execute(query, (cash_register_id, branch_id))
        result = cursor.fetchone()[0]

        cursor.close()
        db_conn.close()

        if result:
            last_date = result - timedelta(days=1)
        else:
            last_date = datetime(2025, 1, 1)  # –Ø–∫—â–æ –ë–î –ø—É—Å—Ç–∞, –±–µ—Ä–µ–º–æ 1 —Å—ñ—á–Ω—è 2025

        return last_date.strftime("%Y-%m-%dT00:00:00+0300")

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞—Ç–∏ –∑ –ë–î: {e}")
        return "2025-01-01T00:00:00+0300"  # –ë–µ–∑–ø–µ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è

# üîπ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–∞—Å —ñ —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫
for cred in CREDENTIALS:
    print(f"üîë –ê–≤—Ç–æ—Ä–∏–∑—É—é—Å—å –¥–ª—è –§–û–ü {cred['fop']} (–ö–∞—Å–∞: {cred['cash_register_id']}, –¢–æ—á–∫–∞: {cred['branch_id']})...")

    # üîπ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –≤ –ß–µ–∫–ë–æ–∫—Å
    auth_headers = {
        "accept": "application/json",
        "X-Client-Name": "My-Integration",
        "X-Client-Version": "1.0",
        "X-License-Key": cred["license_key"],
        "Content-Type": "application/json"
    }
    auth_data = {"pin_code": cred["pin_code"]}

    auth_response = requests.post(AUTH_URL, headers=auth_headers, json=auth_data)

    if auth_response.status_code in [200, 201]:
        access_token = auth_response.json().get("access_token")
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞ –¥–ª—è {cred['fop']}")
    else:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {auth_response.status_code}")
        continue

    # üîπ –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∫–∞—Å–∏
    from_date = get_last_open_date(cred["cash_register_id"], cred["branch_id"])
    to_date = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%dT23:59:59+0300")

    print(f"üìä –û—Ç—Ä–∏–º—É—é –¥–∞–Ω—ñ –∑–∞ –ø–µ—Ä—ñ–æ–¥ {from_date} - {to_date}...")

    # üîπ –ó–∞–ø–∏—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–∞—Å
    headers = {
        "accept": "application/json",
        "Authorization": f"Bearer {access_token}",
    }

    cash_registers_response = requests.get(CASH_REGISTERS_URL, headers=headers)
    branches_response = requests.get(BRANCHES_URL, headers=headers)

    # üîπ –í–∏–≤–æ–¥–∏–º–æ –∫–∞—Å–∏
    if cash_registers_response.status_code == 200:
        cash_registers = cash_registers_response.json()
        print(f"\n‚úÖ –°–ø–∏—Å–æ–∫ –∫–∞—Å –¥–ª—è {cred['fop']} (CASH_REGISTER_ID):")
        for register in cash_registers.get("results", []):
            print(f"   - {register['id']} ({register.get('address', '–ë–µ–∑ –∞–¥—Ä–µ—Å–∏')})")
    else:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Å: {cash_registers_response.status_code}")

    # üîπ –í–∏–≤–æ–¥–∏–º–æ —Ç–æ—Ä–≥–æ–≤—ñ —Ç–æ—á–∫–∏
    if branches_response.status_code == 200:
        branches = branches_response.json()
        print(f"\n‚úÖ –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫ –¥–ª—è {cred['fop']} (BRANCH_ID):")
        for branch in branches.get("results", []):
            print(f"   - {branch['id']} ({branch.get('address', '–ë–µ–∑ –∞–¥—Ä–µ—Å–∏')})")
    else:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö —Ç–æ—á–æ–∫: {branches_response.status_code}")

print("\nüöÄ –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
