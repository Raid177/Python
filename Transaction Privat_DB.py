import requests
from dotenv import load_dotenv
import os
import mysql.connector
from datetime import datetime, timedelta

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
DB_HOST = os.getenv('DB_HOST')
DB_USER = os.getenv('DB_USER')
DB_PASSWORD = os.getenv('DB_PASSWORD')
DB_DATABASE = os.getenv('DB_DATABASE')

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
conn = mysql.connector.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_DATABASE)
cursor = conn.cursor()

# –ù–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É
account_number = 'UA973052990000026002025035545'

# –û—Ç—Ä–∏–º—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
cursor.execute("""
    SELECT MAX(DATE_TIME_DAT_OD_TIM_P)
    FROM bnk_trazact_prvt
    WHERE AUT_MY_ACC = %s
""", (account_number,))
last_date = cursor.fetchone()[0]

# –Ø–∫—â–æ —Ä–∞—Ö—É–Ω–æ–∫ —î –≤ –ë–î —ñ —î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó, –±–µ—Ä–µ–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–∞—Ç—É, –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ 1 –¥–µ–Ω—å
if last_date:
    start_date = (last_date - timedelta(days=1)).strftime('%d-%m-%Y')
else:
    # –Ø–∫—â–æ —Ä–∞—Ö—É–Ω–∫—É —â–µ –Ω–µ–º–∞—î –≤ –ë–î, –ø–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞ –±—É–¥–µ 2024-07-01
    start_date = '01-07-2024'

end_date = datetime.now().strftime('%d-%m-%Y')

# –í–∏–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç–∏ —Å—Ç–∞—Ä—Ç—É —Ç–∞ —Ñ—ñ–Ω—ñ—à—É –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª
print(f"üìÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç—É: {start_date}")
print(f"üìÖ –î–∞—Ç–∞ —Ñ—ñ–Ω—ñ—à—É: {end_date}")

# API-–∑–∞–ø–∏—Ç
url = 'https://acp.privatbank.ua/api/statements/transactions'
headers = {
    'User-Agent': 'PythonClient',
    'token': API_TOKEN,
    'Content-Type': 'application/json;charset=cp1251'
}
params = {
    'acc': account_number,
    'startDate': start_date,
    'endDate': end_date,
    'limit': '50'  # –û–¥–µ—Ä–∂—É—î–º–æ –ø–µ—Ä—à—ñ 50 –∑–∞–ø–∏—Å—ñ–≤
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–∞—á–∫–∏
next_page_id = None
while True:
    if next_page_id:
        params['followId'] = next_page_id  # –î–æ–¥–∞—î–º–æ followId –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–∞—á–∫–∏
    
    response = requests.get(url, headers=headers, params=params)
    
    if response.status_code == 200:
        data = response.json()
        if data.get('status') == 'SUCCESS':
            transactions = data.get('transactions', [])
            if transactions:
                for transaction in transactions:
                    try:
                        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–∞—Ç–∏
                        if 'DATE_TIME_DAT_OD_TIM_P' in transaction and transaction['DATE_TIME_DAT_OD_TIM_P']:
                            transaction['DATE_TIME_DAT_OD_TIM_P'] = datetime.strptime(transaction['DATE_TIME_DAT_OD_TIM_P'], '%d.%m.%Y %H:%M:%S')
                        else:
                            transaction['DATE_TIME_DAT_OD_TIM_P'] = None
                        
                        if 'DAT_OD' in transaction and transaction['DAT_OD']:
                            transaction['DAT_OD'] = datetime.strptime(transaction['DAT_OD'], '%d.%m.%Y').date()
                        else:
                            transaction['DAT_OD'] = None
                    except Exception as e:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞—Ç–∏/—á–∞—Å—É: {e}")
                        continue
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –≤ –ë–î
                    cursor.execute(""" 
                        INSERT INTO bnk_trazact_prvt (%s) 
                        VALUES (%s)
                        ON DUPLICATE KEY UPDATE 
                        DATE_TIME_DAT_OD_TIM_P = VALUES(DATE_TIME_DAT_OD_TIM_P),
                        DAT_OD = VALUES(DAT_OD)
                    """ % (
                        ', '.join(transaction.keys()),
                        ', '.join(['%s'] * len(transaction))
                    ), tuple(transaction.values()))
                
                conn.commit()
                print(f"‚úÖ –ü–∞—á–∫–∞ –∑ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É –ë–î")
            else:
                print("‚ùå –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–ø–∏—Ç—É.")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –Ω–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—á–∫–∞
            if data.get('exist_next_page'):  # –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —î
                next_page_id = data.get('next_page_id')  # –û—Ç—Ä–∏–º—É—î–º–æ next_page_id –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
                print(f"üîÑ –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—á–∫–∞: {next_page_id}")
            else:
                print("‚úÖ –£—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –æ—Ç—Ä–∏–º–∞–Ω–æ.")
                break  # –Ø–∫—â–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–∞—á–∫–∏ –Ω–µ–º–∞—î, –∑–∞–≤–µ—Ä—à—É—î–º–æ —Ü–∏–∫–ª
        else:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:", data.get('message'))
            break
    else:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ {response.status_code}: {response.text}")
        break

cursor.close()
conn.close()
