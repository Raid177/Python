"""
[START] –°–∫—Ä–∏–ø—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ zp_worktime [START]

–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª:
- –ü—ñ–¥–∫–ª—é—á–∞—î—Ç—å—Å—è –¥–æ Google Sheets (–ª—ñ—Å—Ç "—Ñ–∫—Ç_–ì—Ä–∞—Ñ—ñ–∫–ü–ª–∞—Å–∫–∏–π").
- –ó—á–∏—Ç—É—î —Ç–∞–±–ª–∏—Ü—é –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–º—ñ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—É (–¥–∞—Ç–∞, —á–∞—Å–∏, –ø–æ—Å–∞–¥–∞ —Ç–æ—â–æ).
- –î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞:
    ‚Ä¢ –ü–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –∑–º—ñ–Ω–∏ (–≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —Ñ–∞–∫—Ç–∏—á–Ω—ñ –ø–æ—á–∞—Ç–æ–∫/–∫—ñ–Ω–µ—Ü—å).
    ‚Ä¢ –û–±—á–∏—Å–ª—é—î —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–º—ñ–Ω–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ hh:mm —Ç–∞ –≤ –≥–æ–¥–∏–Ω–∞—Ö (–¥–µ—Å—è—Ç–∫–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç).
    ‚Ä¢ –ì–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–º—ñ–Ω–∏ shift_uuid (MD5-—Ö–µ—à –≤—ñ–¥ –¥–∞—Ç–∏, idx —Ç–∞ —ñ–Ω—à–∏—Ö –∫–ª—é—á–æ–≤–∏—Ö –ø–æ–ª—ñ–≤).
    ‚Ä¢ –§–æ—Ä–º—É—î —Å–ª–æ–≤–Ω–∏–∫ –∑–Ω–∞—á–µ–Ω—å —Ç–∞ –≤—Å—Ç–∞–≤–ª—è—î/–æ–Ω–æ–≤–ª—é—î –∑–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—ñ zp_worktime.
- –í–∏–¥–∞–ª—è—î –∑—ñ zp_worktime –∑–∞–ø–∏—Å–∏, —è–∫–∏—Ö –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î —É –≥—Ä–∞—Ñ—ñ–∫—É Google Sheets.
- –õ–æ–≥—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–¥–∞–Ω–∏—Ö, –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö —Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤.
- –í–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—É.

–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î –∑–¥—ñ–π—Å–Ω—é—î—Ç—å—Å—è —á–µ—Ä–µ–∑ pymysql –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –¥–∞–Ω–∏—Ö —ñ–∑ .env —Ñ–∞–π–ª—É.

[OK] –°–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ (–∫—Ä–æ–Ω –∞–±–æ –≤—Ä—É—á–Ω—É) –¥–ª—è –∞–∫—Ç—É–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–∞–±–ª–∏—Ü—ñ zp_worktime.
"""

# -*- coding: utf-8 -*-
"""
[START] –°–∫—Ä–∏–ø—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ zp_worktime (—Å–µ—Ä–≤—ñ—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç) [START]

–ó–º—ñ–Ω–∏:
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –¥–æ Google Sheets —á–µ—Ä–µ–∑ service account JSON (–±–µ–∑ user-consent —Ç–æ–∫–µ–Ω–∞).
- –®–ª—è—Ö –¥–æ JSON –±–µ—Ä–µ—Ç—å—Å—è –∑ SA_JSON_PATH (env) –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —à–ª—è—Ö—É.

–ü–æ—Ä–∞–¥–∞: –ø–æ–¥—ñ–ª–∏—Å—è —Ç–∞–±–ª–∏—Ü–µ—é –∑ client_email —ñ–∑ JSON —Å–µ—Ä–≤—ñ—Å–Ω–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞.
"""

import os
import pymysql
import pandas as pd
from dotenv import load_dotenv
from datetime import datetime, timedelta
import hashlib

from googleapiclient.discovery import build
from google.oauth2.service_account import Credentials as SA_Credentials

# ========= ENV loader =========
ENV_PROFILE = os.getenv("ENV_PROFILE", "prod")  # dev | prod
ENV_PATHS = {
    "dev":  r"C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/.env",
    "prod": "/root/Python/_Acces/.env.prod",
}
ENV_PATH = os.getenv("ENV_PATH") or ENV_PATHS.get(ENV_PROFILE)
if ENV_PATH and os.path.exists(ENV_PATH):
    load_dotenv(ENV_PATH, override=True)
else:
    load_dotenv(override=True)  # —à—É–∫–∞—î .env —É –ø–æ—Ç–æ—á–Ω—ñ–π –ø–∞–ø—Ü—ñ

def require_env(name: str) -> str:
    v = os.getenv(name)
    if not v:
        raise SystemExit(f"[ENV ERROR] Missing {name}. Check {ENV_PATH or '.env'}.")

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ë–î ===
DB_CONFIG = {
    "host": os.getenv("DB_HOST"),
    "port": int(os.getenv("DB_POR", "3306")),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "database": os.getenv("DB_DATABASE"),
    "charset": "utf8mb4",
    "cursorclass": pymysql.cursors.DictCursor,
}

# === Google Sheets: Service Account JSON ===
SPREADSHEET_ID = os.getenv("ZP_SPREADSHEET_ID", "19mfpQ8XgUSMpGNKQpLtL9ek5OrLj2UlvgUVR39yWubw")
SHEET_NAME = os.getenv("ZP_SHEET_NAME", "—Ñ–∫—Ç_–ì—Ä–∞—Ñ—ñ–∫–ü–ª–∞—Å–∫–∏–π")
RANGE_NAME = f"{SHEET_NAME}!A1:Z"

SA_JSON_PATH = os.getenv("SA_JSON_PATH", "/root/Python/_Acces/zppetwealth-770254b6d8c1.json")
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets.readonly",
    "https://www.googleapis.com/auth/drive.readonly",
]

if not os.path.exists(SA_JSON_PATH):
    raise SystemExit(f"[ENV ERROR] Service Account JSON not found: {SA_JSON_PATH}")

creds = SA_Credentials.from_service_account_file(SA_JSON_PATH, scopes=SCOPES)
service = build("sheets", "v4", credentials=creds)

# === –£—Ç–∏–ª—ñ—Ç–∏ —á–∞—Å—É ===
def parse_datetime(date_str, time_str):
    try:
        return datetime.strptime(f"{date_str} {time_str.strip()}", "%Y-%m-%d %H:%M")
    except Exception:
        return None

def calculate_duration(start_dt, end_dt):
    if not start_dt or not end_dt:
        return None, None, end_dt
    if end_dt < start_dt:
        end_dt += timedelta(days=1)
    delta = end_dt - start_dt
    hours = round(delta.total_seconds() / 3600, 1)
    text = str(delta)[:-3]  # hh:mm:ss -> hh:mm
    return text, hours, end_dt

# === –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
def main():
    # 1) –¢—è–≥–Ω–µ–º–æ –¥–∞–Ω—ñ –∑ Google Sheets
    result = service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME
    ).execute()
    data = result.get("values", [])
    if not data:
        print("[ERROR] –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Ç–∞–±–ª–∏—Ü—ñ.")
        return

    header = data[0]
    rows = data[1:]
    # –í–∏—Ä—ñ–≤–Ω—è—Ç–∏ —Ä—è–¥–∫–∏ –ø—ñ–¥ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    normalized_rows = [r + [None] * (len(header) - len(r)) for r in rows]
    df = pd.DataFrame(normalized_rows, columns=header)

    added, updated, skipped = 0, 0, 0
    current_keys = set()

    # 2) –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    conn = pymysql.connect(**DB_CONFIG)
    with conn:
        with conn.cursor() as cursor:
            for _, row in df.iterrows():
                try:
                    raw_date = (row.get("–î–∞—Ç–∞ –∑–º—ñ–Ω–∏") or "").strip()
                    idx = (row.get("IDX") or "").strip()
                    if not raw_date or not idx:
                        skipped += 1
                        continue

                    # 3) –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç/—á–∞—Å—ñ–≤
                    date_shift = datetime.strptime(raw_date, "%d.%m.%Y").strftime("%Y-%m-%d")
                    base_start = (row.get("–ü–æ—á–∞—Ç–æ–∫–ó–º—ñ–Ω–∏") or "").strip()
                    base_end = (row.get("–ö—ñ–Ω–µ—Ü—å–ó–º—ñ–Ω–∏") or "").strip()
                    fact_start = (row.get("–§–∞–∫—Ç–ü–æ—á–∞—Ç–æ–∫") or "").strip()
                    fact_end = (row.get("–§–∞–∫—Ç–ö—ñ–Ω–µ—Ü—å") or "").strip()
                    comment = (row.get("–ö–æ–º–µ–Ω—Ç–∞—Ä") or "").strip()

                    use_fact = bool(fact_start and fact_end)
                    start_time = fact_start if use_fact else base_start
                    end_time = fact_end if use_fact else base_end

                    start_dt = parse_datetime(date_shift, start_time)
                    end_dt = parse_datetime(date_shift, end_time)
                    duration_text, duration_hours, end_dt = calculate_duration(start_dt, end_dt)

                    # 4) –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Å
                    record = {
                        "date_shift": date_shift,
                        "idx": idx,
                        "time_start": start_dt.strftime("%Y-%m-%d %H:%M:%S") if start_dt else None,
                        "time_end": end_dt.strftime("%Y-%m-%d %H:%M:%S") if end_dt else None,
                        "position": row.get("–ü–æ—Å–∞–¥–∞", "") or "",
                        "department": row.get("–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", "") or "",
                        "shift_type": row.get("–¢–∏–ø–ó–º—ñ–Ω–∏", "") or "",
                        "duration_text": duration_text,
                        "duration_hours": duration_hours,
                        "last_name": row.get("–ü—Ä—ñ–∑–≤–∏—â–µ", "") or "",
                        "is_corrected": "—Ç–∞–∫" if use_fact else "–Ω—ñ",
                        "comment": comment if use_fact else "",
                    }

                    # 5) –ì–µ–Ω–µ—Ä—É—î–º–æ shift_uuid (—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π –∫–ª—é—á)
                    concat_str = f"{date_shift}_{idx}_{record['time_start']}_{record['time_end']}_{record['position']}_{record['department']}_{record['shift_type']}"
                    shift_uuid = hashlib.md5(concat_str.encode("utf-8")).hexdigest()
                    record["shift_uuid"] = shift_uuid

                    # 6) UPSERT
                    placeholders = ", ".join([f"`{k}`" for k in record])
                    values = ", ".join(["%s"] * len(record))
                    updates = ", ".join([f"`{k}`=VALUES(`{k}`)" for k in record if k not in ("date_shift", "idx")])

                    sql = f"""
                        INSERT INTO `zp_worktime` ({placeholders})
                        VALUES ({values})
                        ON DUPLICATE KEY UPDATE {updates}
                    """

                    cursor.execute(sql, list(record.values()))
                    current_keys.add((str(date_shift), idx))

                    # rowcount == 1 ‚Üí insert; 2 ‚Üí update (MySQL —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞)
                    if cursor.rowcount == 1:
                        added += 1
                    else:
                        updated += 1

                except Exception as e:
                    print(f"[WARN] –ü–æ–º–∏–ª–∫–∞ –≤ IDX={row.get('IDX')}: {e}")
                    skipped += 1

            # 7) –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤, —è–∫–∏—Ö –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –≤ Google Sheets
            cursor.execute("SELECT `date_shift`, `idx` FROM `zp_worktime`")
            db_keys = {(str(r["date_shift"]), r["idx"]) for r in cursor.fetchall()}
            to_delete = db_keys - current_keys

            if to_delete:
                format_strings = ",".join(["(%s,%s)"] * len(to_delete))
                delete_sql = f"DELETE FROM `zp_worktime` WHERE (`date_shift`, `idx`) IN ({format_strings})"
                delete_values = [val for pair in to_delete for val in pair]
                cursor.execute(delete_sql, delete_values)
                print(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ: {len(to_delete)}")
            else:
                print("[INFO] –ù—ñ—á–æ–≥–æ –Ω–µ –≤–∏–¥–∞–ª–µ–Ω–æ.")

        conn.commit()

    print(f"[OK] –î–æ–¥–∞–Ω–æ: {added}, –û–Ω–æ–≤–ª–µ–Ω–æ: {updated}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}")

if __name__ == "__main__":
    main()
