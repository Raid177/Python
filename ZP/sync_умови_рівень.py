"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —É–º–æ–≤ –æ–ø–ª–∞—Ç–∏ —É —Ç–∞–±–ª–∏—Ü—ñ zp_worktime.

üîπ –°–∫—Ä–∏–ø—Ç –º–∞—î –¥–≤–∞ –æ—Å–Ω–æ–≤–Ω–∏—Ö –±–ª–æ–∫–∏:
1Ô∏è‚É£ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ä—ñ–≤–Ω—ñ–≤ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ (—Ç–∞–±–ª–∏—Ü—è zp_—Ñ–∫—Ç–†—ñ–≤–Ω—ñ–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤):
   - –ó—á–∏—Ç—É—î –¥–∞–Ω—ñ –∑ Google Sheets.
   - –í–∏–∫–æ–Ω—É—î —Ç—Ä–∏–º–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ —ñ –ø—ñ–¥–º—ñ–Ω—è—î NULL –Ω–∞ '' –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—ñ–≤.
   - –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥—É–±–ª—ñ–∫–∞—Ç–∏ (–ü—Ä—ñ–∑–≤–∏—â–µ, –î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É, –ü–æ—Å–∞–¥–∞, –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è, –†—ñ–≤–µ–Ω—å):
       ‚Ä¢ –Ø–∫—â–æ —î –¥—É–±–ª—ñ–∫–∞—Ç–∏ ‚Äî –∑—É–ø–∏–Ω—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —ó—Ö —É –∫–æ–Ω—Å–æ–ª—å.
   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑—Å—Ç–∞–≤–ª—è—î –î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ (—è–∫—â–æ —î –ø–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ –Ω–æ–≤–∏–π).
   - –û–Ω–æ–≤–ª—é—î Google Sheets —ñ–∑ –¥–∞—Ç–∞–º–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è.
   - –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ —É —Ç–∞–±–ª–∏—Ü—é zp_—Ñ–∫—Ç–†—ñ–≤–Ω—ñ–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –≤ MySQL:
       ‚Ä¢ INSERT ... ON DUPLICATE KEY UPDATE (–æ–Ω–æ–≤–ª—é—î –∞–±–æ –¥–æ–¥–∞—î —Ä—è–¥–æ–∫).
   - –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π —É –∫–æ–Ω—Å–æ–ª—å:
       ‚Ä¢ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏.
       ‚Ä¢ –ù–æ–≤—ñ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω—ñ –∑–∞–ø–∏—Å–∏.
       ‚Ä¢ –ó–∞–∫—Ä–∏—Ç—Ç—è —Ä—ñ–≤–Ω—ñ–≤.

2Ô∏è‚É£ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–±—ñ–≥—ñ–≤ —É —Ç–∞–±–ª–∏—Ü—ñ zp_worktime:
   - –ü—ñ–¥—Ç—è–≥—É—î —Ä—ñ–≤–µ–Ω—å —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ —É zp_worktime –∑ —Ç–∞–±–ª–∏—Ü—ñ zp_—Ñ–∫—Ç–†—ñ–≤–Ω—ñ–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤.
   - –†–æ–∑—Ä–∞—Ö–æ–≤—É—î Rule_ID, Matches —Ç–∞ Score –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ç–∞–±–ª–∏—Ü—é –ø—Ä–∞–≤–∏–ª zp_—Ñ–∫—Ç–£–º–æ–≤–∏–û–ø–ª–∞—Ç–∏.
   - –ó–∞–ø–∏—Å—É—î –∫–æ–ª—ñ–∑—ñ—ó —É –ø–æ–ª–µ Colision (—è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∫—ñ–ª—å–∫–∞ —Ä—ñ–≤–Ω—ñ–≤ –∞–±–æ –∫—ñ–ª—å–∫–∞ Rule_ID –∑ –æ–¥–Ω–∞–∫–æ–≤–æ—é –≤–∞–≥–æ—é).
   - –ó–∞–ø–∏—Å—É—î —ñ–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ —É –ø–æ–ª–µ ErrorLog.
   - –û–Ω–æ–≤–ª—é—î –ø–æ–ª—è:
       ‚Ä¢ Matches
       ‚Ä¢ Score
       ‚Ä¢ –°—Ç–∞–≤–∫–∞–ó–º—ñ–Ω–∞
       ‚Ä¢ –°—Ç–∞–≤–∫–∞–ì–æ–¥–∏–Ω–∞
       ‚Ä¢ Rule_ID
       ‚Ä¢ ErrorLog
       ‚Ä¢ Colision
   - –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É –∫–æ–Ω—Å–æ–ª—å.

[OK] –í–∞–∂–ª–∏–≤–æ:
- –°–∫—Ä–∏–ø—Ç –≤–∏–∫–æ–Ω—É—î –æ–±–∏–¥–≤–∞ –±–ª–æ–∫–∏ –ø–æ —á–µ—Ä–∑—ñ: —Å–ø–æ—á–∞—Ç–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ä—ñ–≤–Ω—ñ–≤, –ø–æ—Ç—ñ–º –æ–±—Ä–æ–±–∫–∞ zp_worktime.
- –°–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω—è—î —Ä–æ–±–æ—Ç—É, —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –≤ Google Sheets.
"""


"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —É–º–æ–≤ –æ–ø–ª–∞—Ç–∏ —É —Ç–∞–±–ª–∏—Ü—ñ zp_worktime.
"""

import os
import sys
import pymysql
import pandas as pd
from datetime import datetime, timedelta
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from dotenv import load_dotenv

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env ===
load_dotenv("C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/.env")

DB_CONFIG = {
    "host": os.getenv("DB_HOST_Serv"),
    "port": int(os.getenv("DB_PORT_Serv", 3306)),  # ‚úÖ –¥–µ—Ñ–æ–ª—Ç ‚Äî 3306
    "user": os.getenv("DB_USER_Serv"),
    "password": os.getenv("DB_PASSWORD_Serv"),
    "database": os.getenv("DB_DATABASE_Serv"),
    "charset": "utf8mb4",
    "cursorclass": pymysql.cursors.DictCursor
}


SPREADSHEET_ID = "19mfpQ8XgUSMpGNKQpLtL9ek5OrLj2UlvgUVR39yWubw"
SHEET_NAME = "—Ñ–∫—Ç_–†—ñ–≤–Ω—ñ–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤"
RANGE_NAME = f"{SHEET_NAME}!A1:Z"
TOKEN_PATH = "C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/Google/token.json"
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

def log_message(message):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}")

def sync_employee_levels():
    log_message("[SYNC] –ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Ä—ñ–≤–Ω—ñ–≤ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤...")
    creds = Credentials.from_authorized_user_file(TOKEN_PATH, SCOPES)
    service = build("sheets", "v4", credentials=creds)
    sheet = service.spreadsheets()
    result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME).execute()
    values = result.get("values", [])

    if not values:
        log_message("[ERROR] –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Google Sheets!")
        return

    header = values[0]
    data = values[1:]
    df = pd.DataFrame(data, columns=header)
    df["–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É"] = pd.to_datetime(df["–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É"], dayfirst=True, errors="coerce")
    df["–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è"] = pd.to_datetime(df["–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è"], dayfirst=True, errors="coerce")

    for col in ["–ü—Ä—ñ–∑–≤–∏—â–µ", "–ü–æ—Å–∞–¥–∞", "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", "–†—ñ–≤–µ–Ω—å"]:
        df[col] = df[col].apply(lambda x: x.strip() if isinstance(x, str) else "")

    duplicate_mask = df.duplicated(subset=["–ü—Ä—ñ–∑–≤–∏—â–µ", "–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É", "–ü–æ—Å–∞–¥–∞", "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", "–†—ñ–≤–µ–Ω—å"], keep=False)
    if duplicate_mask.any():
        log_message("[WARN] –í Google Sheets –∑–Ω–∞–π–¥–µ–Ω–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏, –≤–∏–ø—Ä–∞–≤—Ç–µ —ó—Ö –ø–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º.")
        for _, row in df[duplicate_mask].iterrows():
            log_message(f"  - {row['–ü—Ä—ñ–∑–≤–∏—â–µ']} | {row['–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É']} | {row['–ü–æ—Å–∞–¥–∞']} | {row['–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è']} | {row['–†—ñ–≤–µ–Ω—å']}")
        sys.exit(1)

    df.sort_values(by=["–ü—Ä—ñ–∑–≤–∏—â–µ", "–ü–æ—Å–∞–¥–∞", "–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", "–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É"], inplace=True)

    prev_row = None
    for idx, row in df.iterrows():
        if pd.isnull(row["–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É"]):
            continue
        key = (row["–ü—Ä—ñ–∑–≤–∏—â–µ"], row["–ü–æ—Å–∞–¥–∞"], row["–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è"])
        if prev_row is not None:
            prev_key = (prev_row["–ü—Ä—ñ–∑–≤–∏—â–µ"], prev_row["–ü–æ—Å–∞–¥–∞"], prev_row["–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è"])
            if key == prev_key:
                if pd.isnull(prev_row["–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è"]) and row["–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É"] > prev_row["–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É"]:
                    df.at[prev_row.name, "–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è"] = row["–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É"] - timedelta(days=1)
                    log_message(f"[SYNC] –ó–∞–∫—Ä–∏—Ç–æ —Ä—ñ–≤–µ–Ω—å: {prev_row['–ü—Ä—ñ–∑–≤–∏—â–µ']} {prev_row['–ü–æ—Å–∞–¥–∞']} {prev_row['–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è']} ‚Üí {df.at[prev_row.name, '–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è'].date()}")
        prev_row = row if pd.isnull(row["–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è"]) else None

    updated_values = [header]
    for _, row in df.iterrows():
        
        row_out = []
        for col in header:
            val = row.get(col, "")
            if isinstance(val, pd.Timestamp):
                if pd.isnull(val):
                    row_out.append("")
                else:
                    row_out.append(val.strftime("%d.%m.%Y"))
            elif pd.isnull(val):
                row_out.append("")
            else:
                row_out.append(str(val))

        
        updated_values.append(row_out)

    sheet.values().update(
        spreadsheetId=SPREADSHEET_ID,
        range=RANGE_NAME,
        valueInputOption="RAW",
        body={"values": updated_values}
    ).execute()
    log_message("[OK] Google Sheets –æ–Ω–æ–≤–ª–µ–Ω–æ!")

    conn = pymysql.connect(**DB_CONFIG)
    cursor = conn.cursor()
    inserted, updated = 0, 0
    for _, row in df.iterrows():
        cursor.execute("""
            INSERT INTO zp_—Ñ–∫—Ç–†—ñ–≤–Ω—ñ–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ (`–ü—Ä—ñ–∑–≤–∏—â–µ`, `–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É`, `–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è`, `–ü–æ—Å–∞–¥–∞`, `–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è`, `–†—ñ–≤–µ–Ω—å`)
            VALUES (%s, %s, %s, %s, %s, %s)
            ON DUPLICATE KEY UPDATE
                `–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è` = VALUES(`–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è`),
                `–†—ñ–≤–µ–Ω—å` = VALUES(`–†—ñ–≤–µ–Ω—å`)
        """, (
            row["–ü—Ä—ñ–∑–≤–∏—â–µ"],
            row["–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É"].strftime("%Y-%m-%d") if pd.notnull(row["–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É"]) else None,
            row["–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è"].strftime("%Y-%m-%d") if pd.notnull(row["–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è"]) else None,
            row["–ü–æ—Å–∞–¥–∞"], row["–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è"], row["–†—ñ–≤–µ–Ω—å"]
        ))
        if cursor.rowcount == 1:
            inserted += 1
        elif cursor.rowcount == 2:
            updated += 1

    conn.commit()
    cursor.close()
    conn.close()
    log_message(f"[OK] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {inserted} –¥–æ–¥–∞–Ω–æ, {updated} –æ–Ω–æ–≤–ª–µ–Ω–æ.")

def calculate_worktime_matches():
    log_message("[INFO] –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–±—ñ–≥—ñ–≤ —É zp_worktime...")

    weights = {
        'position': 50, 'last_name': 40,
        'department': 30, 'level': 20, 'shift_type': 10
    }
    field_mapping = {
        'position': '–ü–æ—Å–∞–¥–∞', 'last_name': '–ü—Ä—ñ–∑–≤–∏—â–µ',
        'department': '–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è', 'level': '–†—ñ–≤–µ–Ω—å',
        'shift_type': '–¢–∏–ø–ó–º—ñ–Ω–∏'
    }

    conn = pymysql.connect(**DB_CONFIG)
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM zp_worktime")
    worktime_rows = cursor.fetchall()

    cursor.execute("SELECT * FROM zp_—Ñ–∫—Ç–†—ñ–≤–Ω—ñ–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤")
    levels_rows = cursor.fetchall()

    cursor.execute("SELECT * FROM zp_—Ñ–∫—Ç–£–º–æ–≤–∏–û–ø–ª–∞—Ç–∏")
    rules_rows = cursor.fetchall()

    levels_map = {}
    for lvl in levels_rows:
        key = (lvl['–ü—Ä—ñ–∑–≤–∏—â–µ'].strip().lower(), lvl['–ü–æ—Å–∞–¥–∞'].strip().lower(), lvl['–í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è'].strip().lower())
        levels_map.setdefault(key, []).append(lvl)

    for work_row in worktime_rows:
        work_date = work_row['date_shift']
        last_name = work_row['last_name'].strip()
        position = work_row['position'].strip()
        department = work_row['department'].strip()

        key_specific = (last_name.lower(), position.lower(), department.lower())
        key_generic = (last_name.lower(), position.lower(), '')

        matched_levels = levels_map.get(key_specific, []) + levels_map.get(key_generic, [])
        matched_levels = [lvl for lvl in matched_levels
                          if lvl['–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É'] <= work_date and
                          (lvl['–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è'] is None or lvl['–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è'] >= work_date)]

        error_messages, colision_messages = [], []
        level_value = None

        if len(matched_levels) > 1:
            error_messages.append("–ö–æ–ª—ñ–∑—ñ—è —Ä—ñ–≤–Ω—ñ–≤")
        elif len(matched_levels) == 1:
            level_value = matched_levels[0]['–†—ñ–≤–µ–Ω—å']
        else:
            error_messages.append("–†—ñ–≤–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

        cursor.execute("""
            UPDATE zp_worktime SET level=%s WHERE date_shift=%s AND idx=%s
        """, (level_value, work_row['date_shift'], work_row['idx']))

        best_matches = []

        for rule in rules_rows:
            if not (rule['–î–∞—Ç–∞–ü–æ—á–∞—Ç–∫—É'] <= work_date and
                    (rule['–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è'] is None or rule['–î–∞—Ç–∞–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è'] >= work_date)):
                continue

            matches, score, skip = 0, 0, False
            for field, weight in weights.items():
                work_val = str(work_row.get(field, '')).strip().lower()
                rule_val = str(rule.get(field_mapping[field], '')).strip().lower()
                if rule_val:
                    if work_val == rule_val:
                        matches += 1
                        score += weight
                    else:
                        skip = True
                        break
            if not skip:
                best_matches.append({'rule': rule, 'matches': matches, 'score': score})

        if best_matches:
            best_matches.sort(key=lambda x: (-x['matches'], -x['score']))
            top = best_matches[0]
            same_top = [bm for bm in best_matches if bm['matches'] == top['matches'] and bm['score'] == top['score']]
            rule_ids = set(bm['rule']['Rule_ID'] for bm in same_top)
            if len(rule_ids) > 1:
                colision_messages.append(f"–ö–æ–ª—ñ–∑—ñ—è Rule_ID: {', '.join(map(str, rule_ids))}")

            if not colision_messages and not error_messages:
                cursor.execute("""
                    UPDATE zp_worktime SET Matches=%s, Score=%s, Colision=%s, –°—Ç–∞–≤–∫–∞–ó–º—ñ–Ω–∞=%s, –°—Ç–∞–≤–∫–∞–ì–æ–¥–∏–Ω–∞=%s, Rule_ID=%s, ErrorLog=%s
                    WHERE date_shift=%s AND idx=%s
                """, (
                    top['matches'], top['score'], '',
                    top['rule']['–°—Ç–∞–≤–∫–∞–ó–º—ñ–Ω–∞'],
                    float(top['rule']['–°—Ç–∞–≤–∫–∞–ó–º—ñ–Ω–∞']) / 12 if top['rule']['–°—Ç–∞–≤–∫–∞–ó–º—ñ–Ω–∞'] else 0,
                    top['rule']['Rule_ID'],
                    '',
                    work_row['date_shift'], work_row['idx']
                ))
            else:
                cursor.execute("""
                    UPDATE zp_worktime SET Matches=%s, Score=%s, Colision=%s, –°—Ç–∞–≤–∫–∞–ó–º—ñ–Ω–∞=%s, –°—Ç–∞–≤–∫–∞–ì–æ–¥–∏–Ω–∞=%s, Rule_ID=%s, ErrorLog=%s
                    WHERE date_shift=%s AND idx=%s
                """, (
                    top['matches'], top['score'],
                    '\n'.join(colision_messages),
                    0.0, 0.0, None,
                    '\n'.join(error_messages),
                    work_row['date_shift'], work_row['idx']
                ))

    conn.commit()
    cursor.close()
    conn.close()
    log_message("[OK] –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# === MAIN ===
if __name__ == "__main__":
    sync_employee_levels()
    calculate_worktime_matches()
