# === telegram_bot_payments.py ===
# Telegram-–±–æ—Ç –¥–ª—è –ø—Ä–∏–π–æ–º—É —Ñ–∞–π–ª—ñ–≤, –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –æ–ø–ª–∞—Ç —ñ –≤–∏–≤–æ–¥—É –±–∞–ª–∞–Ω—Å—ñ–≤ –ø–æ —Ä–∞—Ö—É–Ω–∫–∞—Ö –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É

import os
import sys
import time
import tempfile
import atexit
import pymysql
import psutil
import requests
import shutil
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv, dotenv_values
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MessageEntity
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CallbackQueryHandler,
    CommandHandler, ContextTypes, filters
)

# === üå± –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ===
env = dotenv_values("/root/Python/.env")
BOT_TOKEN = env["BOT_TOKEN"]
FALLBACK_CHAT_ID = int(env["FALLBACK_CHAT_ID"])
ADMIN_USER = int(env.get("ADMIN_USER", FALLBACK_CHAT_ID))
ALLOWED_USERS = env.get("ALLOWED_USERS", str(FALLBACK_CHAT_ID))
ALLOWED_USERS_SET = "*" if ALLOWED_USERS == "*" else set(map(int, ALLOWED_USERS.split(",")))

DB_HOST = env["DB_HOST"]
DB_USER = env["DB_USER"]
DB_PASSWORD = env["DB_PASSWORD"]
DB_DATABASE = env["DB_DATABASE"]
SAVE_DIR = env.get("SAVE_DIR", "/root/Python/data/incoming")
DELETED_DIR = os.path.join(SAVE_DIR, "Deleted")
LOG_FILE = env.get("LOG_FILE", "/root/Python/data/logs/from_telegram_log.txt")

# === üìÉ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î ===
conn = pymysql.connect(
    host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_DATABASE,
    charset='utf8mb4', autocommit=True
)
cursor = conn.cursor()
sessions = {}
payment_notified = set()

# === üí≥ –ë–∞–ª–∞–Ω—Å–∏ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ ===
API_URL = "https://acp.privatbank.ua/api/statements/balance"
accounts = {}
for var in env:
    if var.startswith("API_TOKEN_"):
        fop = var.replace("API_TOKEN_", "")
        token = env[var]
        acc_list = env.get(f"API_–ê–°–°_{fop}", "").split(",")
        accounts[fop] = [{"acc": acc.strip(), "token": token} for acc in acc_list if acc.strip()]

# === ü´Ö –õ–æ–≥–∏ ===
def log(msg):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{ts}] {msg}"
    print(line)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")

# === üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ===
async def save_and_record(file, file_msg, context, user, is_duplicate):
    ts = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    base_name = file.file_name
    safe_name = f"{os.path.splitext(base_name)[0]}__DUPLICATE_{ts}{os.path.splitext(base_name)[1]}" if is_duplicate else base_name
    file_path = os.path.join(SAVE_DIR, safe_name)
    os.makedirs(SAVE_DIR, exist_ok=True)
    telegram_file = await context.bot.get_file(file.file_id)
    await telegram_file.download_to_drive(file_path)
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("""
        INSERT INTO telegram_files (file_name, file_path, chat_id, message_id, username, timestamp, status)
        VALUES (%s, %s, %s, %s, %s, %s, 'pending')
    """, (base_name, file_path, file_msg.chat.id, file_msg.message_id, user, now))
    note = " (–¥—É–±–ª—å)" if is_duplicate else ""
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_file:{file_msg.message_id}")]
    ])
    await file_msg.reply_text(f"üì• –§–∞–π–ª ¬´{base_name}¬ª{note} –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –æ–ø–ª–∞—Ç—É", reply_markup=keyboard)
    log(f"‚úîÔ∏è {base_name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ {note}")

# === üîò –û–±—Ä–æ–±–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ ===
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user.username or "anon"

    if query.data == "save_again":
        if user not in sessions:
            await query.edit_message_text("‚ö†Ô∏è –°–µ—Å—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        file, msg = sessions.pop(user)
        await save_and_record(file, msg, context, user, is_duplicate=True)
        await query.edit_message_text("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ")
        return

    if query.data.startswith("delete_file:"):
        msg_id = int(query.data.split(":")[1])
        chat_id = query.message.chat.id
        cursor.execute("SELECT id, file_name, file_path, status FROM telegram_files WHERE chat_id=%s AND message_id=%s", (chat_id, msg_id))
        row = cursor.fetchone()
        if row:
            fid, fname, fpath, status = row
            if status == 'paid':
                await query.edit_message_text(f"üîí –§–∞–π–ª *{fname}* –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.", parse_mode="Markdown")
                return
            cursor.execute("UPDATE telegram_files SET status='deleted', deleted_by='user', deleted_at=NOW() WHERE id=%s", (fid,))
            os.makedirs(DELETED_DIR, exist_ok=True)
            try:
                shutil.move(fpath, os.path.join(DELETED_DIR, os.path.basename(fpath)))
                log(f"üóëÔ∏è –§–∞–π–ª {fname} –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É Deleted")
            except Exception as e:
                log(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —Ñ–∞–π–ª {fname}: {e}")
            await query.edit_message_text(f"üóëÔ∏è –§–∞–π–ª *{fname}* –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É –∞—Ä—Ö—ñ–≤.", parse_mode="Markdown")
        else:
            await query.edit_message_text("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ")

# === üîñ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ ===
if __name__ == "__main__":
    from telegram import BotCommand, BotCommandScopeChat, BotCommandScopeDefault
    from apscheduler.schedulers.asyncio import AsyncIOScheduler

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.ALL, handle_file))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(CommandHandler("balance", balance))
    log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")

    async def post_start(app):
        log("üöÄ post_start –∑–∞–ø—É—â–µ–Ω–æ")
        try:
            await app.bot.set_my_commands([
                BotCommand("pay", "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª –¥–ª—è –æ–ø–ª–∞—Ç–∏")
            ], scope=BotCommandScopeDefault())
            await app.bot.set_my_commands([
                BotCommand("pay", "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª –¥–ª—è –æ–ø–ª–∞—Ç–∏"),
                BotCommand("balance", "–ó–∞–ª–∏—à–∫–∏ –Ω–∞ —Ä–∞—Ö—É–Ω–∫–∞—Ö")
            ], scope=BotCommandScopeChat(chat_id=ADMIN_USER))
            log("‚úÖ –ö–æ–º–∞–Ω–¥–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            log(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥: {e}")

    app.post_init = post_start
    app.run_polling()
