# –¶–µ –±–æ–π–æ–≤–∞ –≤–µ—Ä—Å—ñ—è 1.5 –ü—Ä–∞—Ü—é—î –ª–∏—à–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
# –î–æ–¥–∞–Ω–æ:
# –ü–∞—É–∑—É 0,5 —Å–µ–∫ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ –Ω–∞ pending —â–æ–± –¢–ì –ê–ü–Ü –Ω–µ —Ç–æ—Ä–º–æ–∑–∏–ª–æ –ø—Ä–∏ –≤–µ–ª–∏–∫—ñ–π –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
# –í–∏–≤—ñ–¥ –≤ —á–∞—Ç –∞–¥–º—ñ–Ω—É –≤—Å—ñ—Ö –ø–æ–º–∏–ª–æ–∫
# –æ–±—Ä–æ–±–∫—É —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –∑–∞–Ω–µ—Å–µ–Ω–Ω—è –≤ –ë–î, —è–∫—â–æ —é–∑–µ—Ä–∏ –Ω–µ –º–∞—é—Ç—å –Ω—ñ–∫–Ω–µ–π–º –≤ –¢–ì
# –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å "–º'—è–∫–æ–≥–æ" –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∑ –ø–∞–ø–∫–∏ –æ–ø–ª–∞—Ç –ø–æ –∫–æ–º–∞–Ω–¥—ñ /delete

# 1.5
# —Ç–µ–∫—Å—Ç –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –≤ –ø–ª–∞—Ç—ñ–∂–∫—É, —è–∫ —Ä–µ–ø–ª—ñ —Ç–∞–∫ —ñ –Ω–∞–ø—Ä—è–º—É
# –ø—Ä–∏—á–µ—Å–∞–Ω–∏–π –∫–æ–¥
# –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–º–∏–ª–∫—É –∑ –∞–ø—Ç–∞–π–º–æ–º

#sudo systemctl stop petwealth_bot
# sudo systemctl status petwealth_bot

# === üì¶ –í–µ—Ä—Å—ñ—è –±–æ—Ç–∞ ===
BOT_VERSION = "1.5"
BOT_NOTES = (
    "‚ûï –ù–æ–≤–µ:\n"
    "üì© –í–∏–≤—ñ–¥ –ø–æ–º–∏–ª–æ–∫ –∞–¥–º—ñ–Ω—É\n"
    "üë§ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è user_id —ñ username –Ω–∞–ø—Ä—è–º—É\n"
            
    # "‚ûñ –í–∏–¥–∞–ª–µ–Ω–æ: ‚Äî\n"
   
    # "üõ† –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ: ‚Äî"
    "–ö–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–∏–≤—ñ–¥ –∞–ø—Ç–∞–π–º—É\n"
    "–ü—Ä–∏—á–µ—Å–∞–Ω–æ –∫–æ–¥"
    
)


import os
import logging
from datetime import datetime
from dotenv import dotenv_values
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
import requests
import pymysql
from telegram.error import BadRequest, Forbidden, TelegramError
from telegram.constants import ParseMode
from telegram import BotCommandScopeDefault
from telegram import BotCommand
import asyncio
from telegram.helpers import escape_markdown
import re

#–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def set_bot_commands(app):
    commands = [
        BotCommand("start", "–ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–æ–ª—å"),
        BotCommand("checkbot", "—Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
        BotCommand("balance", "–∑–∞–ª–∏—à–∫–∏ –ø–æ —Ä–∞—Ö—É–Ω–∫–∞—Ö"),
        BotCommand("pay", "–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É"),
        BotCommand("pending", "–æ—á—ñ–∫—É—é—Ç—å –æ–ø–ª–∞—Ç–∏"),
        BotCommand("delete", "–≤–∏–¥–∞–ª–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂–∫—É –∑—ñ —Å–ø–∏—Å–∫—É")
        
    ]
    await app.bot.set_my_commands(commands)

# üëá –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ—Å—Ç–∞—Ä—Ç
async def on_startup(app):
    # 1) –∫–æ–º–∞–Ω–¥–∏
    await set_bot_commands(app)

    # 2) —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    try:
        text = (
            f"‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ\n"
            f"üì¶ –í–µ—Ä—Å—ñ—è: {BOT_VERSION}\n"
            f"üïí –ß–∞—Å: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"üìù –ù–æ—Ç–∞—Ç–∫–∏:\n{BOT_NOTES}"
        )
        await app.bot.send_message(chat_id=FALLBACK_CHAT_ID, text=text)
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")


# === üîê –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
env = dotenv_values("/root/Python/.env")
BOT_TOKEN = env["BOT_TOKEN"]
FALLBACK_CHAT_ID = int(env["FALLBACK_CHAT_ID"])
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
LOG_FILE = os.path.join(BASE_DIR, "log.txt")


PB_TOKENS = {
    "LOV": env.get("API_TOKEN_LOV"),
    "ZVO": env.get("API_TOKEN_ZVO"),
    "PMA": env.get("API_TOKEN_PMA")
}
PB_ACCOUNTS = {
    "LOV": [env.get("API_–ê–°–°_LOV", "")],
    "ZVO": env.get("API_–ê–°–°_ZVO", "").split(","),
    "PMA": [env.get("API_–ê–°–°_PMA", "")],
}

ODATA_URL = env.get("ODATA_URL")
ODATA_USER = env.get("ODATA_USER")
ODATA_PASSWORD = env.get("ODATA_PASSWORD")
ODATA_ACCOUNTS = {
    "–Ü–Ω–∫–∞—Å—Å–∞—Ü—ñ—è (—Ç—Ä–∞–Ω–∑–∏—Ç–Ω–∏–π)": "7e87f26e-eaad-11ef-9d9b-2ae983d8a0f0",
    "–†–µ—î—Å—Ç—Ä–∞—Ç—É—Ä–∞ –∫–∞—Å–∞": "a7dda748-86d1-11ef-839c-2ae983d8a0f0",
    "–ö–∞—Å–∞ –û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó": "f179f3be-4e84-11ef-83bb-2ae983d8a0f0"
}

SAVE_DIR = env.get("SAVE_DIR", "/root/Automation/Paid")
CONFIRM_PREFIX = "confirm_duplicate_"
ALLOWED_EXTENSIONS = {'.pdf', '.xls', '.xlsx', '.txt', '.jpeg', '.jpg', '.png'}

# === üìú –õ–æ–≥—É–≤–∞–Ω–Ω—è ===
logging.basicConfig(
    format='[%(asctime)s] %(levelname)s: %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(LOG_FILE, encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# === üë• –†–æ–ª—ñ –∑ .env ===
ROLE_ADMIN = list(map(int, env.get("ROLE_ADMIN", "").split(",")))
ROLE_MANAGER = list(map(int, env.get("ROLE_MANAGER", "").split(",")))


# === üïí –ß–∞—Å –∑–∞–ø—É—Å–∫—É ===
start_time = datetime.now()

# === üéØ –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
def get_user_role(user_id: int) -> str:
    if user_id in ROLE_ADMIN:
        return "admin"
    elif user_id in ROLE_MANAGER:
        return "manager"
    return "employee"

# === üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª—É ===
async def check_permission(update: Update, allowed_roles: set[str], private_only=False, group_only=False) -> bool:
    user = update.effective_user
    chat = update.effective_chat
    role = get_user_role(user.id)

    if private_only and chat.type != "private":
        await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ.")
        logger.warning(f"‚ö†Ô∏è {user.id} ({user.username}) ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –≤ –ø—Ä–∏–≤–∞—Ç—ñ")
        return False

    if group_only and chat.type == "private":
        await update.message.reply_text("‚ö†Ô∏è –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–æ–º—É —á–∞—Ç—ñ.")
        logger.warning(f"‚ö†Ô∏è {user.id} ({user.username}) ‚Äî –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –≤ –≥—Ä—É–ø—ñ")
        return False

    if role not in allowed_roles:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        logger.warning(f"‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤: {user.id} ({user.username})")
        return False

    return True


# === üíæ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î ===
def get_db_connection():
    return pymysql.connect(
        host=env["DB_HOST"],
        user=env["DB_USER"],
        password=env["DB_PASSWORD"],
        database=env["DB_DATABASE"],
        cursorclass=pymysql.cursors.DictCursor
    )

# === üì¨ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É ===
async def notify_admin(context: ContextTypes.DEFAULT_TYPE, message: str):
    try:
        text = f"‚ö†Ô∏è *–ü–û–ú–ò–õ–ö–ê:*\n{message}"
        await context.bot.send_message(chat_id=FALLBACK_CHAT_ID, text=text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"üì≠ –ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")


# === üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ===
async def save_file_and_record(file, original_filename, chat_id, message_id, username, context, save_as=None):
    os.makedirs(SAVE_DIR, exist_ok=True)
    save_name = save_as or original_filename
    file_path = os.path.join(SAVE_DIR, save_name)

    tg_file = await context.bot.get_file(file.file_id)
    await tg_file.download_to_drive(file_path)
    logger.info(f"üì• –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ñ–∞–π–ª: {file_path}")

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    # user_id + username –≤–∏—Ç—è–≥—É—î–º–æ –∞–∫—É—Ä–∞—Ç–Ω–æ
    user_id = getattr(username, "id", None) if username is not None else None
    if hasattr(username, "username") or hasattr(username, "full_name"):
        resolved_username = username.username if getattr(username, "username", None) else username.full_name
    else:
        resolved_username = username or "unknown"


    conn = get_db_connection()
    with conn.cursor() as cursor:
        sql = """
        INSERT INTO telegram_files (
            file_name, file_path, chat_id, message_id,
            username, user_id, timestamp, status, created_at, updated_at
        )
        VALUES (%s, %s, %s, %s, %s, %s, NOW(), 'pending', NOW(), NOW())
        """
        cursor.execute(sql, (
            original_filename,
            file_path,
            chat_id,
            message_id,
            resolved_username,
            user_id
        ))
    conn.commit()
    conn.close()
    logger.info(f"‚úÖ –ó–∞–ø–∏—Å –ø—Ä–æ —Ñ–∞–π–ª –¥–æ–¥–∞–Ω–æ –¥–æ –ë–î: {original_filename} (user_id: {user_id})")

 # === üóë /delete: –º‚Äô—è–∫–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–ª–∞—Ç—ñ–∂–∫–∏ ===
async def delete_payment_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.effective_message

    if not message.reply_to_message:
        await message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É —è–∫ —Ä–µ–ø–ª–∞–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ–∞–π–ª–æ–º –Ω–∞ –æ–ø–ª–∞—Ç—É.")
        return

    original = message.reply_to_message
    chat_id = original.chat.id
    message_id = original.message_id

    # –ü–æ—à—É–∫ —É –ë–î
    conn = get_db_connection()
    with conn.cursor() as cursor:
        cursor.execute("""
            SELECT file_name, file_path, status
            FROM telegram_files
            WHERE chat_id = %s AND message_id = %s
        """, (chat_id, message_id))
        record = cursor.fetchone()
    conn.close()

    if not record:
        await message.reply_text("‚ùå –¶–µ–π —Ñ–∞–π–ª –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ —è–∫ –ø–ª–∞—Ç—ñ–∂.")
        return

    if record['status'] != 'pending':
        await message.reply_text("‚ö†Ô∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –º–æ–∂–ª–∏–≤–µ –ª–∏—à–µ –¥–ª—è —Ñ–∞–π–ª—ñ–≤, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –æ–ø–ª–∞—Ç—É!.")
        return

    # –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –≤ user_data
    context.user_data['delete_target'] = {
        "chat_id": chat_id,
        "message_id": message_id,
        "file_path": record['file_path'],
        "file_name": record['file_name']
    }

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="confirm_delete"),
            InlineKeyboardButton("‚ùå –ù—ñ", callback_data="cancel_delete")
        ]
    ])
    await message.reply_text(
        f"‚ö†Ô∏è –í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª *{record['file_name']}* –∑—ñ —Å–ø–∏—Å–∫—É –æ–ø–ª–∞—Ç?",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=keyboard
    )

# === üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¢–ï–ö–°–¢–£ —è–∫ .txt —ñ –∑–∞–ø–∏—Å —É –ë–î ===
def _slug(s: str) -> str:
    s = (s or "").strip()
    s = re.sub(r"\s+", "_", s)
    s = re.sub(r"[^a-zA-Z0-9_\-\.]+", "", s)
    return s[:64] if s else "text"

async def save_textfile_and_record(text_content: str,
                                   chat_id: int,
                                   message_id: int,
                                   user,  # telegram.User
                                   context: ContextTypes.DEFAULT_TYPE,
                                   subdir: str | None = None,
                                   filename_hint: str | None = None):
    target_dir = os.path.join(SAVE_DIR, subdir) if subdir else SAVE_DIR
    os.makedirs(target_dir, exist_ok=True)

    now_str = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    hint = _slug(filename_hint or (text_content[:30] if text_content else "note"))
    file_name = f"{now_str}__{hint}.txt"
    file_path = os.path.join(target_dir, file_name)

    with open(file_path, "w", encoding="utf-8") as f:
        f.write(text_content or "")

    user_id = user.id if user else None
    resolved_username = (
        (user.username if user and user.username else user.full_name) if user else "unknown"
    )

    conn = get_db_connection()
    with conn.cursor() as cursor:
        sql = """
        INSERT INTO telegram_files (
            file_name, file_path, chat_id, message_id,
            username, user_id, timestamp, status, created_at, updated_at
        )
        VALUES (%s, %s, %s, %s, %s, %s, NOW(), 'pending', NOW(), NOW())
        """
        cursor.execute(sql, (
            file_name, file_path, chat_id, message_id, resolved_username, user_id
        ))
    conn.commit()
    conn.close()

    logger.info(f"üìù –¢–µ–∫—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ —Ñ–∞–π–ª —ñ –¥–æ–¥–∞–Ω–æ –≤ –ë–î: {file_name}")
    return file_name, file_path

# === ‚úÖ –ö–Ω–æ–ø–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è /delete ===
async def delete_confirmation_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "cancel_delete":
        await query.edit_message_text("üö´ –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    if data != "confirm_delete":
        return

    info = context.user_data.get("delete_target")
    if not info:
        await query.edit_message_text("‚ö†Ô∏è –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        # üìÅ –ü–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —Ñ–∞–π–ª –¥–æ Deleted
        deleted_dir = os.path.join(SAVE_DIR, "Deleted")
        os.makedirs(deleted_dir, exist_ok=True)
        new_path = os.path.join(deleted_dir, os.path.basename(info['file_path']))
        os.rename(info['file_path'], new_path)
        logger.info(f"üóë –§–∞–π–ª –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –¥–æ Deleted/: {new_path}")

        # üõ†Ô∏è –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —É –ë–î
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("""
                UPDATE telegram_files
                SET status = 'deleted', updated_at = NOW()
                WHERE chat_id = %s AND message_id = %s
            """, (info['chat_id'], info['message_id']))
        conn.commit()
        conn.close()

        # üîÑ –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –±–æ—Ç –Ω–∞–¥—ñ—Å–ª–∞–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        try:
            conn = get_db_connection()
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT bot_message_id FROM telegram_files
                    WHERE chat_id = %s AND message_id = %s
                """, (info['chat_id'], info['message_id']))
                row = cursor.fetchone()
            conn.close()

            if row and row["bot_message_id"]:
                deleter = update.effective_user
                deleter_info_raw = f"{deleter.full_name} (@{deleter.username})" if deleter.username else deleter.full_name
                deleter_info = escape_markdown(deleter_info_raw, version=1)
                deletion_note = f"\n\nüóë *–§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –æ–ø–ª–∞—Ç* ({datetime.now().strftime('%Y-%m-%d %H:%M')})\nüë§ {deleter_info}"

                await context.bot.edit_message_text(
                    chat_id=info["chat_id"],
                    message_id=row["bot_message_id"],
                    text=f"‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ –¥–æ —Å–ø–ª–∞—Ç–∏. –û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É.{deletion_note}",
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞: {e}")

        # ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ—é –∑ inline-–∫–Ω–æ–ø–∫–∞–º–∏
        await query.edit_message_text("‚úÖ –§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∞–∫–æ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —á–∞—Ç—É.")

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —Ñ–∞–π–ª.")


    # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É...
        try:
            deleter = update.effective_user
            deleter_info = f"{deleter.first_name} (@{deleter.username})" if deleter.username else deleter.first_name
            deletion_note = f"\n\nüóë *–§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É –æ–ø–ª–∞—Ç* ({datetime.now().strftime('%Y-%m-%d %H:%M')})\nüë§ {deleter_info}"

            await context.bot.edit_message_text(
                chat_id=info["chat_id"],
                message_id=info["message_id"],
                text=f"‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ –¥–æ —Å–ø–ª–∞—Ç–∏. –û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É.{deletion_note}",
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as edit_err:
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂: {edit_err}")

   

# === üìé /pending ===
async def pending_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_permission(update, {"admin", "manager"}):
        return

    logger.info("üîç –û–±—Ä–æ–±–∫–∞ /pending...")
    conn = get_db_connection()
    with conn.cursor() as cursor:
        logger.info("üì• SQL: –í–∏–±—ñ—Ä–∫–∞ pending —Ñ–∞–π–ª—ñ–≤")
        cursor.execute("""
            SELECT id, file_name, chat_id, message_id, created_at
            FROM telegram_files
            WHERE status = 'pending'
            ORDER BY created_at ASC
        """)
        rows = cursor.fetchall()
    conn.close()
    logger.info(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å(—ñ–≤) –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º 'pending'")

    if not rows:
        await update.message.reply_text("‚úÖ –ù–µ–º–∞—î —Ñ–∞–π–ª—ñ–≤, —â–æ –æ—á—ñ–∫—É—é—Ç—å –æ–ø–ª–∞—Ç—É.")
        return

    for row in rows:
        try:
            logger.info(f"üì® –û–±—Ä–æ–±–∫–∞: {row['file_name']} (ID: {row['id']}, Chat: {row['chat_id']}, MsgID: {row['message_id']})")
            text = (
                f"üìé –û—á—ñ–∫—É—î –æ–ø–ª–∞—Ç–∏: *{row['file_name']}*\n"
                f"üïí {row['created_at'].strftime('%Y-%m-%d %H:%M')}"
            )
            await context.bot.send_message(
                chat_id=row["chat_id"],
                text=text,
                reply_to_message_id=row["message_id"],
                parse_mode=ParseMode.MARKDOWN
            )
            await asyncio.sleep(0.5)  # üîÅ –∑–∞–ø–æ–±—ñ–≥–∞—î —Ç–∞–π–º–∞—É—Ç—É Telegram API
        except (BadRequest, Forbidden) as e:
            logger.warning(f"‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ: {e}")
            await update.message.reply_text(
                f"‚ùó –ù–µ–º–æ–∂–ª–∏–≤–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ *{row['file_name']}*\n"
                f"üì≠ –ô–º–æ–≤—ñ—Ä–Ω–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∞–±–æ –±–æ—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —á–∞—Ç—É.",
                parse_mode=ParseMode.MARKDOWN
            )
            try:
                logger.info(f"üìù –°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –Ω–∞ 'invalid' –¥–ª—è ID {row['id']}")
                conn = get_db_connection()
                with conn.cursor() as cursor:
                    cursor.execute(
                        "UPDATE telegram_files SET status = 'invalid', updated_at = NOW() WHERE id = %s",
                        (row["id"],)
                    )
                conn.commit()
                conn.close()
                logger.info("‚úÖ –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            except Exception as db_err:
                logger.error(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É: {db_err}")

# === üìã –ö–æ–º–∞–Ω–¥–∏ –∑–∞ —Ä–æ–ª—è–º–∏ ===
ROLE_COMMANDS = {
    "admin":    ["start", "checkbot", "help", "balance", "pay", "menu", "pending"],
    "manager":  ["start", "checkbot", "help", "balance", "pending"],
    "employee": ["start", "checkbot", "help"]
}

# === ‚è±Ô∏è –î–æ—Å—Ç—É–ø–Ωi –∫–æ–º–∞–Ω–¥–∏ ===
def get_available_commands(user_id: int, chat_type: str) -> list[str]:
    role = get_user_role(user_id)
    all_cmds = ROLE_COMMANDS.get(role, [])
    group_cmds = ["start", "checkbot", "help"]
    return [cmd for cmd in all_cmds if chat_type == "private" or cmd in group_cmds]

# # === üßÆ –ö–ª–∞–≤i–∞—Ç—É—Ä–∞ ===
# def get_keyboard_for_chat(user_id: int, chat_type: str):
#     commands = get_available_commands(user_id, chat_type)
#     buttons = [[f"/{cmd}" for cmd in commands[i:i+2]] for i in range(0, len(commands), 2)]
#     return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# === üü¢ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    role = get_user_role(user.id)
    cmds = get_available_commands(user.id, chat.type)

    logger.info(f"‚û°Ô∏è /start –≤—ñ–¥ {user.id} ({user.username}) ‚Äî —Ä–æ–ª—å: {role}, —á–∞—Ç: {chat.type}")
    msg = f"üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!\n–í–∞—à–∞ —Ä–æ–ª—å: *{role}*\n\nüìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
    msg += "\n".join(f"/{cmd}" for cmd in cmds)

    await update.message.reply_text(msg, parse_mode="Markdown")



# === üÜò /help ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    role = get_user_role(user.id)
    cmds = get_available_commands(user.id, chat.type)

    command_desc = {
    "start": "üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —ñ —Ä–æ–ª—å",
    "checkbot": "üü¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –±–æ—Ç–∞",
    "help": "üìñ –¶–µ –º–µ–Ω—é",
    "balance": "üí∞ –ë–∞–ª–∞–Ω—Å (–ª–∏—à–µ –≤ –ø—Ä–∏–≤–∞—Ç—ñ)",
    "pay": "üìé –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂ (–ª–∏—à–µ –≤ –≥—Ä—É–ø—ñ)",
    "menu": "üîπ –ú–µ–Ω—é –¥—ñ–π",
    "pending": "üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ (–ª–∏—à–µ –≤ –≥—Ä—É–ø—ñ)"
}


    text = f"üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–ª—ñ *{role}*:\n"
    for cmd in cmds:
        text += f"/{cmd} ‚Äî {command_desc.get(cmd, '‚öôÔ∏è')}\n"

    logger.info(f"üìñ /help –≤—ñ–¥ {user.id} ({user.username}) ‚Äî —Ä–æ–ª—å: {role}, —á–∞—Ç: {chat.type}")
    await update.message.reply_text(text, parse_mode="Markdown")


# === ‚úÖ /checkbot (–æ–Ω–æ–≤–ª–µ–Ω–æ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º –≤–µ—Ä—Å—ñ—ó) ===
async def checkbot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uptime = datetime.now() - context.application.bot_data.get("start_time", datetime.now())
    seconds = int(uptime.total_seconds())
    hours, remainder = divmod(seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    uptime_str = f"{hours} –≥–æ–¥ {minutes} —Ö–≤ {seconds} —Å"

    text = (
        f"‚úÖ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω\n"
        f"‚è± –ê–ø—Ç–∞–π–º: {uptime_str}\n"
        f"\n"
        f"üì¶ –í–µ—Ä—Å—ñ—è: {BOT_VERSION}\n"
        f"üìù {BOT_NOTES}"
    )
    await update.message.reply_text(text)

# === üí∞ /balance ===
async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_permission(update, {"admin"}, private_only=True):
        return

    user = update.effective_user
    logger.info(f"üí∞ /balance –∑–∞–ø–∏—Ç –≤—ñ–¥ {user.id} ({user.username})")

    today = datetime.now().strftime("%d-%m-%Y")
    now_iso = datetime.now().strftime("%Y-%m-%dT%H:%M:%S")

    pb_total = 0.0
    pb_result = "üè¶ –ë–µ–∑–≥–æ—Ç—ñ–≤–∫–æ–≤—ñ —Ä–∞—Ö—É–Ω–∫–∏:\n"

    for name, token in PB_TOKENS.items():
        for acc in PB_ACCOUNTS.get(name, []):
            try:
                url = "https://acp.privatbank.ua/api/statements/balance"
                headers = {
                    "User-Agent": "PythonClient",
                    "token": token,
                    "Content-Type": "application/json;charset=cp1251"
                }
                params = {
                    "acc": acc,
                    "startDate": today,
                    "endDate": today
                }
                r = requests.get(url, headers=headers, params=params)
                r.raise_for_status()
                try:
                    data = r.json()
                except Exception as json_err:
                    logger.error(f"‚ùå JSON –ø–æ–º–∏–ª–∫–∞ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ {name}: {json_err}")
                    logger.error(f"‚ö†Ô∏è –í–º—ñ—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {r.text}")
                    continue

                for bal in data.get("balances", []):
                    balance = float(bal.get("balanceOutEq", 0))
                    if balance:
                        pb_total += balance
                        pb_result += f"- {bal.get('nameACC', name)}: {balance:,.2f} –≥—Ä–Ω\n"
            except requests.exceptions.RequestException as e:
                logger.error(f"üí• –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ {name} ({acc}) ‚Äî –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")

    odata_total = 0.0
    odata_result = "\nüíµ –ì–æ—Ç—ñ–≤–∫–æ–≤—ñ —Ä–∞—Ö—É–Ω–∫–∏:\n"

    for name, key in ODATA_ACCOUNTS.items():
        try:
            url = f"{ODATA_URL}AccumulationRegister_–î–µ–Ω–µ–∂–Ω—ã–µ–°—Ä–µ–¥—Å—Ç–≤–∞/Balance?Period=datetime'{now_iso}'&$format=json&Condition=–î–µ–Ω–µ–∂–Ω—ã–π–°—á–µ—Ç_Key eq guid'{key}'"
            r = requests.get(url, auth=(ODATA_USER, ODATA_PASSWORD))
            r.raise_for_status()
            try:
                data = r.json()
            except Exception as json_err:
                logger.error(f"‚ùå JSON –ø–æ–º–∏–ª–∫–∞ OData {name}: {json_err}")
                logger.error(f"‚ö†Ô∏è –í–º—ñ—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {r.text}")
                continue

            rows = data.get("value", [])
            if rows:
                amount = float(rows[0].get("–°—É–º–º–∞Balance", 0))
                if amount:
                    odata_total += amount
                    odata_result += f"- {name}: {amount:,.2f} –≥—Ä–Ω\n"
        except requests.exceptions.RequestException as e:
            logger.error(f"üí• OData {name} ‚Äî –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")

    total = pb_total + odata_total
    summary = f"\nüìä –†–∞–∑–æ–º:\n- –ë–µ–∑–≥–æ—Ç—ñ–≤–∫–æ–≤—ñ: {pb_total:,.2f} –≥—Ä–Ω\n- –ì–æ—Ç—ñ–≤–∫–æ–≤—ñ: {odata_total:,.2f} –≥—Ä–Ω\n- üí∞ –í—Å—å–æ–≥–æ: {total:,.2f} –≥—Ä–Ω"

    msg = f"{pb_result}{odata_result}{summary}"
    await update.message.reply_text(msg)


# === ‚úÖ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –¢–∞–∫ / –ù—ñ ===
async def confirm_duplicate_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "cancel":
        await query.edit_message_text("üö´ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–∞–π–ª—É –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    if not data.startswith(CONFIRM_PREFIX):
        return

    unique_id = data.replace(CONFIRM_PREFIX, "")
    info = context.user_data.get(unique_id)
    if not info:
        await query.edit_message_text("‚ö†Ô∏è –î–∞–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    file = info["file"]
    original_filename = info["file_name"]
    chat_id = info["chat_id"]
    message_id = info["message_id"]
    username = info["username"]

    now_str = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

# üì∏ –î–ª—è —Ñ–æ—Ç–æ (–Ω–µ–º–∞—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —è–≤–Ω–æ):
    if original_filename.startswith("photo_"):
        save_name = original_filename.replace(".jpg", f"_copy_{now_str}.jpg")
    else:
        base, ext = os.path.splitext(original_filename)
        save_name = f"{base}_copy_{now_str}{ext}"

    user = update.effective_user
    await save_file_and_record(file, original_filename, chat_id, message_id, user, context, save_as=save_name)
    await query.edit_message_text(f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑ –Ω–æ–≤–æ—é –Ω–∞–∑–≤–æ—é: {save_name}")


# === üñºÔ∏è –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ (—è–∫ –ø–ª–∞—Ç—ñ–∂–∫–∞) ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not await check_permission(update, {"admin", "manager"}, group_only=True):
        return

    if message.caption and any(x in message.caption.lower() for x in ["/pay", "/–æ–ø–ª–∞—Ç–∞"]):
        photo = message.photo[-1]  # –ù–∞–π—è–∫—ñ—Å–Ω—ñ—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        # file = await context.bot.get_file(photo.file_id)
        filename = f"photo_{photo.file_unique_id}.jpg"

        # === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç ===
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT * FROM telegram_files WHERE file_name = %s ORDER BY created_at DESC LIMIT 1", (filename,))
            existing = cursor.fetchone()
        conn.close()

        if existing:
            text = (
                f"‚ö†Ô∏è –¶–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–ª–æ—Å—å {existing['created_at'].strftime('%Y-%m-%d %H:%M')} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º @{existing['username']}\n"
                f"–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –æ–ø–ª–∞—Ç—É?"
            )
            unique_id = f"{message.chat.id}_{message.message_id}"
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=CONFIRM_PREFIX + unique_id),
                InlineKeyboardButton("‚ùå –ù—ñ", callback_data="cancel")
            ]])

            context.user_data[unique_id] = {
                "file": photo,
                "file_name": filename,
                "message_id": message.message_id,
                "chat_id": message.chat.id,
                "username": message.from_user.username
            }

            await message.reply_text(text, reply_markup=keyboard)
            return

        await save_file_and_record(photo, filename, message.chat.id, message.message_id, message.from_user, context)
        await message.reply_text("‚úÖ –§–æ—Ç–æ –ø–ª–∞—Ç—ñ–∂–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —ñ –¥–æ–¥–∞–Ω–æ –¥–æ –æ–±—Ä–æ–±–∫–∏.")
    else:
        await message.reply_text("‚ö†Ô∏è –î–æ–¥–∞–π—Ç–µ /pay –∞–±–æ /–æ–ø–ª–∞—Ç–∞ –≤ –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ, —â–æ–± –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –ø–ª–∞—Ç—ñ–∂–∫—É.")

# === üß© –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∏–≥–µ—Ä–∞ /pay + –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—É ===
def extract_file_from_message(message) -> tuple[bool, object]:
    is_triggered = False
    file = None

    # –¢—Ä–∏–≥–µ—Ä –∑ –ø—ñ–¥–ø–∏—Å—É
    if message.caption and any(x in message.caption.lower() for x in ["/pay", "/–æ–ø–ª–∞—Ç–∞"]):
        is_triggered = True
        file = message.document or (message.photo[-1] if message.photo else None)
        return is_triggered, file

    # –¢—Ä–∏–≥–µ—Ä –∑ —Ç–µ–∫—Å—Ç—É (—É —Ç.—á. —è–∫ —Ä–µ–ø–ª–∞–π)
    if message.text and any(x in message.text.lower() for x in ["/pay", "/–æ–ø–ª–∞—Ç–∞"]):
        is_triggered = True
        if message.reply_to_message:
            reply = message.reply_to_message
            if reply.document:
                file = reply.document
            elif reply.photo:
                file = reply.photo[-1]
            else:
                file = None  # —Ä–µ–ø–ª–∞–π –Ω–∞ —Ç–µ–∫—Å—Ç ‚Üí —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –¥–∞–ª—ñ –æ–±—Ä–æ–±–∏–º–æ —è–∫ —Ç–µ–∫—Å—Ç–æ–≤—É –ø–ª–∞—Ç—ñ–∂–∫—É
        return is_triggered, file

    return is_triggered, file

# === üìé –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—ñ–≤ /pay –∞–±–æ /–æ–ø–ª–∞—Ç–∞ (—î–¥–∏–Ω–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è) ===
async def handle_payment_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_permission(update, {"admin", "manager"}, group_only=True):
        return

    user = update.effective_user
    chat = update.effective_chat
    message = update.effective_message
    username = user.username or "unknown"

    # –í–∏—Ç—è–≥—É—î–º–æ –≤–∫–ª–∞–¥–µ–Ω–Ω—è/—Ç—Ä–∏–≥–µ—Ä –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    is_triggered, file = extract_file_from_message(message)
    original_message = message.reply_to_message or message

    logger.info(f"üìé –¢—Ä–∏–≥–µ—Ä: {is_triggered}, —Ñ–∞–π–ª: {getattr(file, 'file_id', 'None')}")

    if not is_triggered:
        logger.info(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫: {user.id} ({username}) ‚Äî –±–µ–∑ —Ç—Ä–∏–≥–µ—Ä—É")
        return

    # ‚îÄ‚îÄ 1) üìù –¢–ï–ö–°–¢–û–í–ê –ü–õ–ê–¢–Ü–ñ–ö–ê (—Ä–µ–ø–ª–∞–π –Ω–∞ —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ñ–∞–π–ª—É/—Ñ–æ—Ç–æ) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if (not file) and original_message and (original_message.text or original_message.caption) \
       and not (getattr(original_message, "document", None) or getattr(original_message, "photo", None)):

        # –ê–Ω—Ç–∏‚Äë–¥—É–±–ª—å: —Ç–µ —Å–∞–º–µ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (chat_id + message_id)
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute(
                "SELECT file_name, created_at FROM telegram_files WHERE chat_id = %s AND message_id = %s LIMIT 1",
                (chat.id, original_message.message_id)
            )
            existing = cursor.fetchone()
        conn.close()

        if existing:
            await message.reply_text(
                f"‚ö†Ô∏è –î–ª—è —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø–ª–∞—Ç—ñ–∂–∫—É "
                f"({existing['file_name']}, {existing['created_at'].strftime('%Y-%m-%d %H:%M')})"
            )
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ .txt —ñ–∑ –≤–º—ñ—Å—Ç–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text_body = original_message.text or original_message.caption or ""
        file_name, file_path = await save_textfile_and_record(
            text_body, chat.id, original_message.message_id, user, context
        )

        bot_msg = await message.reply_text(
            f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—É –ø–ª–∞—Ç—ñ–∂–∫—É: *{file_name}*\n–û—á—ñ–∫—É–π—Ç–µ –æ–±—Ä–æ–±–∫–∏.",
            parse_mode=ParseMode.MARKDOWN
        )

        # –ü—Ä–∏–≤'—è–∂–µ–º–æ bot_message_id
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute(
                "UPDATE telegram_files SET bot_message_id = %s WHERE chat_id = %s AND message_id = %s",
                (bot_msg.message_id, chat.id, original_message.message_id)
            )
        conn.commit()
        conn.close()
        return

    # ‚îÄ‚îÄ 2) üìÑ –§–ê–ô–õ / üì∑ –§–û–¢–û ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if not file or not hasattr(file, 'file_id'):
        logger.info(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫: {user.id} ({username}) ‚Äî –Ω–µ–º–∞—î —Ñ–∞–π–ª—É/—Ñ–æ—Ç–æ")
        return

    # –í–∏–∑–Ω–∞—á–∏–º–æ —ñ–º'—è —Ñ–∞–π–ª—É
    if hasattr(file, "file_name") and file.file_name:
        original_filename = file.file_name
    elif hasattr(file, "file_unique_id"):
        original_filename = f"photo_{file.file_unique_id}.jpg"
    else:
        await message.reply_text("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É.")
        return

    ext = os.path.splitext(original_filename)[1].lower()
    if ext not in ALLOWED_EXTENSIONS:
        await message.reply_text("‚ö†Ô∏è –î–ª—è –æ–ø–ª–∞—Ç–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ: PDF, Excel, TXT, PNG, JPEG")
        logger.warning(f"‚ö†Ô∏è –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: {original_filename}")
        return

    # –ê–Ω—Ç–∏‚Äë–¥—É–±–ª—å –ø–æ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É (—è–∫ —É —Ç–µ–±–µ –±—É–ª–æ)
    conn = get_db_connection()
    with conn.cursor() as cursor:
        cursor.execute(
            "SELECT * FROM telegram_files WHERE file_name = %s ORDER BY created_at DESC LIMIT 1",
            (original_filename,)
        )
        existing = cursor.fetchone()
    conn.close()

    if existing:
        text = (
            f"‚ö†Ô∏è –§–∞–π–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–≤—Å—è {existing['created_at'].strftime('%Y-%m-%d %H:%M')} "
            f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º @{existing['username']}"
        )
        if existing['status'] == 'paid':
            text += f"\n‚úÖ –û–ø–ª–∞—á–µ–Ω–æ: {existing['updated_at'].strftime('%Y-%m-%d %H:%M')}"
        text += "\n\n–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞ –æ–ø–ª–∞—Ç—É?"

        unique_id = f"{chat.id}_{original_message.message_id}"
        keyboard = InlineKeyboardMarkup([[
            InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data=CONFIRM_PREFIX + unique_id),
            InlineKeyboardButton("‚ùå –ù—ñ", callback_data="cancel")
        ]])

        context.user_data[unique_id] = {
            "file": file,
            "file_name": original_filename,
            "message_id": original_message.message_id,
            "chat_id": chat.id,
            "username": username
        }

        await message.reply_text(text, reply_markup=keyboard)
        return

    # –ó–±–µ—Ä–µ–≥—Ç–∏ ‚Äú–Ω–µ–¥—É–±–ª—å–æ–≤–∞–Ω–∏–π‚Äù —Ñ–∞–π–ª —ñ –∑–∞–ø–∏—Å —É –ë–î
    await save_file_and_record(file, original_filename, chat.id, original_message.message_id, username, context)
    bot_msg = await message.reply_text("‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ –¥–æ —Å–ø–ª–∞—Ç–∏. –û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É.")

    # –î–æ–∑–∞–ø–∏—à–µ–º–æ bot_message_id –¥–æ –∑–∞–ø–∏—Å—É
    conn = get_db_connection()
    with conn.cursor() as cursor:
        cursor.execute(
            "UPDATE telegram_files SET bot_message_id = %s WHERE chat_id = %s AND message_id = %s",
            (bot_msg.message_id, message.chat.id, original_message.message_id)
        )
    conn.commit()
    conn.close()



# === üßæ –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
async def log_everything(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text if update.message else "N/A"
    logger.info(f"[ALL] {user.id} ({user.username}): {text}")


# === ‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ ===
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {context.error}")

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
    try:
        await notify_admin(context, str(context.error))
    except Exception as e:
        logger.error(f"üì≠ –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∞–¥–º—ñ–Ω—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É: {e}")

    if update and hasattr(update, "message"):
        try:
            await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞.")
        except Exception:
            pass


# === üöÄ MAIN ===
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # —Ñ—ñ–∫—Å—É—î–º–æ —á–∞—Å —Å—Ç–∞—Ä—Ç—É –¥–æ –∑–∞–ø—É—Å–∫—É –ø–æ–ª–ª—ñ–Ω–≥–∞
    app.bot_data["start_time"] = datetime.now()

    # –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ /–∫–æ–º–∞–Ω–¥–∏ –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞
    app.post_init = on_startup

    # üìå –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("checkbot", checkbot_command))
    app.add_handler(CommandHandler("balance", balance_command))
    app.add_handler(CommandHandler("pending", pending_command))
    app.add_handler(CommandHandler("delete", delete_payment_command))

    # ‚úÖ –ö–Ω–æ–ø–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è (delete) —Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—É
    app.add_handler(CallbackQueryHandler(delete_confirmation_handler, pattern="^(confirm_delete|cancel_delete)$"))
    app.add_handler(CallbackQueryHandler(confirm_duplicate_handler))  # —ñ–Ω—à—ñ callback'–∏ (confirm_duplicate_*)

    # üñº –§–æ—Ç–æ (—è–∫ –ø–ª–∞—Ç—ñ–∂–∫–∞)
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # üìé –¢—Ä–∏–≥–µ—Ä /pay –∞–±–æ /–æ–ø–ª–∞—Ç–∞:
    #   1) —è–∫ —Ç–µ–∫—Å—Ç (—É —Ç.—á. —Ä–µ–ø–ª–∞–π –Ω–∞ —Ç–µ–∫—Å—Ç) ‚Üí handle_payment_file
    #   2) —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç –∑ –ø—ñ–¥–ø–∏—Å–æ–º ‚Üí handle_payment_file
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"(?i)/pay|/–æ–ø–ª–∞—Ç–∞"), handle_payment_file))
    app.add_handler(MessageHandler(filters.Document.ALL & filters.CaptionRegex(r"(?i)/pay|/–æ–ø–ª–∞—Ç–∞"), handle_payment_file))

    # üßæ –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—å–æ–≥–æ —ñ–Ω—à–æ–≥–æ
    app.add_handler(MessageHandler(filters.ALL, log_everything))

    # ‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    app.add_error_handler(error_handler)

    # ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç
    try:
        app.run_polling()
    except Exception as e:
        logger.critical(f"üî• –ë–æ—Ç –∞–≤–∞—Ä—ñ–π–Ω–æ –∑—É–ø–∏–Ω–∏–≤—Å—è: {e}")

if __name__ == "__main__":
    main()
