import os
import tempfile
import msvcrt
import sys
import atexit
from datetime import datetime
import pymysql
from dotenv import load_dotenv
from telegram import Update, MessageEntity
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes

# === –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É –¥—Ä—É–≥–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ ===
script_name = os.path.basename(sys.argv[0])
lockfile_name = f"{os.path.splitext(script_name)[0]}.lock"
lockfile_path = os.path.join(tempfile.gettempdir(), lockfile_name)
try:
    lock_file = open(lockfile_path, 'w')
    msvcrt.locking(lock_file.fileno(), msvcrt.LK_NBLCK, 1)
except OSError:
    print("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π. –í–∏—Ö—ñ–¥.")
    sys.exit()

# === –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ ===
def cleanup():
    try:
        msvcrt.locking(lock_file.fileno(), msvcrt.LK_UNLCK, 1)
        lock_file.close()
        os.remove(lockfile_path)
    except Exception:
        pass
atexit.register(cleanup)

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ===
load_dotenv("C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/.env")
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_HOST = os.getenv("DB_HOST")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_DATABASE = os.getenv("DB_DATABASE")
SAVE_DIR = "C:/Users/la/OneDrive/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/–ù–∞ –æ–ø–ª–∞—Ç—É!"
LOG_FILE = "C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/Paid/from_telegram_log.txt"

# === –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î ===
conn = pymysql.connect(
    host=DB_HOST,
    user=DB_USER,
    password=DB_PASSWORD,
    database=DB_DATABASE,
    charset='utf8mb4',
    autocommit=True
)
cursor = conn.cursor()

# === –õ–æ–≥—É–≤–∞–Ω–Ω—è ===
def log(msg: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{timestamp}] {msg}"
    print(line)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")

# === –û–±—Ä–æ–±–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ ===
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    caption = msg.caption.lower() if msg.caption else ""

    if "/–æ–ø–ª–∞—Ç–∞" not in caption and "/pay" not in caption:
        return

    if not msg.document:
        await msg.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç —ñ–∑ –∫–æ–º–∞–Ω–¥–æ—é /–æ–ø–ª–∞—Ç–∞")
        log("–í—ñ–¥—Ö–∏–ª–µ–Ω–æ: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        return

    file = msg.document
    file_name = file.file_name
    file_path = os.path.join(SAVE_DIR, file_name)

    os.makedirs(SAVE_DIR, exist_ok=True)
    telegram_file = await context.bot.get_file(file.file_id)
    await telegram_file.download_to_drive(file_path)
    log(f"üì• –û—Ç—Ä–∏–º–∞–Ω–æ —Ñ–∞–π–ª: {file_name}, –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {file_path}")

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("""
        INSERT INTO telegram_files (file_name, file_path, chat_id, message_id, username, timestamp, status)
        VALUES (%s, %s, %s, %s, %s, %s, 'pending')
    """, (
        file_name, file_path,
        msg.chat.id, msg.message_id,
        msg.from_user.username or "", timestamp
    ))
    log(f"üóÇÔ∏è –ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ –≤ –ë–î –¥–ª—è {file_name} (chat_id={msg.chat.id}, message_id={msg.message_id})")

    await msg.reply_text(f"üì• –§–∞–π–ª {file_name} –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –æ–ø–ª–∞—Ç—É")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()
