import os
import tempfile
import msvcrt
import sys
import atexit
from datetime import datetime
import pymysql
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# === –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É –¥—Ä—É–≥–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ ===
script_name = os.path.basename(sys.argv[0])
lockfile_name = f"{os.path.splitext(script_name)[0]}.lock"
lockfile_path = os.path.join(tempfile.gettempdir(), lockfile_name)
try:
    lock_file = open(lockfile_path, 'w')
    msvcrt.locking(lock_file.fileno(), msvcrt.LK_NBLCK, 1)
except OSError:
    print("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π. –í–∏—Ö—ñ–¥.")
    sys.exit()

def cleanup():
    try:
        msvcrt.locking(lock_file.fileno(), msvcrt.LK_UNLCK, 1)
        lock_file.close()
        os.remove(lockfile_path)
    except Exception:
        pass
atexit.register(cleanup)

# === –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
load_dotenv("C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/.env")
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_HOST = os.getenv("DB_HOST")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_DATABASE = os.getenv("DB_DATABASE")
SAVE_DIR = "C:/Users/la/OneDrive/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/–ù–∞ –æ–ø–ª–∞—Ç—É!"
LOG_FILE = "C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/Paid/from_telegram_log.txt"
SUPPORTED_EXT = [".pdf", ".xls", ".xlsx", ".txt", ".jpg", ".jpeg", ".png", ".bmp", ".tiff"]

# === –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î ===
conn = pymysql.connect(
    host=DB_HOST,
    user=DB_USER,
    password=DB_PASSWORD,
    database=DB_DATABASE,
    charset='utf8mb4',
    autocommit=True
)
cursor = conn.cursor()
sessions = {}

def log(msg: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{timestamp}] {msg}"
    print(line)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")

async def save_and_record(file, msg, context, user, is_duplicate):
    ts = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    base_name = file.file_name
    if is_duplicate:
        name_part, ext = os.path.splitext(base_name)
        safe_name = f"{name_part}__DUPLICATE_{ts}{ext}"
    else:
        safe_name = base_name

    file_path = os.path.join(SAVE_DIR, safe_name)
    os.makedirs(SAVE_DIR, exist_ok=True)

    telegram_file = await context.bot.get_file(file.file_id)
    await telegram_file.download_to_drive(file_path)

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("""
        INSERT INTO telegram_files (file_name, file_path, chat_id, message_id, username, timestamp, status)
        VALUES (%s, %s, %s, %s, %s, %s, 'pending')
    """, (
        base_name, file_path,
        msg.chat.id, msg.message_id,
        user, timestamp
    ))

    note = " (–¥—É–±–ª—å)" if is_duplicate else ""
    await msg.reply_text(f"üì• –§–∞–π–ª {base_name}{note} –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –æ–ø–ª–∞—Ç—É")
    log(f"‚úîÔ∏è {base_name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ {'(–¥—É–±–ª—å)' if is_duplicate else ''}")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user.username or "anon"
    if user not in sessions:
        await query.edit_message_text("‚ö†Ô∏è –°–µ—Å—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
        return

    file, msg = sessions.pop(user)
    if query.data == "save_again":
        await save_and_record(file, msg, context, user, is_duplicate=True)
        await query.edit_message_text("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ")
    else:
        await query.edit_message_text("‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        log(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user} —Å–∫–∞—Å—É–≤–∞–≤ –¥—É–±–ª—å")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return

    user = msg.from_user.username or "anon"
    caption = msg.caption or ""
    text = msg.text or ""
    has_pay = "/–æ–ø–ª–∞—Ç–∞" in caption.lower() or "/pay" in caption.lower() or "/–æ–ø–ª–∞—Ç–∞" in text.lower()

    # 1Ô∏è‚É£ /–æ–ø–ª–∞—Ç–∞ –∑ —Ñ–∞–π–ª–æ–º
    if has_pay and msg.document:
        await process_document(msg.document, msg, context, user)
        return

    # 2Ô∏è‚É£ /–æ–ø–ª–∞—Ç–∞ —É reply –Ω–∞ —Ñ–∞–π–ª
    if has_pay and msg.reply_to_message and msg.reply_to_message.document:
        reply_doc = msg.reply_to_message.document
        await process_document(reply_doc, msg.reply_to_message, context, user)
        return

    # 3Ô∏è‚É£ /–æ–ø–ª–∞—Ç–∞ –∑ —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ, —ñ–Ω—à–∏–º ‚Äî –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    if has_pay:
        await msg.reply_text("‚ö†Ô∏è –¶–µ–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ —Ñ–∞–π–ª —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, Excel, TXT –∞–±–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è).")

async def process_document(file, msg, context, user):
    ext = os.path.splitext(file.file_name)[1].lower()
    if ext not in SUPPORTED_EXT:
        await msg.reply_text("‚ö†Ô∏è –¶–µ–π —Ç–∏–ø —Ñ–∞–π–ª—É –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ PDF, Excel, TXT –∞–±–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ —Ñ–∞–π–ª.")
        return

    cursor.execute("""
        SELECT timestamp FROM telegram_files
        WHERE file_name = %s AND username = %s
        ORDER BY id DESC LIMIT 1
    """, (file.file_name, user))
    duplicate = cursor.fetchone()

    if duplicate:
        prev_time = duplicate[0].strftime("%Y-%m-%d %H:%M:%S")
        sessions[user] = (file, msg)
        keyboard = [[
            InlineKeyboardButton("‚úÖ –¢–∞–∫, –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data="save_again"),
            InlineKeyboardButton("‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")
        ]]
        await msg.reply_text(
            f"‚ö†Ô∏è –§–∞–π–ª '{file.file_name}' –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–≤—Å—è {prev_time}. –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return

    await save_and_record(file, msg, context, user, is_duplicate=False)

if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.ALL, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()
