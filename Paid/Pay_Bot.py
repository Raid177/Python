import os
import sys
import time
import tempfile
import atexit
import msvcrt
import pymysql
import psutil
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MessageEntity
from telegram.ext import ApplicationBuilder, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# === üîí –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –¥—Ä—É–≥–æ–≥–æ –µ–∫–∑–µ–º–ø–ª—è—Ä–∞ (–ø—ñ–∑–Ω—ñ—à–µ –∑–∞–º—ñ–Ω—é—î—Ç—å—Å—è –∫—ñ–ª–µ—Ä–æ–º) ===
def kill_duplicates():
    time.sleep(2)  # –ü–∞—É–∑–∞ –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É, —â–æ–± –¥–∞—Ç–∏ –¥—Ä—É–≥–æ–º—É –ø—Ä–æ—Ü–µ—Å—É –∑'—è–≤–∏—Ç–∏—Å—å
    current_pid = os.getpid()
    this_name = os.path.basename(sys.argv[0])
    for p in psutil.process_iter(['pid', 'name', 'exe', 'cmdline']):
        try:
            cmdline = p.info.get('cmdline') or []
            if isinstance(cmdline, list) and this_name in ' '.join(cmdline) and p.pid != current_pid:
                p.kill()
                print(f"üõë –í–±–∏—Ç–æ –¥—É–±–ª—å–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Ü–µ—Å {this_name} (PID {p.pid})")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ PID {p.pid}: {e}")

kill_duplicates()

# === üß™ .env –∑–º—ñ–Ω–Ω—ñ ===
load_dotenv("C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/.env")
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_HOST = os.getenv("DB_HOST")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_DATABASE = os.getenv("DB_DATABASE")
SAVE_DIR = "C:/Users/la/OneDrive/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/–ù–∞ –æ–ø–ª–∞—Ç—É!"
LOG_FILE = "C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/Paid/from_telegram_log.txt"

# === üîå –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î ===
conn = pymysql.connect(
    host=DB_HOST,
    user=DB_USER,
    password=DB_PASSWORD,
    database=DB_DATABASE,
    charset='utf8mb4',
    autocommit=True
)
cursor = conn.cursor()
sessions = {}

# === ü™µ –õ–æ–≥–∏ ===
def log(msg: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{timestamp}] {msg}"
    print(line)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")

# === üì• –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ ===
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return

    caption = msg.caption.lower() if msg.caption else ""
    is_pay_command = "/–æ–ø–ª–∞—Ç–∞" in caption or "/pay" in caption

    # –Ø–∫—â–æ reply –Ω–∞ /–æ–ø–ª–∞—Ç–∞
    if not is_pay_command and msg.reply_to_message:
        for ent in msg.reply_to_message.entities or []:
            if ent.type == MessageEntity.BOT_COMMAND:
                command = msg.reply_to_message.text[ent.offset: ent.offset + ent.length]
                if command.lower() in ("/–æ–ø–ª–∞—Ç–∞", "/pay"):
                    is_pay_command = True
                    break

    if not is_pay_command:
        return

    user = msg.from_user.username or "anon"

    if msg.document:
        file = msg.document
        orig_name = file.file_name

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—è
        cursor.execute("SELECT timestamp FROM telegram_files WHERE file_name=%s AND username=%s ORDER BY id DESC LIMIT 1", (orig_name, user))
        prev = cursor.fetchone()

        if prev:
            prev_time = prev[0].strftime("%Y-%m-%d %H:%M:%S")
            sessions[user] = (file, msg)
            keyboard = [[
                InlineKeyboardButton("‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ —â–µ —Ä–∞–∑", callback_data="save_again"),
                InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")
            ]]
            await msg.reply_text(f"‚ö†Ô∏è –§–∞–π–ª ¬´{orig_name}¬ª –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–≤—Å—è {prev_time}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è?", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await save_and_record(file, msg, context, user, is_duplicate=False)

    else:
        await msg.reply_text("üö´ –¢–∏–ø —Ñ–∞–π–ª—É –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –ª–∏—à–µ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, Excel, JPG, TXT —Ç–æ—â–æ).")

# === üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ===
async def save_and_record(file, msg, context, user, is_duplicate):
    ts = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    base_name = file.file_name
    if is_duplicate:
        safe_name = f"{os.path.splitext(base_name)[0]}__DUPLICATE_{ts}{os.path.splitext(base_name)[1]}"
    else:
        safe_name = base_name

    file_path = os.path.join(SAVE_DIR, safe_name)
    os.makedirs(SAVE_DIR, exist_ok=True)

    telegram_file = await context.bot.get_file(file.file_id)
    await telegram_file.download_to_drive(file_path)

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("""
        INSERT INTO telegram_files (file_name, file_path, chat_id, message_id, username, timestamp, status)
        VALUES (%s, %s, %s, %s, %s, %s, 'pending')
    """, (
        base_name, file_path, msg.chat.id, msg.message_id, user, now
    ))

    note = " (–¥—É–±–ª—å)" if is_duplicate else ""
    await msg.reply_text(f"üì• –§–∞–π–ª ¬´{base_name}¬ª{note} –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –æ–ø–ª–∞—Ç—É")
    log(f"‚úîÔ∏è {base_name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ {note}")

# === üß∑ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ" ===
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user.username or "anon"

    if user not in sessions:
        await query.edit_message_text("‚ö†Ô∏è –°–µ—Å—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    file, msg = sessions.pop(user)
    if query.data == "save_again":
        await save_and_record(file, msg, context, user, is_duplicate=True)
        await query.edit_message_text("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ")
    else:
        await query.edit_message_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
        log(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user} —Å–∫–∞—Å—É–≤–∞–≤ –¥—É–±–ª—å")

# === üöÄ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.Document.ALL | filters.ALL, handle_file))
    app.add_handler(CallbackQueryHandler(handle_callback))
    log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()
