# === testbot.py (–ø—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑ ReplyKeyboardMarkup) ===

import os
import logging
from datetime import datetime
from dotenv import dotenv_values
from telegram import (
    Update, ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
import mimetypes
import pymysql

# === üïí –ß–∞—Å –∑–∞–ø—É—Å–∫—É
start_time = datetime.now()

# === üîê –ö–æ–Ω—Ñi–≥—É—Ä–∞—Üi—è
env = dotenv_values("/root/Python/.env")
BOT_TOKEN = env["TESTBOT_TOKEN"]
FALLBACK_CHAT_ID = int(env["FALLBACK_TESTCHAT_ID"])
LOG_FILE = env.get("LOG_FILE_Test", "/root/Python/Paid/test_log.py")

# === üìú –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='[%(asctime)s] %(levelname)s: %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(LOG_FILE, encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# === üë• –†–æ–ªi
ROLE_ADMIN = [161197876]
ROLE_MANAGER = []

# === ‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∏ –¥–æ—Å—Ç—É–ø–Ωi –≤ –≥—Ä—É–ø–∞—Ö
ALLOWED_GROUP_COMMANDS = ["start", "checkbot", "help"]

# === üìã –ö–æ–º–∞–Ω–¥–∏ –∑–∞ —Ä–æ–ª—è–º–∏
ROLE_COMMANDS = {
    "admin":    ["start", "checkbot", "help", "balance", "pay", "menu"],
    "manager":  ["start", "checkbot", "help", "balance"],
    "employee": ["start", "checkbot", "help"]
}

# === üîπ –û—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–ª—å

def get_user_role(user_id: int) -> str:
    if user_id in ROLE_ADMIN:
        return "admin"
    elif user_id in ROLE_MANAGER:
        return "manager"
    else:
        return "employee"

# === ‚åö –î–æ—Å—Ç—É–ø–Ωi –∫–æ–º–∞–Ω–¥–∏

def get_available_commands(user_id: int, chat_type: str) -> list[str]:
    role = get_user_role(user_id)
    all_cmds = ROLE_COMMANDS.get(role, [])
    return [cmd for cmd in all_cmds if chat_type == "private" or cmd in ALLOWED_GROUP_COMMANDS]

# === üìä –ö–ª–∞–≤i–∞—Ç—É—Ä–∞

def get_keyboard_for_chat(user_id: int, chat_type: str):
    commands = get_available_commands(user_id, chat_type)
    buttons = [[f"/{cmd}" for cmd in commands[i:i+2]] for i in range(0, len(commands), 2)]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# === üü¢ /start

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    role = get_user_role(user.id)
    cmds = get_available_commands(user.id, chat.type)

    logger.info(f"‚û°Ô∏è /start –≤i–¥ {user.id} ({user.username}) ‚Äî —Ä–æ–ª—å: {role}, —á–∞—Ç: {chat.type}")
    msg = f"üëã –ü—Ä–∏–≤i—Ç, {user.first_name}!\n–í–∞—à–∞ —Ä–æ–ª—å: *{role}*\n\nüìã –î–æ—Å—Ç—É–ø–Ωi –∫–æ–º–∞–Ω–¥–∏:\n"
    msg += "\n".join(f"/{cmd}" for cmd in cmds)

    await update.message.reply_text(msg, parse_mode="Markdown", reply_markup=get_keyboard_for_chat(user.id, chat.type))

# === üîù /help

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    role = get_user_role(user.id)
    cmds = get_available_commands(user.id, chat.type)

    command_desc = {
        "start": "üëã –ü—Ä–∏–≤i—Ç–∞–Ω–Ω—è i —Ä–æ–ª—å",
        "checkbot": "üü¢ –ü–µ—Ä–µ–≤i—Ä–∫–∞ —Å—Ç–∞–Ω—É –±–æ—Ç–∞",
        "help": "üìñ –¶–µ –º–µ–Ω—é",
        "balance": "üí∞ –ë–∞–ª–∞–Ω—Å",
        "pay": "üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–ª–∞—Çi–∂",
        "menu": "üîπ –ú–µ–Ω—é –¥i–π"
    }

    text = f"üìã –î–æ—Å—Ç—É–ø–Ωi –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è —Ä–æ–ªi *{role}*:\n"
    for cmd in cmds:
        text += f"/{cmd} ‚Äî {command_desc.get(cmd, '‚öôÔ∏è')}\n"

    logger.info(f"üìñ /help –≤i–¥ {user.id} ({user.username}) ‚Äî —Ä–æ–ª—å: {role}, —á–∞—Ç: {chat.type}")
    await update.message.reply_text(text, parse_mode="Markdown")

# === ‚úÖ /checkbot

async def checkbot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat

    uptime = datetime.now() - start_time
    seconds = int(uptime.total_seconds())
    hours, remainder = divmod(seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    uptime_str = f"{hours} –≥–æ–¥ {minutes} —Ö–≤ {seconds} —Å"

    logger.info(f"‚úÖ /checkbot –≤i–¥ {user.id} ({user.username}) ‚Äî {uptime_str}, —á–∞—Ç: {chat.type}")
    await update.message.reply_text(f"‚úÖ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω\nüïí –ê–ø—Ç–∞–π–º: {uptime_str}")

# === –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î ===
def get_db_connection():
    return pymysql.connect(
        host=env["DB_HOST"],
        user=env["DB_USER"],
        password=env["DB_PASSWORD"],
        database=env["DB_DATABASE"],
        cursorclass=pymysql.cursors.DictCursor
    )

# === –î–æ–∑–≤–æ–ª–µ–Ω—ñ —Ç–∏–ø–∏ —Ñ–∞–π–ª—ñ–≤ ===
ALLOWED_EXTENSIONS = {'.pdf', '.xls', '.xlsx', '.txt', '.jpeg', '.jpg', '.png'}

# === SAVE_DIR ===
SAVE_DIR = env.get("SAVE_DIR_test", "/root/Automation/Paid/test")

# === –û–±—Ä–æ–±–∫–∞ /pay —á–µ—Ä–µ–∑ —Ñ–∞–π–ª (caption –∞–±–æ reply) ===
async def handle_payment_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat = update.effective_chat
    message = update.effective_message
    username = user.username or "unknown"

    # üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–ª—ñ
    role = get_user_role(user.id)
    if role not in {"admin", "manager"}:
        logger.warning(f"‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤: {user.id} ({username})")
        return

    # üìå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∫–æ–º–∞–Ω–¥–∞ /pay –∞–±–æ /–æ–ø–ª–∞—Ç–∞
    is_triggered = False
    if message.caption:
        is_triggered = any(x in message.caption.lower() for x in ["/pay", "/–æ–ø–ª–∞—Ç–∞"])
    if message.reply_to_message and message.text and any(x in message.text.lower() for x in ["/pay", "/–æ–ø–ª–∞—Ç–∞"]):
        is_triggered = True
        message = message.reply_to_message  # –±–µ—Ä–µ–º–æ —Ñ–∞–π–ª –∑ reply

    if not is_triggered or not message.document:
        logger.info(f"‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫: {user.id} ({username}) ‚Äî –±–µ–∑ —Ç—Ä–∏–≥–µ—Ä—É –∞–±–æ –±–µ–∑ —Ñ–∞–π–ª—É")
        return

    file = message.document
    original_filename = file.file_name
    ext = os.path.splitext(original_filename)[1].lower()

    # üìé –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–∑–≤–æ–ª–µ–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É
    if ext not in ALLOWED_EXTENSIONS:
        reply = "‚ö†Ô∏è –î–ª—è –æ–ø–ª–∞—Ç–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ: PDF, Excel, TXT, PNG, JPEG"
        await update.message.reply_text(reply)
        logger.warning(f"‚ö†Ô∏è –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: {original_filename}")
        return

    # üßæ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤ –ë–î
    conn = get_db_connection()
    with conn.cursor() as cursor:
        sql = "SELECT * FROM telegram_files WHERE file_name = %s ORDER BY created_at DESC LIMIT 1"
        cursor.execute(sql, (original_filename,))
        existing = cursor.fetchone()

    now_str = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    save_name = original_filename
    if existing:
        base, ext = os.path.splitext(original_filename)
        save_name = f"{base}_copy_{now_str}{ext}"

    os.makedirs(SAVE_DIR, exist_ok=True)
    file_path = os.path.join(SAVE_DIR, save_name)

    # üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
    tg_file = await context.bot.get_file(file.file_id)
    await tg_file.download_to_drive(file_path)
    logger.info(f"üì• –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ñ–∞–π–ª: {file_path}")

    # üßÆ –í—Å—Ç–∞–≤–∫–∞ –≤ –ë–î
    with conn.cursor() as cursor:
        sql = """
        INSERT INTO telegram_files (file_name, file_path, chat_id, message_id, username, timestamp, status, created_at, updated_at)
        VALUES (%s, %s, %s, %s, %s, NOW(), 'pending', NOW(), NOW())
        """
        cursor.execute(sql, (
            original_filename,
            file_path,
            chat.id,
            message.message_id,
            username
        ))
    conn.commit()
    conn.close()

    # üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å —É Telegram
    if existing:
        sent_at = existing['created_at'].strftime("%Y-%m-%d %H:%M")
        reply = (
            f"‚ö†Ô∏è –§–∞–π–ª –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–≤—Å—è {sent_at} "
            f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º @{existing['username']}.\n"
            f"‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑ –Ω–æ–≤–æ—é –Ω–∞–∑–≤–æ—é: {save_name}"
        )
    else:
        reply = "‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ –¥–æ —Å–ø–ª–∞—Ç–∏. –û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É."

    await update.message.reply_text(reply)
    logger.info(f"‚úÖ /pay ‚Äî {user.id} ({username}) ‚Äî —Ñ–∞–π–ª: {original_filename}")

# === üìü –õ–æ–≥ —É—Åi—Ö

async def log_everything(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text if update.message else "N/A"
    logger.info(f"[ALL] {user.id} ({user.username}): {text}")

# === ‚ùå –ü–æ–º–∏–ª–∫–∏

async def error_handler(update, context):
    logger.error(f"‚ùå –ü–û–ú–ò–õ–ö–ê: {context.error}")
    if update and update.message:
        try:
            await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞.")
        except Exception:
            pass

# === üöÄ MAIN

def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("checkbot", checkbot_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.ALL, log_everything))

    app.add_error_handler(error_handler)

    app.add_handler(MessageHandler(filters.Document.ALL & filters.ChatType.GROUPS | filters.ChatType.PRIVATE, handle_payment_file))


    try:
        app.run_polling()
    except Exception as e:
        logger.critical(f"üî• –ë–æ—Ç –∞–≤–∞—Äi–π–Ω–æ –∑—É–ø–∏–Ω–∏–≤—Å—è: {e}")

if __name__ == "__main__":
    main()