# === telegram_bot_payments.py ===
# Telegram-–±–æ—Ç –¥–ª—è –ø—Ä–∏–π–æ–º—É —Ñ–∞–π–ª—ñ–≤, –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –æ–ø–ª–∞—Ç —ñ –≤–∏–≤–æ–¥—É –±–∞–ª–∞–Ω—Å—ñ–≤ –ø–æ —Ä–∞—Ö—É–Ω–∫–∞—Ö –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫—É

import os
import sys
import time
import tempfile
import atexit
import pymysql
import psutil
import requests
import shutil
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv, dotenv_values
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MessageEntity
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CallbackQueryHandler,
    CommandHandler, ContextTypes, filters
)

# === üå± –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ ===
env = dotenv_values("/root/Python/.env")
BOT_TOKEN = env["BOT_TOKEN"]
FALLBACK_CHAT_ID = int(env["FALLBACK_CHAT_ID"])
ADMIN_USER = int(env.get("ADMIN_USER", FALLBACK_CHAT_ID))
ALLOWED_USERS = env.get("ALLOWED_USERS", str(FALLBACK_CHAT_ID))
ALLOWED_USERS_SET = "*" if ALLOWED_USERS == "*" else set(map(int, ALLOWED_USERS.split(",")))

DB_HOST = env["DB_HOST"]
DB_USER = env["DB_USER"]
DB_PASSWORD = env["DB_PASSWORD"]
DB_DATABASE = env["DB_DATABASE"]
SAVE_DIR = env.get("SAVE_DIR", "/root/Python/data/incoming")
DELETED_DIR = os.path.join(SAVE_DIR, "Deleted")
LOG_FILE = env.get("LOG_FILE", "/root/Python/data/logs/from_telegram_log.txt")

# === üìÉ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î ===
conn = pymysql.connect(
    host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_DATABASE,
    charset='utf8mb4', autocommit=True
)
cursor = conn.cursor()
sessions = {}
payment_notified = set()

# === üí≥ –ë–∞–ª–∞–Ω—Å–∏ –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ ===
API_URL = "https://acp.privatbank.ua/api/statements/balance"
accounts = {}
for var in env:
    if var.startswith("API_TOKEN_"):
        fop = var.replace("API_TOKEN_", "")
        token = env[var]
        acc_list = env.get(f"API_–ê–°–°_{fop}", "").split(",")
        accounts[fop] = [{"acc": acc.strip(), "token": token} for acc in acc_list if acc.strip()]


def get_latest_balance(account, token):
    today = datetime.now().date()
    headers = {"User-Agent": "PythonClient", "token": token, "Content-Type": "application/json;charset=cp1251"}

    def fetch(date):
        params = {"acc": account, "startDate": date.strftime("%d-%m-%Y"), "endDate": date.strftime("%d-%m-%Y")}
        try:
            response = requests.get(API_URL, headers=headers, params=params)
            if response.status_code != 200:
                return None, f"‚ùå {response.status_code}: {response.text}", None
            data = response.json()
            if data["status"] == "SUCCESS" and data.get("balances"):
                return data["balances"][0], None, datetime.combine(date, datetime.max.time().replace(microsecond=0))
        except Exception as e:
            return None, str(e), None
        return None, None, None

    bal, err, used = fetch(today)
    if bal: return bal, None, used
    yesterday = today - timedelta(days=1)
    bal, err, used = fetch(yesterday)
    if bal: return bal, None, used
    return None, err or "‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", None

def format_amount(value):
    try:
        parts = f"{value:,.2f}".split(".")
        int_part = parts[0].replace(",", "\xa0")  # –Ω–µ-—Ä–æ–∑—Ä–∏–≤–Ω–∏–π –ø—Ä–æ–±—ñ–ª
        return f"{int_part},{parts[1]}"
    except:
        return str(value)


def build_balance_report():
    total_uah = 0
    lines = []
    for fop, acc_list in accounts.items():
        for acc_info in acc_list:
            bal, err, dt_used = get_latest_balance(acc_info["acc"], acc_info["token"])
            if err:
                lines.append(f"*{fop}*: {err}")
            elif bal:
                try:
                    value = float(bal["balanceOut"])
                    if value == 0:
                        continue
                    formatted = format_amount(value)
                    lines.append(f"*{fop}* (üïì {dt_used.strftime('%d.%m.%Y %H:%M')})\nüí≥ `{bal['acc']}`\nüí∞ *{formatted} {bal['currency']}*")
                    if bal["currency"] == "UAH":
                        total_uah += value
                except Exception as e:
                    lines.append(f"*{fop}*: ‚ö†Ô∏è {e}")
    if total_uah:
        lines.append(f"\nüìä *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ (UAH)*: *{format_amount(total_uah)} –≥—Ä–Ω*")
    return "\n\n".join(lines)


# === üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É ===
def is_allowed(uid):
    return ALLOWED_USERS_SET == "*" or uid in ALLOWED_USERS_SET

# === ü™µ –õ–æ–≥–∏ ===
def log(msg):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{ts}] {msg}"
    print(line)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")


# === üß† –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –æ–ø–ª–∞—Ç–∏ ===
async def check_paid_loop(app):
    while True:
        cursor.execute("SELECT id, file_name, chat_id, message_id FROM telegram_files WHERE status = 'paid' ORDER BY updated_at DESC LIMIT 20")
        for row in cursor.fetchall():
            fid, fname, chat_id, msg_id = row
            if fid not in payment_notified:
                try:
                    await app.bot.send_message(chat_id=chat_id, reply_to_message_id=msg_id, text=f"‚úÖ –§–∞–π–ª *{fname}* –æ–ø–ª–∞—á–µ–Ω–æ.", parse_mode="Markdown")
                    payment_notified.add(fid)
                    log(f"üí∏ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ –æ–ø–ª–∞—Ç—É: {fname}")
                except Exception as e:
                    log(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É {fname}: {e}")
        await asyncio.sleep(10)

# === üóëÔ∏è –û–±—Ä–æ–±–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===
async def handle_deleted(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg_id = update.message_id
    chat_id = update.effective_chat.id
    cursor.execute("SELECT id, file_name, file_path, status FROM telegram_files WHERE chat_id=%s AND message_id=%s", (chat_id, msg_id))
    row = cursor.fetchone()
    if row:
        fid, fname, fpath, status = row
        if status == 'paid':
            await context.bot.send_message(chat_id=chat_id, text=f"üîí –§–∞–π–ª *{fname}* –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.", parse_mode="Markdown")
            return
        cursor.execute("UPDATE telegram_files SET status='deleted', deleted_by='user', deleted_at=NOW() WHERE id=%s", (fid,))
        os.makedirs(DELETED_DIR, exist_ok=True)
        try:
            shutil.move(fpath, os.path.join(DELETED_DIR, os.path.basename(fpath)))
            log(f"üóëÔ∏è –§–∞–π–ª {fname} –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É Deleted")
        except Exception as e:
            log(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —Ñ–∞–π–ª {fname}: {e}")
        await context.bot.send_message(chat_id=chat_id, text=f"üóëÔ∏è –§–∞–π–ª *{fname}* –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É –∞—Ä—Ö—ñ–≤.", parse_mode="Markdown")

# === üì• –ü—Ä–∏–π–æ–º –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, –¥—É–±–ª—ñ–∫–∞—Ç–∏ ===
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return

    # === –ö–æ–º–∞–Ω–¥–∞ –≤ caption
    caption = msg.caption.lower() if msg.caption else ""
    is_pay_command = "/–æ–ø–ª–∞—Ç–∞" in caption or "/pay" in caption

    # === –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –∞–ª–µ —î reply –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç
    file_msg = None
    if not is_pay_command and msg.reply_to_message:
        replied = msg.reply_to_message
        rep_caption = replied.caption.lower() if replied.caption else ""
        if "/–æ–ø–ª–∞—Ç–∞" in rep_caption or "/pay" in rep_caption:
            is_pay_command = True
            file_msg = replied

    # === –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª ‚Äî –∞–±–æ —Å–∞–º –¥–æ–∫—É–º–µ–Ω—Ç, –∞–±–æ –∑ reply
    if is_pay_command:
        file_msg = file_msg or msg
        user = file_msg.from_user.username or "anon"

        if file_msg.document:
            file = file_msg.document
            orig_name = file.file_name
            cursor.execute("SELECT timestamp, status FROM telegram_files WHERE file_name=%s AND username=%s ORDER BY id DESC LIMIT 1", (orig_name, user))
            prev = cursor.fetchone()
            if prev:
                prev_time, prev_status = prev
                if prev_status == "paid":
                    await msg.reply_text("üîí –¶–µ–π —Ñ–∞–π–ª –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
                    return
                sessions[user] = (file, file_msg)
                keyboard = [
                    [InlineKeyboardButton("‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ —â–µ —Ä–∞–∑", callback_data="save_again"),
                     InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
                ]
                await msg.reply_text(f"‚ö†Ô∏è –§–∞–π–ª ¬´{orig_name}¬ª –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–≤—Å—è {prev_time.strftime('%Y-%m-%d %H:%M:%S')}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è?", reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                await save_and_record(file, file_msg, context, user, is_duplicate=False)
        else:
            await msg.reply_text("üö´ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ù–∞–¥—ñ—à–ª—ñ—Ç—å PDF, Excel, TXT –∞–±–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —è–∫ *–¥–æ–∫—É–º–µ–Ω—Ç*, –∞ –Ω–µ —Ñ–æ—Ç–æ/–≤–∫–ª–∞–¥–µ–Ω–Ω—è.", parse_mode="Markdown")

# === üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ===
async def save_and_record(file, msg, context, user, is_duplicate):
    ts = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    base_name = file.file_name
    if is_duplicate:
        safe_name = f"{os.path.splitext(base_name)[0]}__DUPLICATE_{ts}{os.path.splitext(base_name)[1]}"
    else:
        safe_name = base_name

    file_path = os.path.join(SAVE_DIR, safe_name)
    os.makedirs(SAVE_DIR, exist_ok=True)
    telegram_file = await context.bot.get_file(file.file_id)
    await telegram_file.download_to_drive(file_path)

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("""
        INSERT INTO telegram_files (file_name, file_path, chat_id, message_id, username, timestamp, status)
        VALUES (%s, %s, %s, %s, %s, %s, 'pending')
    """, (base_name, file_path, msg.chat.id, msg.message_id, user, now))

    note = " (–¥—É–±–ª—å)" if is_duplicate else ""
    await msg.reply_text(f"üì• –§–∞–π–ª ¬´{base_name}¬ª{note} –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –æ–ø–ª–∞—Ç—É")
    log(f"‚úîÔ∏è {base_name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ {note}")

# === üîò –ö–Ω–æ–ø–∫–∏ –¥—É–±–ª—è ===
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user.username or "anon"
    if user not in sessions:
        await query.edit_message_text("‚ö†Ô∏è –°–µ—Å—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    file, msg = sessions.pop(user)
    if query.data == "save_again":
        await save_and_record(file, msg, context, user, is_duplicate=True)
        await query.edit_message_text("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ")
    else:
        await query.edit_message_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
        log(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user} —Å–∫–∞—Å—É–≤–∞–≤ –¥—É–±–ª—å")

# === üìä –ö–æ–º–∞–Ω–¥–∞ /balance ===
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    print(f"[DEBUG] balance –≤—ñ–¥ {uid}")
    if uid != ADMIN_USER:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    msg = build_balance_report()
    print(f"[DEBUG] –∑–≤—ñ—Ç –±–∞–ª–∞–Ω—Å—É:\n{msg}")
    if not msg.strip():
        msg = "‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–ª–∞ –ø–æ—Ä–æ–∂–Ω—è."
    await update.message.reply_text(msg, parse_mode="Markdown")


# === üöÄ –°—Ç–∞—Ä—Ç ===
if __name__ == "__main__":
    from telegram import BotCommand, BotCommandScopeChat, BotCommandScopeDefault
    from apscheduler.schedulers.asyncio import AsyncIOScheduler

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(CommandHandler("balance", balance))
    log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")

    # === ‚úÖ –û–±'—î–¥–Ω–∞–Ω–∏–π post_start
    async def post_start(app):
        print("üëâ post_start –∑–∞–ø—É—â–µ–Ω–æ")
        log("üöÄ post_start –∑–∞–ø—É—â–µ–Ω–æ")

        # üïô –ê–≤—Ç–æ–±–∞–ª–∞–Ω—Å
        scheduler = AsyncIOScheduler()

        async def send_daily_balance():
            msg = build_balance_report()
            if not msg.strip():
                msg = "‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±—É–ª–∞ –ø–æ—Ä–æ–∂–Ω—è."
            try:
                await app.bot.send_message(chat_id=ADMIN_USER, text=msg, parse_mode="Markdown")
                log("üì§ –ê–≤—Ç–æ–±–∞–ª–∞–Ω—Å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∞–¥–º—ñ–Ω—É")
            except Exception as e:
                log(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∞–≤—Ç–æ–±–∞–ª–∞–Ω—Å—É: {e}")
                print(f"[ERROR] –ê–≤—Ç–æ–±–∞–ª–∞–Ω—Å: {e}")

        scheduler.add_job(send_daily_balance, "cron", hour=10, minute=0)
        scheduler.start()

        # üß† –¶–∏–∫–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–ø–ª–∞—Ç
        asyncio.create_task(check_paid_loop(app))

        # üìé –ö–æ–º–∞–Ω–¥–∏
        try:
            await app.bot.set_my_commands([
                BotCommand("pay", "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª –¥–ª—è –æ–ø–ª–∞—Ç–∏")
            ], scope=BotCommandScopeDefault())
            await app.bot.set_my_commands([
                BotCommand("pay", "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–∞–π–ª –¥–ª—è –æ–ø–ª–∞—Ç–∏"),
                BotCommand("balance", "–ó–∞–ª–∏—à–∫–∏ –Ω–∞ —Ä–∞—Ö—É–Ω–∫–∞—Ö")
            ], scope=BotCommandScopeChat(chat_id=ADMIN_USER))
            log("‚úÖ –ö–æ–º–∞–Ω–¥–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            log(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥: {e}")
            print(f"[ERROR] –ö–æ–º–∞–Ω–¥–∏: {e}")

    app.post_init = post_start
    app.run_polling()
