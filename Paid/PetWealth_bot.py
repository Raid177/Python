# === telegram_bot_payments.py ===
# –í–∫–ª—é—á–∞—î: –æ–±—Ä–æ–±–∫—É —Ñ–∞–π–ª—ñ–≤ –∑ /–æ–ø–ª–∞—Ç–∞, –ë–î, –∫–Ω–æ–ø–∫–∏, –±–∞–ª–∞–Ω—Å, –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å—É, –≤–∏–¥–∞–ª–µ–Ω–Ω—è

import os
import sys
import time
import tempfile
import atexit
import pymysql
import psutil
import requests
import shutil
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MessageEntity, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, MessageHandler, CallbackQueryHandler,
    CommandHandler, ContextTypes, filters
)

from dotenv import dotenv_values
env = dotenv_values("/root/Python/.env")

BOT_TOKEN = env["BOT_TOKEN"]
FALLBACK_CHAT_ID = int(env["FALLBACK_CHAT_ID"])
ADMIN_USER = int(env.get("ADMIN_USER", FALLBACK_CHAT_ID))
ALLOWED_USERS = env.get("ALLOWED_USERS", str(FALLBACK_CHAT_ID))

if ALLOWED_USERS == "*":
    ALLOWED_USERS_SET = "*"
else:
    ALLOWED_USERS_SET = set(map(int, ALLOWED_USERS.split(",")))

DB_HOST = env["DB_HOST"]
DB_USER = env["DB_USER"]
DB_PASSWORD = env["DB_PASSWORD"]
DB_DATABASE = env["DB_DATABASE"]
SAVE_DIR = env.get("SAVE_DIR", "C:/Users/la/OneDrive/–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª/–ù–∞ –æ–ø–ª–∞—Ç—É!")
DELETED_DIR = os.path.join(SAVE_DIR, "Deleted")
LOG_FILE = env.get("LOG_FILE", "C:/Users/la/OneDrive/Pet Wealth/Analytics/Python_script/Paid/from_telegram_log.txt")

print("ENV BOT_TOKEN:", repr(env.get("BOT_TOKEN")))
print("SAVE_DIR:", env.get("SAVE_DIR"))
print("LOG_FILE:", env.get("LOG_FILE"))


# === üíæ –ë–î ===
conn = pymysql.connect(
    host=DB_HOST,
    user=DB_USER,
    password=DB_PASSWORD,
    database=DB_DATABASE,
    charset='utf8mb4',
    autocommit=True
)
cursor = conn.cursor()
sessions = {}
payment_notified = set()

# === ‚ùå –í–∏–º–∫–Ω–µ–Ω–æ –∫—ñ–ª–µ—Ä –ø—Ä–æ—Ü–µ—Å—ñ–≤ ===
# def kill_duplicates():
#     time.sleep(2)
#     current_pid = os.getpid()
#     this_name = os.path.basename(sys.argv[0])
#     for p in psutil.process_iter(['pid', 'name', 'exe', 'cmdline']):
#         try:
#             cmdline = p.info.get('cmdline') or []
#             if isinstance(cmdline, list) and this_name in ' '.join(cmdline) and p.pid != current_pid:
#                 p.kill()
#                 print(f"üõë –í–±–∏—Ç–æ –¥—É–±–ª—å–æ–≤–∞–Ω–∏–π –ø—Ä–æ—Ü–µ—Å {this_name} (PID {p.pid})")
#         except Exception as e:
#             print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ PID {p.pid}: {e}")
# kill_duplicates()

# === üìã –ë–∞–ª–∞–Ω—Å–∏ ===
API_URL = "https://acp.privatbank.ua/api/statements/balance"
accounts = {}
for var in os.environ:
    if var.startswith("API_TOKEN_"):
        fop = var.replace("API_TOKEN_", "")
        token = os.getenv(var)
        acc_list = os.getenv(f"API_–ê–°–°_{fop}", "").split(",")
        acc_list = [acc.strip() for acc in acc_list if acc.strip()]
        accounts[fop] = [{"acc": acc, "token": token} for acc in acc_list]

def get_today_balance(account, token):
    today = datetime.now().date()
    headers = {"User-Agent": "PythonClient", "token": token, "Content-Type": "application/json;charset=cp1251"}
    params = {"acc": account, "startDate": today.strftime("%d-%m-%Y"), "endDate": today.strftime("%d-%m-%Y")}
    try:
        response = requests.get(API_URL, headers=headers, params=params)
        if response.status_code != 200:
            return None, f"‚ùå –ü–æ–º–∏–ª–∫–∞ {response.status_code}: {response.text}"
        data = response.json()
        if data["status"] != "SUCCESS" or "balances" not in data:
            return None, "‚ö†Ô∏è –î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ —Å—Ç–∞—Ç—É—Å –Ω–µ SUCCESS."
        return data["balances"][0], None
    except Exception as e:
        return None, f"‚ùó –í–∏–Ω—è—Ç–æ–∫: {str(e)}"

def format_amount(value):
    try:
        parts = f"{value:,.2f}".split(".")
        int_part = parts[0].replace(",", "¬†")
        return f"{int_part},{parts[1]}"
    except:
        return str(value)

def build_balance_report():
    total_uah = 0
    report_lines = []
    for fop, acc_list in accounts.items():
        for acc_info in acc_list:
            bal, err = get_today_balance(acc_info["acc"], acc_info["token"])
            if err:
                report_lines.append(f"*{fop}*: {err}")
            elif bal:
                try:
                    value = float(bal["balanceOut"])
                    if value == 0:
                        continue
                    formatted = format_amount(value)
                    line = f"*{fop}*\nüí≥ `{bal['acc']}`\nüí∞ *{formatted} {bal['currency']}*"
                    report_lines.append(line)
                    if bal["currency"] == "UAH":
                        total_uah += value
                except Exception as e:
                    report_lines.append(f"*{fop}*: ‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")
    if total_uah:
        report_lines.append(f"\nüìä *–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ (UAH)*: *{format_amount(total_uah)} –≥—Ä–Ω*")
    return "\n\n".join(report_lines)


# === üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É ===
def is_allowed(uid):
    return ALLOWED_USERS_SET == "*" or uid in ALLOWED_USERS_SET

# === ü™µ –õ–æ–≥–∏ ===
def log(msg):
    ts = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{ts}] {msg}"
    print(line)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")


# === üß† –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –æ–ø–ª–∞—Ç–∏ ===
async def check_paid_loop(app):
    while True:
        cursor.execute("SELECT id, file_name, chat_id, message_id FROM telegram_files WHERE status = 'paid' ORDER BY updated_at DESC LIMIT 20")
        for row in cursor.fetchall():
            fid, fname, chat_id, msg_id = row
            if fid not in payment_notified:
                try:
                    await app.bot.send_message(chat_id=chat_id, reply_to_message_id=msg_id, text=f"‚úÖ –§–∞–π–ª *{fname}* –æ–ø–ª–∞—á–µ–Ω–æ.", parse_mode="Markdown")
                    payment_notified.add(fid)
                    log(f"üí∏ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ –ø—Ä–æ –æ–ø–ª–∞—Ç—É: {fname}")
                except Exception as e:
                    log(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É {fname}: {e}")
        await asyncio.sleep(10)

# === üóëÔ∏è –û–±—Ä–æ–±–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===
async def handle_deleted(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg_id = update.message_id
    chat_id = update.effective_chat.id
    cursor.execute("SELECT id, file_name, file_path, status FROM telegram_files WHERE chat_id=%s AND message_id=%s", (chat_id, msg_id))
    row = cursor.fetchone()
    if row:
        fid, fname, fpath, status = row
        if status == 'paid':
            await context.bot.send_message(chat_id=chat_id, text=f"üîí –§–∞–π–ª *{fname}* –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.", parse_mode="Markdown")
            return
        cursor.execute("UPDATE telegram_files SET status='deleted', deleted_by='user', deleted_at=NOW() WHERE id=%s", (fid,))
        os.makedirs(DELETED_DIR, exist_ok=True)
        try:
            shutil.move(fpath, os.path.join(DELETED_DIR, os.path.basename(fpath)))
            log(f"üóëÔ∏è –§–∞–π–ª {fname} –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É Deleted")
        except Exception as e:
            log(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ —Ñ–∞–π–ª {fname}: {e}")
        await context.bot.send_message(chat_id=chat_id, text=f"üóëÔ∏è –§–∞–π–ª *{fname}* –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ —É –∞—Ä—Ö—ñ–≤.", parse_mode="Markdown")

# === üì• –ü—Ä–∏–π–æ–º –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è, –¥—É–±–ª—ñ–∫–∞—Ç–∏ ===
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return
    caption = msg.caption.lower() if msg.caption else ""
    is_pay_command = "/–æ–ø–ª–∞—Ç–∞" in caption or "/pay" in caption
    if not is_pay_command and msg.reply_to_message:
        for ent in msg.reply_to_message.entities or []:
            if ent.type == MessageEntity.BOT_COMMAND:
                command = msg.reply_to_message.text[ent.offset: ent.offset + ent.length]
                if command.lower() in ("/–æ–ø–ª–∞—Ç–∞", "/pay"):
                    is_pay_command = True
                    break
    if not is_pay_command:
        return

    user = msg.from_user.username or "anon"
    if msg.document:
        file = msg.document
        orig_name = file.file_name
        cursor.execute("SELECT timestamp, status FROM telegram_files WHERE file_name=%s AND username=%s ORDER BY id DESC LIMIT 1", (orig_name, user))
        prev = cursor.fetchone()
        if prev:
            prev_time, prev_status = prev
            if prev_status == "paid":
                await msg.reply_text("üîí –¶–µ–π —Ñ–∞–π–ª –≤–∂–µ –æ–ø–ª–∞—á–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω–µ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
                return
            sessions[user] = (file, msg)
            keyboard = [[InlineKeyboardButton("‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏ —â–µ —Ä–∞–∑", callback_data="save_again"), InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]]
            await msg.reply_text(f"‚ö†Ô∏è –§–∞–π–ª ¬´{orig_name}¬ª –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–≤—Å—è {prev_time.strftime('%Y-%m-%d %H:%M:%S')}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è?", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await save_and_record(file, msg, context, user, is_duplicate=False)
    else:
        await msg.reply_text("üö´ –¢–∏–ø —Ñ–∞–π–ª—É –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è. –ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –ª–∏—à–µ —è–∫ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, Excel, JPG, TXT —Ç–æ—â–æ).")

# === üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É ===
async def save_and_record(file, msg, context, user, is_duplicate):
    ts = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    base_name = file.file_name
    if is_duplicate:
        safe_name = f"{os.path.splitext(base_name)[0]}__DUPLICATE_{ts}{os.path.splitext(base_name)[1]}"
    else:
        safe_name = base_name

    file_path = os.path.join(SAVE_DIR, safe_name)
    os.makedirs(SAVE_DIR, exist_ok=True)
    telegram_file = await context.bot.get_file(file.file_id)
    await telegram_file.download_to_drive(file_path)

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("""
        INSERT INTO telegram_files (file_name, file_path, chat_id, message_id, username, timestamp, status)
        VALUES (%s, %s, %s, %s, %s, %s, 'pending')
    """, (base_name, file_path, msg.chat.id, msg.message_id, user, now))

    note = " (–¥—É–±–ª—å)" if is_duplicate else ""
    await msg.reply_text(f"üì• –§–∞–π–ª ¬´{base_name}¬ª{note} –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –æ–ø–ª–∞—Ç—É")
    log(f"‚úîÔ∏è {base_name} –∑–±–µ—Ä–µ–∂–µ–Ω–æ {note}")

# === üîò –ö–Ω–æ–ø–∫–∏ –¥—É–±–ª—è ===
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user.username or "anon"
    if user not in sessions:
        await query.edit_message_text("‚ö†Ô∏è –°–µ—Å—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return
    file, msg = sessions.pop(user)
    if query.data == "save_again":
        await save_and_record(file, msg, context, user, is_duplicate=True)
        await query.edit_message_text("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ")
    else:
        await query.edit_message_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
        log(f"üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user} —Å–∫–∞—Å—É–≤–∞–≤ –¥—É–±–ª—å")

# === üìä –ö–æ–º–∞–Ω–¥–∞ /balance ===
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if uid != ADMIN_USER:
        return await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    msg = build_balance_report()
    await update.message.reply_text(msg, parse_mode="Markdown")

# === üöÄ –°—Ç–∞—Ä—Ç ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(CommandHandler("balance", balance))
    # app.add_handler(DeletedMessageHandler(handle_deleted))  # –í–∏–¥–∞–ª–µ–Ω–æ ‚Äî –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è —É PTB
    log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")

    async def post_start(app):
        asyncio.create_task(check_paid_loop(app))

    app.post_init = post_start
    app.run_polling()
