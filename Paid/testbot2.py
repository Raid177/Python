# === testbot.py ===

# üì¶ –Ü–º–ø–æ—Ä—Ç–∏
import os
import logging
from datetime import datetime
from dotenv import dotenv_values
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# üïí –ß–∞—Å –∑–∞–ø—É—Å–∫—É ‚Äî –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∞–ø—Ç–∞–π–º—É
start_time = datetime.now()

# üéõÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞)
main_keyboard = ReplyKeyboardMarkup(
    [["/start", "/checkbot"], ["/help", "/balance"]],
    resize_keyboard=True
)

# === üîê –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ .env ===
env = dotenv_values("/root/Python/.env")
BOT_TOKEN = env["TESTBOT_TOKEN"]
FALLBACK_CHAT_ID = int(env["FALLBACK_TESTCHAT_ID"])
LOG_FILE_Test = env.get("LOG_FILE_Test", "/root/Python/Paid/test_log.py")

# === üë• –†–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ===
ROLE_ADMIN = [161197876]
ROLE_MANAGER = []

# === üìú –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='[%(asctime)s] %(levelname)s: %(message)s',
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(LOG_FILE_Test, encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ ===
async def error_handler(update, context):
    logger.error(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {context.error}")
    if update:
        try:
            await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∂–µ –∑–Ω–∞—î.")
        except Exception:
            pass  # —è–∫—â–æ –Ω–∞–≤—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º–æ–∂–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏

# === üîç –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def get_user_role(user_id: int) -> str:
    if user_id in ROLE_ADMIN:
        return "admin"
    elif user_id in ROLE_MANAGER:
        return "manager"
    else:
        return "employee"

# === üü¢ /start ‚Äî –≤–∏–≤—ñ–¥ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    role = get_user_role(user.id)
    message = f"üëã –ü—Ä–∏–≤—ñ—Ç, {user.first_name}! –í–∞—à–∞ —Ä–æ–ª—å: {role}"
    logger.info(f"/start –≤—ñ–¥ {user.id} ({user.username}) ‚Äî —Ä–æ–ª—å: {role}")
    await update.message.reply_text(message, reply_markup=main_keyboard)

# === ‚úÖ /checkbot ‚Äî –æ–¥—Ä–∞–∑—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Å—Ç–∞—Ç—É—Å–æ–º —ñ –∞–ø—Ç–∞–π–º–æ–º
async def checkbot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uptime = datetime.now() - start_time
    seconds = int(uptime.total_seconds())
    hours, remainder = divmod(seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    uptime_str = f"{hours} –≥–æ–¥ {minutes} —Ö–≤ {seconds} —Å"

    text = f"‚úÖ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω\n‚è± –ê–ø—Ç–∞–π–º: {uptime_str}"
    logger.info(f"/checkbot –≤—ñ–¥ {update.effective_user.id} ({update.effective_user.username}) ‚Äî {uptime_str}")
    await update.message.reply_text(text)

# === ‚å®Ô∏è /checkbutton ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î –∫–Ω–æ–ø–∫—É "–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–æ—Ç–∞"
async def checkbutton_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup(
        [[InlineKeyboardButton("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–æ—Ç–∞", callback_data="check_bot")]]
    )
    await update.message.reply_text(
        "–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –±–æ—Ç–∞:",
        reply_markup=keyboard
    )
    logger.info(f"/checkbutton –≤—ñ–¥ {update.effective_user.id} ({update.effective_user.username})")

# === üì© –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É
async def handle_check_bot_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    uptime = datetime.now() - start_time
    seconds = int(uptime.total_seconds())
    hours, remainder = divmod(seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    uptime_str = f"{hours} –≥–æ–¥ {minutes} —Ö–≤ {seconds} —Å"

    text = f"‚úÖ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω\n‚è± –ê–ø—Ç–∞–π–º: {uptime_str}"
    logger.info(f"üîò check_bot –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ –≤—ñ–¥ {query.from_user.id} ({query.from_user.username}) ‚Äî {uptime_str}")
    await query.edit_message_text(text=text)

# === üöÄ MAIN ‚Äî —Ç–æ—á–∫–∞ –≤—Ö–æ–¥—É
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ TEST –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # ‚úÖ –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("checkbot", checkbot_command))         # –æ–¥—Ä–∞–∑—É —Å—Ç–∞—Ç—É—Å
    app.add_handler(CommandHandler("checkbutton", checkbutton_command))   # –∫–Ω–æ–ø–∫–∞
    app.add_handler(CallbackQueryHandler(handle_check_bot_callback, pattern="^check_bot$"))

    app.run_polling()

# üß™ –ó–∞–ø—É—Å–∫
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ TEST –±–æ—Ç–∞...")
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("checkbot", checkbot_command))
    app.add_handler(CommandHandler("checkbutton", checkbutton_command))
    app.add_handler(CallbackQueryHandler(handle_check_bot_callback, pattern="^check_bot$"))

    app.add_error_handler(error_handler)

    try:
        app.run_polling()
    except Exception as e:
        logger.critical(f"üî• –ë–æ—Ç –∞–≤–∞—Ä—ñ–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É: {e}")

if __name__ == "__main__":
    main()
