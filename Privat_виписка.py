import requests
from dotenv import load_dotenv
import os
import mysql.connector
from datetime import datetime, timedelta

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –ù–æ–º–µ—Ä–∏ —Ä–∞—Ö—É–Ω–∫—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –§–û–ü
accounts_fop1 = ['UA973052990000026002025035545']
accounts_fop2 = ['UA173375460000026000045200003']

# –¢–æ–∫–µ–Ω–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –§–û–ü
tokens = {
    'FOP1': os.getenv('API_TOKEN_LOV'),
    'FOP2': os.getenv('API_TOKEN_ZVO'),
}

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
conn = mysql.connector.connect(host=os.getenv('DB_HOST'), user=os.getenv('DB_USER'), password=os.getenv('DB_PASSWORD'), database=os.getenv('DB_DATABASE'))
cursor = conn.cursor()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
def fetch_and_save_transactions(account_number, token, start_date, end_date):
    url = 'https://acp.privatbank.ua/api/statements/transactions'
    headers = {
        'User-Agent': 'PythonClient',
        'token': token,
        'Content-Type': 'application/json;charset=cp1251'
    }
    params = {
        'acc': account_number,
        'startDate': start_date,
        'endDate': end_date,
        'limit': '50'
    }

    next_page_id = None
    while True:
        if next_page_id:
            params['followId'] = next_page_id
        
        response = requests.get(url, headers=headers, params=params)
        if response.status_code == 200:
            data = response.json()
            if data.get('status') == 'SUCCESS':
                transactions = data.get('transactions', [])
                if transactions:
                    for transaction in transactions:
                        try:
                            # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞—Ç
                            if 'DATE_TIME_DAT_OD_TIM_P' in transaction and transaction['DATE_TIME_DAT_OD_TIM_P']:
                                transaction['DATE_TIME_DAT_OD_TIM_P'] = datetime.strptime(transaction['DATE_TIME_DAT_OD_TIM_P'], '%d.%m.%Y %H:%M:%S')
                            else:
                                transaction['DATE_TIME_DAT_OD_TIM_P'] = None
                            
                            if 'DAT_OD' in transaction and transaction['DAT_OD']:
                                transaction['DAT_OD'] = datetime.strptime(transaction['DAT_OD'], '%d.%m.%Y').date()
                            else:
                                transaction['DAT_OD'] = None
                        except Exception as e:
                            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞—Ç–∏/—á–∞—Å—É: {e}")
                            continue
                        
                        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –≤ –ë–î
                        cursor.execute(""" 
                            INSERT INTO bnk_trazact_prvt (%s) 
                            VALUES (%s)
                            ON DUPLICATE KEY UPDATE 
                            DATE_TIME_DAT_OD_TIM_P = VALUES(DATE_TIME_DAT_OD_TIM_P),
                            DAT_OD = VALUES(DAT_OD)
                        """ % (
                            ', '.join(transaction.keys()),
                            ', '.join(['%s'] * len(transaction))
                        ), tuple(transaction.values()))
                    
                    conn.commit()
                    print(f"‚úÖ –ü–∞—á–∫–∞ –∑ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É {account_number} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É –ë–î")
                else:
                    print(f"‚ùå –ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É {account_number}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –ø–∞—á–∫–∏
                if data.get('exist_next_page'):
                    next_page_id = data.get('next_page_id')
                    print(f"üîÑ –ù–∞—Å—Ç—É–ø–Ω–∞ –ø–∞—á–∫–∞ –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É {account_number}: {next_page_id}")
                else:
                    print(f"‚úÖ –£—Å—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É {account_number} –æ—Ç—Ä–∏–º–∞–Ω–æ.")
                    break
            else:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É {account_number}: {data.get('message')}")
                break
        else:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ {response.status_code} –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É {account_number}: {response.text}")
            break

# –ü–µ—Ä–µ–±—ñ—Ä —Ä–∞—Ö—É–Ω–∫—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –§–û–ü
for fop, token in tokens.items():
    print(f"üîë –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç–æ–∫–µ–Ω –¥–ª—è {fop}")
    for account in (accounts_fop1 if fop == 'FOP1' else accounts_fop2):
        print(f"üìÖ –û–¥–µ—Ä–∂–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É {account}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–∞—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É
        cursor.execute("""
            SELECT MAX(DATE_TIME_DAT_OD_TIM_P)
            FROM bnk_trazact_prvt
            WHERE AUT_MY_ACC = %s
        """, (account,))
        last_date = cursor.fetchone()[0]

        print(f"üîç –†–∞—Ö—É–Ω–æ–∫: {account}, –ó–Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞: {last_date}")

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç—É
        if last_date:
            start_date = (last_date - timedelta(days=1)).strftime('%d-%m-%Y')
        else:
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤—É –¥–∞—Ç—É –Ω–∞ 01.07.2024
            start_date = '01-07-2024'

        # –î–∞—Ç–∞ —Ñ—ñ–Ω—ñ—à—É - –ø–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ 'dd-MM-yyyy'
        end_date = datetime.now().strftime('%d-%m-%Y')

        print(f"üìÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç—É –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É {account}: {start_date}")
        print(f"üìÖ –î–∞—Ç–∞ —Ñ—ñ–Ω—ñ—à—É –¥–ª—è —Ä–∞—Ö—É–Ω–∫—É {account}: {end_date}")



        # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π
        fetch_and_save_transactions(account, token, start_date, end_date)

# –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î
cursor.close()
conn.close()
