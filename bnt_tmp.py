import requests
import json
import time
import datetime
import mysql.connector
from mysql.connector import Error
from dotenv import load_dotenv
import os

# üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –∑ .env
load_dotenv()

# üîπ API Binotel
API_URL = "https://api.binotel.com/api/4.0/stats/list-of-calls-for-period.json"
API_KEY = os.getenv("BNT_KEY")
API_SECRET = os.getenv("BNT_SECRET")

# üîπ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è MySQL
DB_CONFIG = {
    "host": os.getenv("DB_HOST"),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "database": os.getenv("DB_DATABASE")
}

# üîπ –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é –¥–∞—Ç—É –≤ –ë–î
def get_last_date_from_db():
    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        cursor = connection.cursor()
        cursor.execute("SELECT MAX(startTime) FROM bnt_calls")
        last_date = cursor.fetchone()[0]
        return last_date.date() - datetime.timedelta(days=1) if last_date else datetime.date.today()
    except Error as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ MySQL: {e}")
        return datetime.date.today()
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

# üîπ –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∑ API
def get_calls(start_time, stop_time):
    payload = {
        "startTime": int(start_time),
        "stopTime": int(stop_time),
        "key": API_KEY,
        "secret": API_SECRET
    }
    
    print(f"üì° –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç: {payload}")
    try:
        response = requests.post(API_URL, json=payload, headers={"Content-Type": "application/json"}, timeout=10)
        print(f"üîπ –ö–æ–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API: {response.status_code}")
        return response.json() if response.status_code == 200 else None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
        return None

# üîπ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ —É –ë–î
def save_to_db(call_data):
    if not isinstance(call_data, dict) or "callDetails" not in call_data:
        print(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API: {json.dumps(call_data, indent=4, ensure_ascii=False)}")
        return 0

    call_details = call_data.get("callDetails", {})
    
    if not isinstance(call_details, dict):
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: callDetails –Ω–µ —î —Å–ª–æ–≤–Ω–∏–∫–æ–º! callDetails={call_details}")
        return 0

    try:
        connection = mysql.connector.connect(**DB_CONFIG)
        cursor = connection.cursor()
        insert_query = """
        INSERT INTO bnt_calls (
            companyID, generalCallID, startTime, callType, internalNumber,
            internalAdditionalData, externalNumber, waitsec, billsec,
            disposition, isNewCall
        ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        ON DUPLICATE KEY UPDATE
            startTime=VALUES(startTime), callType=VALUES(callType),
            internalNumber=VALUES(internalNumber), internalAdditionalData=VALUES(internalAdditionalData),
            externalNumber=VALUES(externalNumber), waitsec=VALUES(waitsec),
            billsec=VALUES(billsec), disposition=VALUES(disposition),
            isNewCall=VALUES(isNewCall)
        """

        count = 0
        for call_id, call in call_details.items():
            try:
                start_time = int(call["startTime"])  # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ü–µ int
                
                cursor.execute(insert_query, (
                    call["companyID"], call["generalCallID"], datetime.datetime.fromtimestamp(start_time),
                    call["callType"], call["internalNumber"], call.get("internalAdditionalData", ""),
                    call["externalNumber"], call["waitsec"], call["billsec"],
                    call["disposition"], call["isNewCall"]
                ))
                count += 1
            except KeyError as e:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞–ø–∏—Å {call_id}: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–ª—é—á {e}")
            except ValueError as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó {call_id}: {e}")

        connection.commit()
        return count
    except Error as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ MySQL: {e}")
        return 0
    finally:
        if connection.is_connected():
            cursor.close()
            connection.close()

# üîπ –û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å
if __name__ == "__main__":
    start_date = get_last_date_from_db()
    end_date = datetime.date.today()
    print(f"üöÄ –û—Ç—Ä–∏–º—É—î–º–æ –¥–∑–≤—ñ–Ω–∫–∏ –∑ {start_date} –¥–æ {end_date}")
    
    while start_date <= end_date:
        start_timestamp = int(time.mktime(start_date.timetuple()))
        stop_timestamp = int(time.mktime((start_date + datetime.timedelta(days=1)).timetuple()))
        
        call_data = get_calls(start_timestamp, stop_timestamp)
        if call_data:
            saved_records = save_to_db(call_data)
            print(f"üìÖ –î–∞–Ω—ñ –∑–∞ {start_date} –æ—Ç—Ä–∏–º–∞–Ω–æ –≤ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ {saved_records} –∑–∞–ø–∏—Å—ñ–≤")
        else:
            print(f"‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ {start_date}")
        
        start_date += datetime.timedelta(days=1)
        time.sleep(6)
