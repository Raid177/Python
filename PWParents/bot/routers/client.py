# bot/routers/client.py
from __future__ import annotations

from datetime import datetime, timedelta, timezone
from aiogram import Router, F, Bot
from aiogram.types import Message, Contact
from aiogram.filters import Command

from core.db import get_conn
from core.config import settings
from core.repositories import clients as repo_c
from core.repositories import tickets as repo_t
from core.services.relay import log_and_send_text_to_topic

from bot.keyboards.common import ask_phone_kb, main_menu_kb, privacy_inline_kb
from bot.routers._media import relay_media

router = Router()

WELCOME = (
    "–í—ñ—Ç–∞—î–º–æ —É –∫–ª—ñ–Ω—ñ—Ü—ñ PetWealth! üíö\n"
    f"–ú–∏ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º. –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–µ ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ {settings.SUPPORT_PHONE}.\n"
    "–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: —á–∞—Ç –Ω–µ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î—Ç—å—Å—è –ø–æ—Å—Ç—ñ–π–Ω–æ, –∞–ª–µ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ, —â–æ–π–Ω–æ –ø–æ–±–∞—á–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
)

PHONE_EXPLAIN = (
    "–©–æ–± –º–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞–ª–∏ –≤–∞—Å —è–∫ –≤–ª–∞—Å–Ω–∏–∫–∞ —Ç–≤–∞—Ä–∏–Ω–∏ —ñ –Ω–∞–¥–∞–ª—ñ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è "
    "–ø—Ä–æ –≤—ñ–∑–∏—Ç–∏/–≤–∞–∫—Ü–∏–Ω–∞—Ü—ñ—ó, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—ñ–≤ —Ç–æ—â–æ ‚Äî –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n"
    "–¶–µ –¥–æ–±—Ä–æ–≤—ñ–ª—å–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª."
)

ASK_PHONE_COOLDOWN = timedelta(hours=24)


# -------------------- helpers --------------------

def _touch_last_phone_prompt(conn, client_id: int) -> None:
    with conn.cursor() as cur:
        cur.execute(
            "UPDATE pp_clients SET last_phone_prompt_at = UTC_TIMESTAMP() WHERE telegram_id = %s",
            (client_id,),
        )


def _should_prompt_phone(c: dict | None) -> bool:
    """
    –ü–∏—Ç–∞—î–º–æ –Ω–æ–º–µ—Ä, —è–∫—â–æ –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—É —ñ –æ—Å—Ç–∞–Ω–Ω—è –ø—ñ–¥–∫–∞–∑–∫–∞ –±—É–ª–∞ ‚â• 24 –≥–æ–¥ —Ç–æ–º—É (–∞–±–æ –Ω—ñ–∫–æ–ª–∏).
    """
    if not c:
        return True
    if c.get("phone"):
        return False

    last = c.get("last_phone_prompt_at")
    if not last:
        return True

    now = datetime.now(timezone.utc)
    if last.tzinfo is None:
        last = last.replace(tzinfo=timezone.utc)
    return (now - last) >= ASK_PHONE_COOLDOWN


async def _is_staff_member(bot: Bot, user_id: int) -> bool:
    try:
        cm = await bot.get_chat_member(settings.support_group_id, user_id)
        return cm.status in ("creator", "administrator", "member")
    except Exception:
        return False


async def _client_display_name(bot: Bot, user_id: int) -> str | None:
    """–Ü–º'—è –¥–ª—è —Ç–µ–º–∏: first+last –∞–±–æ @username, –∞–±–æ None."""
    try:
        ch = await bot.get_chat(user_id)
        parts = []
        if getattr(ch, "first_name", None):
            parts.append(ch.first_name)
        if getattr(ch, "last_name", None):
            parts.append(ch.last_name)
        display = " ".join(parts).strip()
        if not display and getattr(ch, "username", None):
            display = f"@{ch.username}"
        return display or None
    except Exception:
        return None


async def _ensure_ticket_for_client(
    bot: Bot,
    client_id: int,
    *,
    silent: bool = False,
    notify_text: str | None = None,
) -> dict:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ç—ñ–∫–µ—Ç; —è–∫—â–æ –Ω–µ–º–∞ ‚Äî –±–µ—Ä–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π/—Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —ñ –∑–∞–±–µ–∑–ø–µ—á—É—î —Ç–µ–º—É.
    –ü–æ–≤–µ–¥—ñ–Ω–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≥—Ä—É–ø—ñ:
      - silent=True  ‚Üí –Ω—ñ—á–æ–≥–æ –Ω–µ —à–ª–µ;
      - silent=False + notify_text ‚Üí —à–ª–µ –ª–∏—à–µ notify_text (–æ–¥–Ω–µ ¬´–º‚Äô—è–∫–µ¬ª –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è);
      - silent=False + notify_text is None ‚Üí —à–ª–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ ¬´–∑–µ–ª–µ–Ω—ñ¬ª —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    # 1) –Ø–∫—â–æ —î –≤—ñ–¥–∫—Ä–∏—Ç–∏–π ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ
    conn = get_conn()
    try:
        t = repo_t.find_open_by_client(conn, client_id)
    finally:
        conn.close()
    if t:
        return t

    # 2) –í—ñ–¥–∫—Ä–∏—Ç–∏—Ö –Ω–µ–º–∞—î ‚Üí –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç—ñ–∫–µ—Ç
    conn = get_conn()
    try:
        last = repo_t.find_latest_by_client(conn, client_id)
    finally:
        conn.close()

    async def _notify(thread_id: int, label: str | int, status: str):
        if silent:
            return
        if notify_text:
            await bot.send_message(
                chat_id=settings.support_group_id,
                message_thread_id=thread_id,
                text=notify_text
            )
        else:
            await bot.send_message(
                chat_id=settings.support_group_id,
                message_thread_id=thread_id,
                text=f"üü¢ –ü–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ <code>{label}</code>."
            )
            await bot.send_message(
                chat_id=settings.support_group_id,
                message_thread_id=thread_id,
                text=(f"üü¢ –ó–∞—è–≤–∫–∞\n–ö–ª—ñ—î–Ω—Ç: <code>{label}</code>\n"
                      f"–°—Ç–∞—Ç—É—Å: {status}")
            )

    if last:
        thread_id = last.get("thread_id")

        # 2–∞) –¢–µ–º–∞ –≤—Ç—Ä–∞—á–µ–Ω–∞ ‚Üí —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∑ –ª—é–¥—Å—å–∫–æ—é –Ω–∞–∑–≤–æ—é
        if not thread_id:
            display = await _client_display_name(bot, client_id)
            topic_name = (last.get("label") or display or f"ID{client_id}")[:128]
            topic = await bot.create_forum_topic(chat_id=settings.support_group_id, name=topic_name)

            conn = get_conn()
            try:
                repo_t.update_thread(conn, last["id"], topic.message_thread_id)
                repo_t.reopen(conn, last["id"])
                last = repo_t.get_by_id(conn, last["id"])
            finally:
                conn.close()

            await _notify(last["thread_id"], last['label'] or client_id, last['status'])
            return last

        # 2–±) –¢–µ–º–∞ —ñ—Å–Ω—É—î ‚Üí –ø—Ä–æ—Å—Ç–æ reopen
        conn = get_conn()
        try:
            repo_t.reopen(conn, last["id"])
            last = repo_t.get_by_id(conn, last["id"])
        finally:
            conn.close()

        await _notify(last["thread_id"], last['label'] or client_id, last['status'])
        return last

    # 3) –©–µ –Ω–µ –±—É–ª–æ —Ç—ñ–∫–µ—Ç—ñ–≤ ‚Üí —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—à–∏–π –∑ —ñ–º–µ–Ω–µ–º
    display = await _client_display_name(bot, client_id)
    topic_name = (display or f"ID{client_id}")[:128]
    topic = await bot.create_forum_topic(chat_id=settings.support_group_id, name=topic_name)

    conn = get_conn()
    try:
        ticket_id = repo_t.create(conn, client_id, topic.message_thread_id)
        if display:
            repo_t.set_label(conn, ticket_id, display)  # –∞–≤—Ç–æ-label –∑ —ñ–º–µ–Ω—ñ
        t = repo_t.get_by_id(conn, ticket_id)
    finally:
        conn.close()

    if not silent:
        if notify_text:
            await bot.send_message(
                chat_id=settings.support_group_id,
                message_thread_id=t["thread_id"],
                text=notify_text
            )
        else:
            await bot.send_message(
                chat_id=settings.support_group_id,
                message_thread_id=t["thread_id"],
                text=(f"üü¢ –ó–∞—è–≤–∫–∞\n–ö–ª—ñ—î–Ω—Ç: <code>{t['label'] or t['client_user_id']}</code>\n"
                      f"–°—Ç–∞—Ç—É—Å: {t['status']}")
            )
    return t


# -------------------- /start + —Ç–µ–ª–µ—Ñ–æ–Ω + –∫–Ω–æ–ø–∫–∏ --------------------

@router.message(Command("start"), F.chat.type == "private")
async def client_start(message: Message, bot: Bot):
    # –Ø–∫—â–æ —Ü–µ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ —Å–ª—É–∂–±–æ–≤–∏–π —Ç–µ–∫—Å—Ç —ñ –≤–∏—Ö–æ–¥–∏–º–æ
    try:
        cm = await bot.get_chat_member(settings.support_group_id, message.from_user.id)
        if cm.status in ("creator", "administrator", "member"):
            await message.answer(
                "–í—ñ—Ç–∞—é! –í–∏ —É –∫–æ–º–∞–Ω–¥—ñ PetWealth üêæ\n"
                "–î–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î–º–æ —É —Ç–µ–º–∞—Ö —Å–ª—É–∂–±–æ–≤–æ—ó –≥—Ä—É–ø–∏.\n"
                "–°–≤–æ—î —ñ–º‚Äô—è –≤–∫–∞–∂—ñ—Ç—å —É –ø—Ä–∏–≤–∞—Ç—ñ: /setname –Ü–º º—è –ü—Ä—ñ–∑–≤–∏—â–µ."
            )
            return
    except Exception:
        pass

    # 1) –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑–∞–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞
    conn = get_conn()
    try:
        repo_c.ensure_exists(conn, message.from_user.id)
        c = repo_c.get_client(conn, message.from_user.id)  # dict –∞–±–æ None
        if not c or not c.get("phone"):
            repo_c.upsert_client(conn, message.from_user.id, None, False)
    finally:
        conn.close()

    # 2) –û–î–†–ê–ó–£ –∑–∞–±–µ–∑–ø–µ—á—É—î–º–æ —Ç—ñ–∫–µ—Ç/—Ç–µ–º—É ‚Äî –∫–ª—ñ—î–Ω—Ç –≤–∏–¥–∏–º–∏–π, –∞–ª–µ –ë–ï–ó —à—É–º—É
    await _ensure_ticket_for_client(
        bot,
        message.from_user.id,
        silent=True,              # ‚Üê —Ç–∏—Ö–æ –Ω–∞ /start
        # –ú–æ–∂–µ—à —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞:
        # silent=False, notify_text="üëã –ö–ª—ñ—î–Ω—Ç –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –±–æ—Ç–∞"
    )

    # 3) –î–∞–ª—ñ ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω/–º–µ–Ω—é
    if not c or not c.get("phone"):
        await message.answer(PHONE_EXPLAIN, reply_markup=ask_phone_kb())
        await message.answer(
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ.",
            reply_markup=privacy_inline_kb(settings.PRIVACY_URL),
        )
        conn = get_conn()
        try:
            _touch_last_phone_prompt(conn, message.from_user.id)
            conn.commit()
        finally:
            conn.close()
        return

    await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await message.answer(WELCOME)


@router.message(F.contact, F.chat.type == "private", flags={"block": True})
async def got_contact(message: Message):
    conn = get_conn()
    try:
        repo_c.ensure_exists(conn, message.from_user.id)
    finally:
        conn.close()

    contact: Contact = message.contact
    if not contact or not contact.phone_number:
        await message.answer(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä. –í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.",
            reply_markup=ask_phone_kb()
        )
        return

    conn = get_conn()
    try:
        repo_c.upsert_client(conn, message.from_user.id, contact.phone_number, True)
    finally:
        conn.close()

    await message.answer("–î—è–∫—É—î–º–æ! –ù–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ", reply_markup=main_menu_kb())
    await message.answer(WELCOME)


@router.message(F.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", F.chat.type == "private", flags={"block": True})
async def skip_phone(message: Message):
    conn = get_conn()
    try:
        repo_c.ensure_exists(conn, message.from_user.id)
        _touch_last_phone_prompt(conn, message.from_user.id)
        conn.commit()
    finally:
        conn.close()

    await message.answer("–î–æ–±—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ. –í–∏ –∑–∞–≤–∂–¥–∏ –∑–º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_menu_kb())
    await message.answer(WELCOME)


# --------------- –∫–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç—É (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ ¬´–Ω–∞–º—ñ—Ä¬ª) ---------------

@router.message(F.text == "ü©∫ –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –ª—ñ–∫—É–≤–∞–Ω–Ω—é", F.chat.type == "private", flags={"block": True})
async def btn_current_treatment(message: Message, bot: Bot):
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO pp_client_intents (client_user_id, intent_label)
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE intent_label=VALUES(intent_label), created_at=CURRENT_TIMESTAMP
            """, (message.from_user.id, "‚û°Ô∏è –ö–Ω–æ–ø–∫–∞: ¬´ü©∫ –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –ª—ñ–∫—É–≤–∞–Ω–Ω—é¬ª"))
        conn.commit()
    finally:
        conn.close()

    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ –ª—ñ–∫–∞—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤ –Ω–∞–π–±–ª–∏–∂—á–∏–π —á–∞—Å.")


@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–∏–π–æ–º", F.chat.type == "private", flags={"block": True})
async def btn_booking(message: Message, bot: Bot):
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO pp_client_intents (client_user_id, intent_label)
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE intent_label=VALUES(intent_label), created_at=CURRENT_TIMESTAMP
            """, (message.from_user.id, "‚û°Ô∏è –ö–Ω–æ–ø–∫–∞: ¬´üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–∏–π–æ–º¬ª"))
        conn.commit()
    finally:
        conn.close()

    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–µ–Ω—å/—á–∞—Å, —ñ–º‚Äô—è –ø–∞—Ü—ñ—î–Ω—Ç–∞ —Ç–∞ –ø—Ä–∏—á–∏–Ω—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è (–ø–µ—Ä–≤–∏–Ω–Ω–∏–π –æ–≥–ª—è–¥, –≤–∞–∫—Ü–∏–Ω–∞—Ü—ñ—è, –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—â–æ).")


@router.message(F.text == "‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", F.chat.type == "private", flags={"block": True})
async def btn_question(message: Message, bot: Bot):
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO pp_client_intents (client_user_id, intent_label)
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE intent_label=VALUES(intent_label), created_at=CURRENT_TIMESTAMP
            """, (message.from_user.id, "‚û°Ô∏è –ö–Ω–æ–ø–∫–∞: ¬´‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è¬ª"))
        conn.commit()
    finally:
        conn.close()

    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.")


@router.message(F.text == "üó∫ –Ø–∫ –Ω–∞—Å –∑–Ω–∞–π—Ç–∏", F.chat.type == "private", flags={"block": True})
async def btn_nav(message: Message, bot: Bot):
    conn = get_conn()
    try:
        repo_c.ensure_exists(conn, message.from_user.id)
    finally:
        conn.close()

    await message.answer(
        "üìç –ö–∏—ó–≤, –ø—Ä—Ç.–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å—å–∫–∏–π 2/1 (–ü–µ—Ä–æ–≤–∞).\n"
        "üïí –ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ ‚Äî —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ\n"
        f"‚òéÔ∏è {settings.SUPPORT_PHONE}\n"
        "Google Maps: https://maps.app.goo.gl/Rir8Qgmzotz3RZMU7"
    )


# -------------------- –∫–ª—ñ—î–Ω—Ç ‚Üí —Ç–µ–º–∞ —Å–∞–ø–ø–æ—Ä—Ç-–≥—Ä—É–ø–∏ --------------------

@router.message(
    F.chat.type == "private",
    (F.text & ~F.text.startswith("/")) | ~F.text
)
async def inbound_from_client(message: Message, bot: Bot):
    # 0) —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —ñ–≥–Ω–æ—Ä—É—î–º–æ –≤ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ–º—É —Ä–æ—É—Ç–µ—Ä—ñ
    if await _is_staff_member(bot, message.from_user.id):
        return

    # 1) –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑–∞–ø–∏—Å —É pp_clients —ñ –±–µ—Ä–µ–º–æ —Ä—è–¥–æ–∫
    conn = get_conn()
    try:
        repo_c.ensure_exists(conn, message.from_user.id)
        client_row = repo_c.get_client(conn, message.from_user.id)
    finally:
        conn.close()

    # 2) –û–î–†–ê–ó–£ –∑–Ω–∞–π—Ç–∏/—Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç —ñ —Ç–µ–º—É ‚Äî –∫–ª—ñ—î–Ω—Ç –≤–∏–¥–∏–º–∏–π –∑ –ø–µ—Ä—à–æ–≥–æ –ø—ñ–Ω–≥—É
    t = await _ensure_ticket_for_client(
        bot,
        message.from_user.id,
        silent=False,                 # —Ç—É—Ç —Ö–æ—á–µ–º–æ –±–∞—á–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å
        notify_text=None              # –∞–±–æ –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º –∫–æ—Ä–æ—Ç–∫–æ: "üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞"
    )
    label = t.get("label") or f"{message.from_user.id}"
    head = f"üì® –í—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ <code>{label}</code>"

    # 3) –Ø–∫—â–æ —Ç—Ä–µ–±–∞ ‚Äî –ø–æ–ø—Ä–æ—Å–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–ª–µ –ù–ï –∑—É–ø–∏–Ω—è—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫—É —É —Ç–µ–º—É
    if _should_prompt_phone(client_row):
        await message.answer(PHONE_EXPLAIN, reply_markup=ask_phone_kb())
        await message.answer(
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ.",
            reply_markup=privacy_inline_kb(settings.PRIVACY_URL)
        )
        conn = get_conn()
        try:
            _touch_last_phone_prompt(conn, message.from_user.id)
            conn.commit()
        finally:
            conn.close()
        # –±–µ–∑ return ‚Üí –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å–µ –æ–¥–Ω–æ –ø—ñ–¥–µ–º–æ –≤ —Ç–µ–º—É

    # 4) –ü—ñ–¥—Ö–æ–ø–∏—Ç–∏ ¬´–≤–∏—Å—è—á–∏–π¬ª intent
    pending_intent = None
    conn = get_conn()
    try:
        with conn.cursor(dictionary=True) as cur:
            cur.execute(
                "SELECT intent_label FROM pp_client_intents WHERE client_user_id=%s",
                (message.from_user.id,)
            )
            row = cur.fetchone()
            if row:
                pending_intent = row["intent_label"]
                cur.execute(
                    "DELETE FROM pp_client_intents WHERE client_user_id=%s",
                    (message.from_user.id,)
                )
        conn.commit()
    finally:
        conn.close()

    if pending_intent:
        await log_and_send_text_to_topic(
            bot, settings.support_group_id, t["thread_id"], t["id"], pending_intent, head
        )

    # 5) –í–ª–∞—Å–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç –∫–ª—ñ—î–Ω—Ç–∞
    if message.content_type == "text":
        await log_and_send_text_to_topic(
            bot, settings.support_group_id, t["thread_id"], t["id"], message.text, head
        )
    else:
        out = await relay_media(
            bot,
            message,
            settings.support_group_id,
            prefix=head,
            thread_id=t["thread_id"],
        )
        try:
            from bot.service.msglog import log_and_touch
            log_and_touch(
                t["id"],
                "in",
                out.message_id,
                getattr(message, "caption", None),
                message.content_type
            )
        except Exception:
            pass


# –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞, —â–æ–± —Ä—É–∫–∞–º–∏ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ–Ω—é
@router.message(Command("menu"), F.chat.type == "private")
async def show_menu(message: Message):
    await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await message.answer(WELCOME)


@router.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é (—Ç–∏—Ö–æ —Å—Ç–≤–æ—Ä—é—î –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —É —Å–ª—É–∂–±–æ–≤—ñ–π –≥—Ä—É–ø—ñ)\n"
        "/menu ‚Äî –∫–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É\n"
        "/help ‚Äî —Ü—è –ø—ñ–¥–∫–∞–∑–∫–∞\n\n"
        "–£ —Å–ª—É–∂–±–æ–≤—ñ–π –≥—Ä—É–ø—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ: /label, /assign, /card, /client, /phone, "
        "/threadinfo, /close, /close_silent, /reopen, /snooze."
    )
