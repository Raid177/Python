# bot/routers/client.py
from aiogram import Router, F, Bot
from aiogram.types import Message, Contact
from aiogram.filters import Command
from datetime import datetime, timedelta

from core.db import get_conn
from core.config import settings
from core.repositories import clients as repo_c
from core.repositories import tickets as repo_t
from core.services.relay import log_and_send_text_to_topic, log_inbound_media_copy

from bot.keyboards.common import ask_phone_kb, main_menu_kb, privacy_inline_kb

router = Router()

WELCOME = (
    "–í—ñ—Ç–∞—î–º–æ —É –∫–ª—ñ–Ω—ñ—Ü—ñ PetWealth! üíö\n"
    f"–ú–∏ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º. –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–µ ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ {settings.SUPPORT_PHONE}.\n"
    "–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: —á–∞—Ç –Ω–µ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î—Ç—å—Å—è –ø–æ—Å—Ç—ñ–π–Ω–æ, –∞–ª–µ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ, —â–æ–π–Ω–æ –ø–æ–±–∞—á–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
)

PHONE_EXPLAIN = (
    "–©–æ–± –º–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞–ª–∏ –≤–∞—Å —è–∫ –≤–ª–∞—Å–Ω–∏–∫–∞ —Ç–≤–∞—Ä–∏–Ω–∏ —ñ –Ω–∞–¥–∞–ª—ñ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è "
    "–ø—Ä–æ –≤—ñ–∑–∏—Ç–∏/–≤–∞–∫—Ü–∏–Ω–∞—Ü—ñ—ó, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—ñ–≤ —Ç–æ—â–æ ‚Äî –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n"
    "–¶–µ –¥–æ–±—Ä–æ–≤—ñ–ª—å–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª."
)

# -------------------- helpers --------------------

ASK_PHONE_COOLDOWN = timedelta(hours=24)

def _should_prompt_phone(client_row: dict | None) -> bool:
    """
    –ü–∏—Ç–∞—î–º–æ –Ω–æ–º–µ—Ä, —è–∫—â–æ:
    - —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–º–∞—î
    - —ñ –º–∏–Ω—É–ª–æ >= 24 –≥–æ–¥ –≤—ñ–¥ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø—ñ–¥–∫–∞–∑–∫–∏ (last_phone_prompt_at)
    """
    if not client_row or client_row.get("phone"):
        return False

    last_prompt = client_row.get("last_phone_prompt_at")
    if not last_prompt:
        return True  # —â–µ –Ω–µ –ø–∏—Ç–∞–ª–∏ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ

    now = datetime.now(last_prompt.tzinfo) if getattr(last_prompt, "tzinfo", None) else datetime.now()
    return (now - last_prompt) >= ASK_PHONE_COOLDOWN


async def _is_staff_member(bot: Bot, user_id: int) -> bool:
    try:
        cm = await bot.get_chat_member(settings.support_group_id, user_id)
        return cm.status in ("creator", "administrator", "member")
    except Exception:
        return False


async def _client_display_name(bot: Bot, user_id: int) -> str | None:
    """–Ü–º'—è –¥–ª—è —Ç–µ–º–∏: first+last –∞–±–æ @username, –∞–±–æ None."""
    try:
        ch = await bot.get_chat(user_id)
        parts = []
        if getattr(ch, "first_name", None):
            parts.append(ch.first_name)
        if getattr(ch, "last_name", None):
            parts.append(ch.last_name)
        display = " ".join(parts).strip()
        if not display and getattr(ch, "username", None):
            display = f"@{ch.username}"
        return display or None
    except Exception:
        return None


async def _ensure_ticket_for_client(bot: Bot, client_id: int) -> dict:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ç—ñ–∫–µ—Ç; —è–∫—â–æ –Ω–µ–º–∞ ‚Äî –±–µ—Ä–µ –æ—Å—Ç–∞–Ω–Ω—ñ–π/—Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π —ñ –∑–∞–±–µ–∑–ø–µ—á—É—î —Ç–µ–º—É.
    """
    # 1) –≤—ñ–¥–∫—Ä–∏—Ç–∏–π/—É —Ä–æ–±–æ—Ç—ñ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ
    conn = get_conn()
    try:
        t = repo_t.find_open_by_client(conn, client_id)
    finally:
        conn.close()
    if t:
        return t

    # 2) –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –Ω–µ–º–∞—î ‚Üí –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç—ñ–∫–µ—Ç
    conn = get_conn()
    try:
        last = repo_t.find_latest_by_client(conn, client_id)
    finally:
        conn.close()

    if last:
        thread_id = last.get("thread_id")

        # —Ç–µ–º–∞ –≤—Ç—Ä–∞—á–µ–Ω–∞ ‚Üí —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∑ ¬´–ª—é–¥—Å—å–∫–æ—é¬ª –Ω–∞–∑–≤–æ—é (label/—ñ–º‚Äô—è/ID)
        if not thread_id:
            display = await _client_display_name(bot, client_id)
            topic_name = (last.get("label") or display or f"ID{client_id}")[:128]
            topic = await bot.create_forum_topic(chat_id=settings.support_group_id, name=topic_name)

            conn = get_conn()
            try:
                repo_t.update_thread(conn, last["id"], topic.message_thread_id)
                repo_t.reopen(conn, last["id"])
                last = repo_t.get_by_id(conn, last["id"])
            finally:
                conn.close()

            await bot.send_message(
                chat_id=settings.support_group_id,
                message_thread_id=last["thread_id"],
                text=f"üü¢ –ü–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ <code>{last['label'] or client_id}</code>."
            )
            await bot.send_message(
                chat_id=settings.support_group_id,
                message_thread_id=last["thread_id"],
                text=(f"üü¢ –ó–∞—è–≤–∫–∞\n–ö–ª—ñ—î–Ω—Ç: <code>{last['label'] or last['client_user_id']}</code>\n"
                      f"–°—Ç–∞—Ç—É—Å: {last['status']}")
            )
            return last

        # —Ç–µ–º–∞ —ñ—Å–Ω—É—î ‚Üí –ø—Ä–æ—Å—Ç–æ reopen —Ç—ñ–∫–µ—Ç–∞
        conn = get_conn()
        try:
            repo_t.reopen(conn, last["id"])
            last = repo_t.get_by_id(conn, last["id"])
        finally:
            conn.close()

        await bot.send_message(
            chat_id=settings.support_group_id,
            message_thread_id=last["thread_id"],
            text=f"üü¢ –ü–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ <code>{last['label'] or client_id}</code>."
        )
        await bot.send_message(
            chat_id=settings.support_group_id,
            message_thread_id=last["thread_id"],
            text=(f"üü¢ –ó–∞—è–≤–∫–∞\n–ö–ª—ñ—î–Ω—Ç: <code>{last['label'] or last['client_user_id']}</code>\n"
                  f"–°—Ç–∞—Ç—É—Å: {last['status']}")
        )
        return last

    # 3) —â–µ –Ω–µ –±—É–ª–æ —Ç—ñ–∫–µ—Ç—ñ–≤ ‚Üí —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—à–∏–π –∑ —ñ–º–µ–Ω–µ–º
    display = await _client_display_name(bot, client_id)
    topic_name = (display or f"ID{client_id}")[:128]
    topic = await bot.create_forum_topic(chat_id=settings.support_group_id, name=topic_name)

    conn = get_conn()
    try:
        ticket_id = repo_t.create(conn, client_id, topic.message_thread_id)
        if display:
            repo_t.set_label(conn, ticket_id, display)  # –∞–≤—Ç–æ-label –∑ —ñ–º–µ–Ω—ñ
        t = repo_t.get_by_id(conn, ticket_id)
    finally:
        conn.close()

    await bot.send_message(
        chat_id=settings.support_group_id,
        message_thread_id=t["thread_id"],
        text=(f"üü¢ –ó–∞—è–≤–∫–∞\n–ö–ª—ñ—î–Ω—Ç: <code>{t['label'] or t['client_user_id']}</code>\n"
              f"–°—Ç–∞—Ç—É—Å: {t['status']}")
    )
    return t

# -------------------- /start + —Ç–µ–ª–µ—Ñ–æ–Ω + –∫–Ω–æ–ø–∫–∏ --------------------

@router.message(Command("start"), F.chat.type == "private")
async def client_start(message: Message, bot: Bot):
    # —è–∫—â–æ —Ü–µ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ —Å–ª—É–∂–±–æ–≤–∏–π —Ç–µ–∫—Å—Ç —ñ –í–ò–•–û–î–ò–ú–û
    try:
        cm = await bot.get_chat_member(settings.support_group_id, message.from_user.id)
        if cm.status in ("creator", "administrator", "member"):
            await message.answer(
                "–í—ñ—Ç–∞—é! –í–∏ —É –∫–æ–º–∞–Ω–¥—ñ PetWealth üêæ\n"
                "–î–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î–º–æ —É —Ç–µ–º–∞—Ö —Å–ª—É–∂–±–æ–≤–æ—ó –≥—Ä—É–ø–∏.\n"
                "–°–≤–æ—î —ñ–º‚Äô—è –≤–∫–∞–∂—ñ—Ç—å —É –ø—Ä–∏–≤–∞—Ç—ñ: /setname –Ü–º º—è –ü—Ä—ñ–∑–≤–∏—â–µ."
            )
            return
    except Exception:
        pass

    # –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π
    conn = get_conn()
    try:
        repo_c.ensure_exists(conn, message.from_user.id)
        c = repo_c.get_client(conn, message.from_user.id)  # dict –∞–±–æ None
        if not c or not c.get("phone"):
            # –∑–±–µ—Ä–µ–∂–µ–º–æ ¬´–ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ¬ª –∫–ª—ñ—î–Ω—Ç–∞, —â–æ–± —Ç–æ—á–Ω–æ –±—É–≤ –∑–∞–ø–∏—Å
            repo_c.upsert_client(conn, message.from_user.id, None, False)
    finally:
        conn.close()

    # —è–∫—â–æ —Ç–µ–ª–µ—Ñ–æ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî –¥–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É ‚Äú–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º‚Äù
    if not c or not c.get("phone"):
        await message.answer(
            "–©–æ–± –º–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞–ª–∏ –≤–∞—Å —è–∫ –≤–ª–∞—Å–Ω–∏–∫–∞ —Ç–≤–∞—Ä–∏–Ω–∏ —Ç–∞ –º–æ–≥–ª–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è "
            "–ø—Ä–æ –≤—ñ–∑–∏—Ç–∏/–≤–∞–∫—Ü–∏–Ω–∞—Ü—ñ—ó –π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—ñ–≤ ‚Äî –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n"
            "–¶–µ –¥–æ–±—Ä–æ–≤—ñ–ª—å–Ω–æ. –ú–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.",
            reply_markup=ask_phone_kb(),
        )
        await message.answer(
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ.",
            reply_markup=privacy_inline_kb(settings.PRIVACY_URL),
        )
        return

    # —è–∫—â–æ —Ç–µ–ª–µ—Ñ–æ–Ω —É–∂–µ —î ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

@router.message(F.contact, F.chat.type == "private")
async def got_contact(message: Message):
    # —Ñ—ñ–∫—Å—É—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ –ë–î —É –±—É–¥—å-—è–∫–æ–º—É —Ä–∞–∑—ñ
    conn = get_conn()
    try:
        repo_c.ensure_exists(conn, message.from_user.id)
    finally:
        conn.close()

    contact: Contact = message.contact
    if not contact or not contact.phone_number:
        await message.answer(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä. –í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.",
            reply_markup=ask_phone_kb()
        )
        return

    conn = get_conn()
    try:
        repo_c.upsert_client(conn, message.from_user.id, contact.phone_number, True)
    finally:
        conn.close()

    await message.answer("–î—è–∫—É—î–º–æ! –ù–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ", reply_markup=main_menu_kb())
    await message.answer(WELCOME)


@router.message(F.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", F.chat.type == "private")
async def skip_phone(message: Message):
    conn = get_conn()
    try:
        repo_c.ensure_exists(conn, message.from_user.id)
    finally:
        conn.close()

    await message.answer("–î–æ–±—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ. –í–∏ –∑–∞–≤–∂–¥–∏ –∑–º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_menu_kb())
    await message.answer(WELCOME)

# --------------- –∫–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç—É (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ ¬´–Ω–∞–º—ñ—Ä¬ª) ---------------

@router.message(F.text == "ü©∫ –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –ª—ñ–∫—É–≤–∞–Ω–Ω—é", F.chat.type == "private")
async def btn_current_treatment(message: Message, bot: Bot):
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO pp_client_intents (client_user_id, intent_label)
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE intent_label=VALUES(intent_label), created_at=CURRENT_TIMESTAMP
            """, (message.from_user.id, "‚û°Ô∏è –ö–Ω–æ–ø–∫–∞: ¬´ü©∫ –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –ª—ñ–∫—É–≤–∞–Ω–Ω—é¬ª"))
        conn.commit()
    finally:
        conn.close()

    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ –ª—ñ–∫–∞—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤ –Ω–∞–π–±–ª–∏–∂—á–∏–π —á–∞—Å.")


@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–∏–π–æ–º", F.chat.type == "private")
async def btn_booking(message: Message, bot: Bot):
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO pp_client_intents (client_user_id, intent_label)
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE intent_label=VALUES(intent_label), created_at=CURRENT_TIMESTAMP
            """, (message.from_user.id, "‚û°Ô∏è –ö–Ω–æ–ø–∫–∞: ¬´üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–∏–π–æ–º¬ª"))
        conn.commit()
    finally:
        conn.close()

    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–µ–Ω—å/—á–∞—Å, —ñ–º‚Äô—è –ø–∞—Ü—ñ—î–Ω—Ç–∞ —Ç–∞ –ø—Ä–∏—á–∏–Ω—É –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è (–ø–µ—Ä–≤–∏–Ω–Ω–∏–π –æ–≥–ª—è–¥, –≤–∞–∫—Ü–∏–Ω–∞—Ü—ñ—è, –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ—â–æ).")


@router.message(F.text == "‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", F.chat.type == "private")
async def btn_question(message: Message, bot: Bot):
    conn = get_conn()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                INSERT INTO pp_client_intents (client_user_id, intent_label)
                VALUES (%s, %s)
                ON DUPLICATE KEY UPDATE intent_label=VALUES(intent_label), created_at=CURRENT_TIMESTAMP
            """, (message.from_user.id, "‚û°Ô∏è –ö–Ω–æ–ø–∫–∞: ¬´‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è¬ª"))
        conn.commit()
    finally:
        conn.close()

    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ.")


@router.message(F.text == "üó∫ –Ø–∫ –Ω–∞—Å –∑–Ω–∞–π—Ç–∏", F.chat.type == "private")
async def btn_nav(message: Message, bot: Bot):
    # –ø—Ä–æ—Å—Ç–æ –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑–∞–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî —ñ –¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–Ω—ñ—á–æ–≥–æ –≤ —Ç–µ–º—É –Ω–µ —à–ª–µ–º–æ)
    conn = get_conn()
    try:
        repo_c.ensure_exists(conn, message.from_user.id)
    finally:
        conn.close()

    await message.answer(
        "üìç –ö–∏—ó–≤, –ø—Ä—Ç.–í–æ—Å–∫—Ä–µ—Å–µ–Ω—Å—å–∫–∏–π 2/1 (–ü–µ—Ä–æ–≤–∞).\n"
        "üïí –ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ ‚Äî —Ü—ñ–ª–æ–¥–æ–±–æ–≤–æ\n"
        f"‚òéÔ∏è {settings.SUPPORT_PHONE}\n"
        "Google Maps: https://maps.app.goo.gl/Rir8Qgmzotz3RZMU7"
    )

# -------------------- –∫–ª—ñ—î–Ω—Ç ‚Üí —Ç–µ–º–∞ —Å–∞–ø–ø–æ—Ä—Ç-–≥—Ä—É–ø–∏ --------------------

# –ù–ï –º–∞—Ç—á–∏–º–æ –∫–æ–º–∞–Ω–¥–∏. –ë–µ—Ä–µ–º–æ:
#  ‚Ä¢ —Ç–µ–∫—Å—Ç, —â–æ –ù–ï –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ "/"
#  ‚Ä¢ –∞–±–æ –±—É–¥—å-—è–∫—ñ –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/–¥–æ–∫)
@router.message(
    F.chat.type == "private",
    (F.text & ~F.text.startswith("/")) | ~F.text
)
async def inbound_from_client(message: Message, bot: Bot):
    # 0) —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —ñ–≥–Ω–æ—Ä—É—î–º–æ –≤ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ–º—É —Ä–æ—É—Ç–µ—Ä—ñ
    if await _is_staff_member(bot, message.from_user.id):
        return

    # 1) –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑–∞–ø–∏—Å —É pp_clients —ñ –±–µ—Ä–µ–º–æ —Ä—è–¥–æ–∫
    conn = get_conn()
    try:
        repo_c.ensure_exists(conn, message.from_user.id)
        client_row = repo_c.get_client(conn, message.from_user.id)
    finally:
        conn.close()

    # 2) —è–∫—â–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ–º–∞—î —ñ ¬´—Ç–∏—à–∞¬ª ‚â• 24 –≥–æ–¥ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞–ø–∏—Ç —ñ —Ñ—ñ–∫—Å—É—î–º–æ –º–æ–º–µ–Ω—Ç –ø–æ–∫–∞–∑—É,
    #    –ü–†–ò –¶–¨–û–ú–£ –î–Ü–ê–õ–û–ì –£ –¢–ï–ú–£ –ù–ï –®–õ–ï–ú–û (return)

    # import logging
    # logger = logging.getLogger(__name__)
    # logger.info("client_row=%r", client_row)



    if _should_prompt_phone(client_row):
        await message.answer(
            "–©–æ–± –º–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞–ª–∏ –≤–∞—Å —è–∫ –≤–ª–∞—Å–Ω–∏–∫–∞ —Ç–≤–∞—Ä–∏–Ω–∏ —Ç–∞ –º–æ–≥–ª–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è "
            "–ø—Ä–æ –≤—ñ–∑–∏—Ç–∏/–≤–∞–∫—Ü–∏–Ω–∞—Ü—ñ—ó –π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—ñ–≤ ‚Äî –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n"
            "–¶–µ –¥–æ–±—Ä–æ–≤—ñ–ª—å–Ω–æ. –ú–æ–∂–Ω–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.",
            reply_markup=ask_phone_kb()
        )
        await message.answer(
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ.",
            reply_markup=privacy_inline_kb(settings.PRIVACY_URL)
        )
        # —Ñ—ñ–∫—Å—É—î–º–æ, —â–æ –ø—ñ–¥–∫–∞–∑–∫—É –ø–æ–∫–∞–∑–∞–ª–∏ (—â–æ–± –Ω–µ —Å–º–∏–∫–∞—Ç–∏ —á–∞—Å—Ç—ñ—à–µ –Ω—ñ–∂ —Ä–∞–∑/24–≥–æ–¥)
        conn = get_conn()
        try:
            _touch_last_phone_prompt(conn, message.from_user.id)
            conn.commit()
        finally:
            conn.close()
        return

    # 3) –∑–Ω–∞–π—Ç–∏/—Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç —ñ –ø—Ä–æ—à—Ç–æ–≤—Ö–Ω—É—Ç–∏ –≤ —Ç–µ–º—É
    t = await _ensure_ticket_for_client(bot, message.from_user.id)
    label = t.get("label") or f"{message.from_user.id}"
    head = f"üì® –í—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ <code>{label}</code>"

    # 4) –ø—ñ–¥—Ö–æ–ø–∏—Ç–∏ ¬´–≤–∏—Å—è—á–∏–π¬ª intent (–Ω–∞—Ç–∏—Å–Ω–µ–Ω—É –∫–Ω–æ–ø–∫—É) —ñ —Å–∫–∏–Ω—É—Ç–∏ –π–æ–≥–æ
    pending_intent = None
    conn = get_conn()
    try:
        with conn.cursor(dictionary=True) as cur:
            cur.execute(
                "SELECT intent_label FROM pp_client_intents WHERE client_user_id=%s",
                (message.from_user.id,)
            )
            row = cur.fetchone()
            if row:
                pending_intent = row["intent_label"]
                cur.execute(
                    "DELETE FROM pp_client_intents WHERE client_user_id=%s",
                    (message.from_user.id,)
                )
        conn.commit()
    finally:
        conn.close()

    if pending_intent:
        await log_and_send_text_to_topic(
            bot, settings.support_group_id, t["thread_id"], t["id"], pending_intent, head
        )

    # 5) –¥–∞–ª—ñ ‚Äî –≤–ª–∞—Å–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç –∫–ª—ñ—î–Ω—Ç–∞
    if message.content_type == "text":
        await log_and_send_text_to_topic(
            bot, settings.support_group_id, t["thread_id"], t["id"], message.text, head
        )
    else:
        await log_inbound_media_copy(
            message, settings.support_group_id, t["thread_id"], t["id"], head, bot
        )

# –î–æ–¥–∞—Ç–∫–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞, —â–æ–± —Ä—É–∫–∞–º–∏ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ–Ω—é
@router.message(Command("menu"), F.chat.type == "private")
async def show_menu(message: Message):
    await message.answer("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await message.answer(WELCOME)

def _touch_last_phone_prompt(conn, client_id: int):
    with conn.cursor() as cur:
        cur.execute("""
            UPDATE pp_clients
               SET last_phone_prompt_at = CURRENT_TIMESTAMP
             WHERE telegram_id = %s
        """, (client_id,))

