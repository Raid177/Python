# bot/routers/client.py
from aiogram import Router, F, Bot
from aiogram.types import Message, Contact
from aiogram.filters import Command

from core.db import get_conn
from core.config import settings
from core.repositories import clients as repo_c

from bot.keyboards.common import ask_phone_kb, main_menu_kb, privacy_inline_kb

router = Router()

WELCOME = (
    "–í—ñ—Ç–∞—î–º–æ —É –∫–ª—ñ–Ω—ñ—Ü—ñ PetWealth! üíö\n"
    f"–ú–∏ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º. –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–µ ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ {settings.SUPPORT_PHONE}.\n"
    "–ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: —á–∞—Ç –Ω–µ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É—î—Ç—å—Å—è –ø–æ—Å—Ç—ñ–π–Ω–æ, –∞–ª–µ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ, —â–æ–π–Ω–æ –ø–æ–±–∞—á–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."
)

PHONE_EXPLAIN = (
    "–©–æ–± —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –≤–∞—Å —è–∫ –≤–ª–∞—Å–Ω–∏–∫–∞ —Ç–≤–∞—Ä–∏–Ω–∏ —ñ –Ω–∞–¥–∞–ª—ñ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è "
    "–ø—Ä–æ –≤—ñ–∑–∏—Ç–∏/–≤–∞–∫—Ü–∏–Ω–∞—Ü—ñ—ó, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—ñ–≤ —Ç–æ—â–æ ‚Äî –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n\n"
    "–¶–µ –¥–æ–±—Ä–æ–≤—ñ–ª—å–Ω–æ. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª."
)

async def _is_staff_member(bot: Bot, user_id: int) -> bool:
    try:
        cm = await bot.get_chat_member(settings.support_group_id, user_id)
        return cm.status in ("creator", "administrator", "member")
    except Exception:
        return False

@router.message(Command("start"), F.chat.type == "private")
async def client_start(message: Message, bot: Bot):
    # —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫, –ø—ñ–¥–∫–∞–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∞–≥–µ–Ω—Ç—Å—å–∫–∏–π /start —É –ø—Ä–∏–≤–∞—Ç—ñ
    if await _is_staff_member(bot, message.from_user.id):
        await message.answer(
            "–í—ñ—Ç–∞—é! –í–∏ —É –∫–æ–º–∞–Ω–¥—ñ PetWealth üêæ\n"
            "–î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –≤–∞—à—ñ –∞–≥–µ–Ω—Ç—Å—å–∫—ñ –∫–æ–º–∞–Ω–¥–∏: /setname, —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ —Ç–µ–º —É —Å–ª—É–∂–±–æ–≤—ñ–π –≥—Ä—É–ø—ñ.\n"
            "–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å —ñ–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–µ-—Ä–æ–±–æ—á–æ–≥–æ –∞–∫–∞—É–Ω—Ç–∞."
        )
        return

    conn = get_conn()
    try:
        c = repo_c.get_client(conn, message.from_user.id)
        if not c or not c.get("phone"):
            repo_c.upsert_client(conn, message.from_user.id, None, False)
    finally:
        conn.close()

    await message.answer(PHONE_EXPLAIN, reply_markup=ask_phone_kb())
    await message.answer(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–ª—ñ—Ç–∏–∫—É –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–æ—Å—Ç—ñ.",
        reply_markup=privacy_inline_kb(settings.PRIVACY_URL)
    )

@router.message(F.contact, F.chat.type == "private")
async def got_contact(message: Message):
    contact: Contact = message.contact
    if not contact or not contact.phone_number:
        await message.answer(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–º–µ—Ä. –í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.",
            reply_markup=ask_phone_kb()
        )
        return

    conn = get_conn()
    try:
        repo_c.upsert_client(conn, message.from_user.id, contact.phone_number, True)
    finally:
        conn.close()

    await message.answer("–î—è–∫—É—î–º–æ! –ù–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ", reply_markup=main_menu_kb())
    await message.answer(WELCOME)

@router.message(F.text == "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", F.chat.type == "private")
async def skip_phone(message: Message):
    await message.answer("–î–æ–±—Ä–µ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ. –í–∏ –∑–∞–≤–∂–¥–∏ –∑–º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä –ø—ñ–∑–Ω—ñ—à–µ.", reply_markup=main_menu_kb())
    await message.answer(WELCOME)

# –ö–Ω–æ–ø–∫–∏ —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–∞—Ä—Ç—É (–Ω–∞ MVP –ø—Ä–æ—Å—Ç–æ –¥–∞—é—Ç—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é)
@router.message(F.text == "ü©∫ –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –ø–æ –ø–æ—Ç–æ—á–Ω–æ–º—É –ª—ñ–∫—É–≤–∞–Ω–Ω—é", F.chat.type == "private")
async def btn_current_treatment(message: Message):
    await message.answer("–û–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—è.")

@router.message(F.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–∏–π–æ–º", F.chat.type == "private")
async def btn_booking(message: Message):
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–µ–Ω—å/—á–∞—Å —Ç–∞ —ñ–º‚Äô—è –ø–∞—Ü—ñ—î–Ω—Ç–∞.")

@router.message(F.text == "‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", F.chat.type == "private")
async def btn_question(message: Message):
    await message.answer("–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è.")

@router.message(F.text == "üó∫ –Ø–∫ –Ω–∞—Å –∑–Ω–∞–π—Ç–∏", F.chat.type == "private")
async def btn_nav(message: Message):
    await message.answer(
        "üìç –ö–∏—ó–≤, –≤—É–ª. ...\nüïí –ü–Ω-–ù–¥ 08:00‚Äì22:00\n"
        f"‚òéÔ∏è {settings.SUPPORT_PHONE}\n"
        "Google Maps: https://maps.app.goo.gl/Rir8Qgmzotz3RZMU7"
    )

# =============================
# –ö–õ–Ü–Ñ–ù–¢ ‚Üí –¢–ï–ú–ê –°–ê–ü–ü–û–†–¢-–ì–†–£–ü–ò
# =============================
from core.repositories import tickets as repo_t
from core.services.relay import log_and_send_text_to_topic, log_inbound_media_copy
from aiogram.filters import CommandStart

async def _ensure_ticket_for_client(bot: Bot, client_id: int) -> dict:
    """
    –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ç—ñ–∫–µ—Ç –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑ —Ç–µ–º–æ—é —É —Å–ª—É–∂–±–æ–≤—ñ–π –≥—Ä—É–ø—ñ.
    –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ —Ç—ñ–∫–µ—Ç–∞ (id, client_user_id, thread_id, label, status, ...).
    """
    # 1) —à—É–∫–∞—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π/–≤ —Ä–æ–±–æ—Ç—ñ
    conn = get_conn()
    try:
        t = repo_t.find_open_by_client(conn, client_id)  # –¥–∏–≤. –ø—É–Ω–∫—Ç 2 –Ω–∏–∂—á–µ ‚Äî —è–∫—â–æ –Ω–µ–º–∞—î, –¥–æ–¥–∞–º–æ —É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
    finally:
        conn.close()
    if t:
        return t

    # 2) —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–º—É —ñ –Ω–æ–≤–∏–π —Ç—ñ–∫–µ—Ç
    topic = await bot.create_forum_topic(chat_id=settings.support_group_id, name=f"ID{client_id}")
    conn = get_conn()
    try:
        ticket_id = repo_t.create(conn, client_id, topic.message_thread_id)  # –¥–∏–≤. –ø—É–Ω–∫—Ç 2 –Ω–∏–∂—á–µ
        t = repo_t.get_by_id(conn, ticket_id)
    finally:
        conn.close()

    # –∫–∞—Ä—Ç–∫–∞ –≤ —Ç–µ–º—É
    await bot.send_message(
        chat_id=settings.support_group_id,
        message_thread_id=t["thread_id"],
        text=(f"üü¢ –ó–∞—è–≤–∫–∞\n–ö–ª—ñ—î–Ω—Ç: <code>{t['label'] or t['client_user_id']}</code>\n"
              f"–°—Ç–∞—Ç—É—Å: {t['status']}")
    )
    return t

@router.message(F.chat.type == "private")
async def inbound_from_client(message: Message, bot: Bot):
    # –≤—ñ–¥—Å—ñ–∫–∞—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ/–∫–æ–º–∞–Ω–¥–∏
    if message.text and message.text.startswith("/"):
        return
    # —è–∫—â–æ —Ü–µ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ (—â–æ–± –Ω–µ –∑–∞—Å–º—ñ—á—É–≤–∞—Ç–∏ —Ç–µ–º–∏ –ø—Ä–∏ —ó—Ö —Ç–µ—Å—Ç–∞—Ö)
    if await _is_staff_member(bot, message.from_user.id):
        return

    # –∑–Ω–∞–π—Ç–∏/—Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—ñ–∫–µ—Ç —ñ —à—Ç–æ–≤—Ö–Ω—É—Ç–∏ —É —Ç–µ–º—É
    t = await _ensure_ticket_for_client(bot, message.from_user.id)
    label = t.get("label") or f"{message.from_user.id}"
    head = f"üì® –í—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ <code>{label}</code>"

    if message.content_type == "text":
        await log_and_send_text_to_topic(bot, settings.support_group_id, t["thread_id"], t["id"], message.text, head)
    else:
        await log_inbound_media_copy(message, settings.support_group_id, t["thread_id"], t["id"], head, bot)
