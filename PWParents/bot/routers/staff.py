# bot/routers/staff.py
import logging
from datetime import datetime, timedelta

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import html

from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.exceptions import TelegramBadRequest

from core.config import settings
from core.db import get_conn
from core.repositories import (
    messages as repo_m,
    tickets as repo_t,
    agents as repo_a,
    clients as repo_c,
)
from core.repositories.agents import get_display_name

from bot.keyboards.common import (
    prefix_for_staff,
    ticket_actions_kb,
    assign_agents_kb,
)
from bot.routers._media import relay_media
from bot.utils.staff_guard import IsSupportMember

router = Router()
logger = logging.getLogger(__name__)

# =========================
# –°–õ–£–ñ–ë–û–í–Ü –ö–û–ú–ê–ù–î–ò –í –¢–ï–ú–Ü
# =========================

@router.message(Command("label"), F.chat.id == settings.support_group_id, F.is_topic_message == True)
async def set_label_cmd(message: Message, command: CommandObject, bot: Bot):
    new_label = (command.args or "").strip()
    if not new_label:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /label –Ü–º'—è_–∫–ª—ñ—î–Ω—Ç–∞_–∞–±–æ_—Ç–≤–∞—Ä–∏–Ω–∏")
        return
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
        if not t:
            return
        repo_t.set_label(conn, t["id"], new_label)
    finally:
        conn.close()

    try:
        await bot.edit_forum_topic(
            chat_id=settings.support_group_id,
            message_thread_id=message.message_thread_id,
            name=new_label[:128],
        )
    except Exception:
        pass

    await message.answer(f"‚úÖ –ú—ñ—Ç–∫—É —Ç–µ–º–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: <b>{new_label}</b>")

@router.message(
    Command("assign"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
@router.message(
    Command("assign"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
async def assign_cmd(message: Message, command: CommandObject, bot: Bot):
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
    finally:
        conn.close()
    if not t:
        return

    label = t.get("label") or t["client_user_id"]
    args = (command.args or "").strip()

    # 1) –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
    if not args:
        conn = get_conn()
        try:
            agents = repo_a.list_active(conn)
        finally:
            conn.close()

        if not agents:
            await message.answer(
                "–°–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —ó—Ö —É pp_agents –∞–±–æ –Ω–µ—Ö–∞–π –≤–∏–∫–æ–Ω–∞—é—Ç—å /setname —É –ø—Ä–∏–≤–∞—Ç—ñ."
            )
            return

        kb = assign_agents_kb(agents, client_id=t["client_user_id"], exclude_id=None)
        await message.answer(f"–ö–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ <b>{html.escape(str(label))}</b>?", reply_markup=kb)
        return

    # 2) –ø—Ä—è–º–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ Telegram ID
    if args.isdigit():
        tg_id = int(args)
        conn = get_conn()
        try:
            repo_t.assign_to(conn, t["id"], tg_id)
            repo_t.set_status(conn, t["id"], "in_progress")
        finally:
            conn.close()

        who = get_display_name(get_conn(), tg_id) or tg_id
        safe_label = html.escape(str(label))

        # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–µ–º—É (—è–∫ –±—É–ª–æ)
        await message.answer(f"üü° –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è: <b>{who}</b> –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ <b>{safe_label}</b>")

        # –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–≤—Ü—é –∑ –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–æ—é –∫–Ω–æ–ø–∫–æ—é "–í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–º—É"
        try:
            topic_url = await build_topic_url(bot, settings.support_group_id, t["thread_id"])
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚û°Ô∏è –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ç–µ–º—É", url=topic_url)]
            ])
            await bot.send_message(
                chat_id=tg_id,
                text=(
                    f"üîî –í–∞–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ <b>{safe_label}</b>.\n"
                    f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ —É —Ç–µ–º—É."
                ),
                reply_markup=kb,
                disable_web_page_preview=True
            )
        except Exception:
            await message.answer("‚ÑπÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –Ω–µ —Å—Ç–∞—Ä—Ç—É–≤–∞–≤ –±–æ—Ç–∞).")
        return

    # 3) help
    await message.answer(
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
        "‚Ä¢ /assign 123456789 ‚Äî –æ–¥—Ä–∞–∑—É –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞ Telegram ID\n"
        "‚Ä¢ /assign ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —ñ –æ–±—Ä–∞—Ç–∏ –∑ –∫–Ω–æ–ø–æ–∫"
    )

@router.message(
    Command("close"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
async def staff_close(message: Message, bot: Bot):
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
        if not t: return
        repo_t.close_ticket(conn, t["id"])
    finally:
        conn.close()

    await message.answer("üî¥ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ.")
    await bot.send_message(
        chat_id=t["client_user_id"],
        text="‚úÖ –©–∏—Ä–æ –¥—è–∫—É—î–º–æ –∑–∞ –¥–æ–≤—ñ—Ä—É. –Ø–∫—â–æ –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–æ–ø–æ–º–æ–≥–∞ ‚Äî –ø–∏—à—ñ—Ç—å.",
    )

@router.message(
    Command("reopen"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
async def staff_reopen(message: Message, bot: Bot):
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
        if not t: return
        repo_t.reopen(conn, t["id"])
    finally:
        conn.close()

    await message.answer("üü¢ –ü–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç–æ.")
    await bot.send_message(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=f"üü¢ –ü–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç–æ | –ö–ª—ñ—î–Ω—Ç: <code>{t['label'] or t['client_user_id']}</code>",
        reply_markup=ticket_actions_kb(t["client_user_id"]),
    )

@router.message(
    Command("close_silent"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
async def close_silent_cmd(message: Message, bot: Bot):
    try:
        conn = get_conn()
        try:
            t = repo_t.find_by_thread(conn, message.message_thread_id)
            if not t:
                await message.answer("‚ÑπÔ∏è –î–ª—è —Ü—ñ—î—ó —Ç–µ–º–∏ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.")
                return

            repo_t.close_ticket(conn, t["id"])
            repo_t.clear_snooze(conn, t["id"])
            conn.commit()
        finally:
            conn.close()

        await message.answer("üî¥ –ó–∞–∫—Ä–∏—Ç–æ —Ç–∏—Ö–æ (–±–µ–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É).")

    except Exception as e:
        logger.exception("close_silent failed: %s", e)
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–∏—Ç–∏ —Ç–∏—Ö–æ (–¥–∏–≤. –ª–æ–≥–∏).")

@router.message(
    Command("card"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
async def post_card(message: Message, bot: Bot):
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
    finally:
        conn.close()
    if not t: return
    try:
        await bot.send_message(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text=(f"üü¢ –ó–∞—è–≤–∫–∞\n–ö–ª—ñ—î–Ω—Ç: <code>{t['label'] or t['client_user_id']}</code>\n"
                  f"–°—Ç–∞—Ç—É—Å: {t['status']}"),
            reply_markup=ticket_actions_kb(t["client_user_id"]),
        )
    except TelegramBadRequest:
        pass

@router.message(
    Command("client", "phone"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
async def show_client_info(message: Message, bot: Bot):
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
        if not t:
            await message.answer("‚ÑπÔ∏è –ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç—ñ–∫–µ—Ç, –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–∏–π –¥–æ —Ü—ñ—î—ó —Ç–µ–º–∏.")
            return
        c = repo_c.get_client(conn, t["client_user_id"])
    finally:
        conn.close()

    # --- –æ—Ç—Ä–∏–º—É—î–º–æ username –∑ Telegram ---
    try:
        ch = await bot.get_chat(t["client_user_id"])
        if getattr(ch, "username", None):
            # –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∏–π –ª—ñ–Ω–∫ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å
            tg_username = f"<a href='https://t.me/{ch.username}'>@{ch.username}</a>"
        else:
            tg_username = "‚Äî –≤—ñ–¥—Å—É—Ç–Ω—ñ–π ‚Äî"
    except Exception:
        tg_username = "‚Äî –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π ‚Äî"

    # --- —ñ–Ω—à–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è ---
    label = (c and c.get("label")) or t["client_user_id"]
    phone = (c and c.get("phone")) or "‚Äî –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî"
    confirmed = None
    if c is not None:
        pc = c.get("phone_confirmed")
        if pc is None:
            confirmed = " "
        else:
            confirmed = "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ" if int(pc) == 1 else "–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚ùå"
    total_closed = (c and c.get("total_closed")) or 0
    tg_link = f"tg://user?id={t['client_user_id']}"

    # --- —Ñ–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ---
    text = (
        "<b>–ö–∞—Ä—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞</b>\n"
        f"‚Ä¢ –ö–ª—ñ—î–Ω—Ç: <code>{label}</code>\n"
        f"‚Ä¢ Telegram ID: <a href='{tg_link}'>{t['client_user_id']}</a>\n"
        f"‚Ä¢ –ù—ñ–∫: {tg_username}\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>"
    )
    if confirmed is not None:
        text += f" ({confirmed})"
    text += f"\n‚Ä¢ –ó–∞–∫—Ä–∏—Ç–∏—Ö –∑–≤–µ—Ä–Ω–µ–Ω—å: <b>{total_closed}</b>"

    await message.answer(text, disable_web_page_preview=True)

# =============== –ü–†–û–ö–°–Ü –Ü–ó –¢–ï–ú–ò ‚Üí –ö–õ–Ü–Ñ–ù–¢–£ ===============
@router.message(
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    (F.text & ~F.text.startswith("/")) | ~F.text,
    IsSupportMember(),
    flags={"block": False},
)
async def outbound_to_client(message: Message, bot: Bot):
    if message.from_user.is_bot:
        return
    if message.new_chat_members or message.left_chat_member or message.pinned_message:
        return

    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
    finally:
        conn.close()
    if not t:
        return

    if not t.get("assigned_to"):
        conn = get_conn()
        try:
            repo_t.assign_to(conn, t["id"], message.from_user.id)
            repo_t.set_status(conn, t["id"], "in_progress")
        finally:
            conn.close()
        who = get_display_name(get_conn(), message.from_user.id) or message.from_user.id
        try:
            await bot.send_message(
                chat_id=message.chat.id,
                message_thread_id=message.message_thread_id,
                text=f"üü° –ê–≤—Ç–æ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: <b>{who}</b>",
            )
        except Exception:
            pass

    fallback = message.from_user.full_name or (message.from_user.username and f"@{message.from_user.username}") or None
    prefix = prefix_for_staff(message.from_user.id, fallback=fallback)

    from bot.service.msglog import log_and_touch

    if message.content_type == "text":
        out = await bot.send_message(chat_id=t["client_user_id"], text=f"{prefix}\n\n{message.text}")
        log_and_touch(t["id"], "out", out.message_id, message.text, "text")
    else:
        out = await relay_media(bot, message, t["client_user_id"], prefix=prefix)
        log_and_touch(t["id"], "out", out.message_id, getattr(message, "caption", None), message.content_type)

@router.message(Command("threadinfo"), F.chat.type == "supergroup")
async def thread_info(message: Message):
    tid = message.message_thread_id
    if not tid:
        await message.answer("‚ÑπÔ∏è –¶–µ –Ω–µ –≥—ñ–ª–∫–∞ (–∞–±–æ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–∞ —Ç–µ–º–æ—é).")
        return
    await message.answer(
        f"<b>Thread info</b>\n"
        f"Chat ID: <code>{message.chat.id}</code>\n"
        f"Thread ID: <code>{tid}</code>\n"
        f"(–ù–∞–∑–≤—É —Ç–µ–º–∏ Telegram API –Ω–µ –≤—ñ–¥–¥–∞—î)",
        disable_web_page_preview=True,
    )

@router.message(
    Command("snooze"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
async def snooze_cmd(message: Message, command: CommandObject):
    args = (command.args or "").strip()
    if not args or not args.isdigit():
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/snooze 30</code> ‚Äî –≤—ñ–¥–∫–ª–∞—Å—Ç–∏ –∞–ª–µ—Ä—Ç–∏ –Ω–∞ 30 —Ö–≤.")
        return

    mins = int(args)
    if mins < 1 or mins > 1440:
        await message.answer("–ó–Ω–∞—á–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 1440 —Ö–≤.")
        return

    until_dt = datetime.utcnow() + timedelta(minutes=mins)

    conn = get_conn()
    try:
        t = repo_t.get_by_thread(conn, message.message_thread_id)
        if not t:
            return
        repo_t.set_snooze_until(conn, t["id"], until_dt)
        conn.commit()
    finally:
        conn.close()

    await message.answer(f"‚è∏ –ê–ª–µ—Ä—Ç–∏ –≤–∏–º–∫–Ω–µ–Ω–æ –¥–æ <b>{until_dt:%Y-%m-%d %H:%M UTC}</b>.")

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import html

# —É—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ª—ñ–Ω–∫—É –Ω–∞ —Ç–µ–º—É
def _abs_chat_id_str(chat_id: int) -> str:
    s = str(chat_id)
    if s.startswith("-100"):
        return s[4:]
    if s.startswith("-"):
        return s[1:]
    return s

async def build_topic_url(bot: Bot, group_id: int, thread_id: int) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–µ–º—É (forum topic) —É —Å–ª—É–∂–±–æ–≤—ñ–π –≥—Ä—É–ø—ñ."""
    ch = await bot.get_chat(group_id)
    if getattr(ch, "username", None):  # –ø—É–±–ª—ñ—á–Ω–∞ –≥—Ä—É–ø–∞
        return f"https://t.me/{ch.username}/{thread_id}"
    return f"https://t.me/c/{_abs_chat_id_str(ch.id)}/{thread_id}"
