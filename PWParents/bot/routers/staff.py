# bot/routers/staff.py
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.exceptions import TelegramBadRequest

from core.config import settings
from core.db import get_conn
from core.repositories import messages as repo_m
from core.repositories import tickets as repo_t
from core.repositories.agents import get_display_name
from core.repositories import agents as repo_a

from bot.keyboards.common import (
    prefix_for_staff,
    ticket_actions_kb,
    assign_agents_kb,
)
from bot.routers._media import relay_media
from bot.utils.staff_guard import IsSupportMember

from core.repositories import clients as repo_c


router = Router()

# =========================
# –°–õ–£–ñ–ë–û–í–Ü –ö–û–ú–ê–ù–î–ò –í –¢–ï–ú–Ü
# =========================

# /label ‚Äî –º—ñ—Ç–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (–í—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ ‚Ä¶)
@router.message(Command("label"), F.chat.id == settings.support_group_id, F.is_topic_message == True)
async def set_label_cmd(message: Message, command: CommandObject, bot: Bot):
    new_label = (command.args or "").strip()
    if not new_label:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /label –Ü–º'—è_–∫–ª—ñ—î–Ω—Ç–∞_–∞–±–æ_—Ç–≤–∞—Ä–∏–Ω–∏")
        return

    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
        if not t:
            return
        repo_t.set_label(conn, t["id"], new_label)
    finally:
        conn.close()

    # üîπ —Å–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞—Ç–∏ —Ç–µ–º—É –ø—ñ–¥ –º—ñ—Ç–∫—É
    try:
        # Telegram –¥–æ–∑–≤–æ–ª—è—î 1‚Äì128 —Å–∏–º–≤–æ–ª—ñ–≤ —É –Ω–∞–∑–≤—ñ
        await bot.edit_forum_topic(
            chat_id=settings.support_group_id,
            message_thread_id=message.message_thread_id,
            name=new_label[:128]
        )
    except Exception:
        # —Ç–∏—Ö–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ ‚Äî —Ç–µ–º–∞ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∞/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        pass

    await message.answer(f"‚úÖ –ú—ñ—Ç–∫—É —Ç–µ–º–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: <b>{new_label}</b>")

# /assign ‚Äî –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∑ –ë–î; –∑ —á–∏—Å–ª–æ–≤–∏–º ID ‚Äî –æ–¥—Ä–∞–∑—É –ø—Ä–∏–∑–Ω–∞—á–∞—î
@router.message(
    Command("assign"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
async def assign_cmd(message: Message, command: CommandObject, bot: Bot):
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
    finally:
        conn.close()
    if not t:
        return

    label = t.get("label") or t["client_user_id"]
    args = (command.args or "").strip()

    # 1) –ù–µ–º–∞—î –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ ‚Üí —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
    if not args:
        conn = get_conn()
        try:
            agents = repo_a.list_active(conn)
        finally:
            conn.close()

        if not agents:
            await message.answer(
                "–°–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π—Ç–µ —ó—Ö —É pp_agents –∞–±–æ –Ω–µ—Ö–∞–π –≤–æ–Ω–∏ "
                "–≤–∏–∫–æ–Ω–∞—é—Ç—å /setname —É –ø—Ä–∏–≤–∞—Ç—ñ –∑ –±–æ—Ç–æ–º."
            )
            return

        kb = assign_agents_kb(agents, client_id=t["client_user_id"], exclude_id=None)
        await message.answer(f"–ö–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ <b>{label}</b>?", reply_markup=kb)
        return

    # 2) –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç —á–∏—Å–ª–æ ‚Üí –æ–¥—Ä–∞–∑—É –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞ tg_id
    if args.isdigit():
        tg_id = int(args)

        conn = get_conn()
        try:
            repo_t.assign_to(conn, t["id"], tg_id)
            repo_t.set_status(conn, t["id"], "in_progress")
        finally:
            conn.close()

        who = get_display_name(get_conn(), tg_id) or tg_id
        await message.answer(f"üü° –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è: <b>{who}</b> –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ <b>{label}</b>")

        # —Å–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ DM –≤–∏–∫–æ–Ω–∞–≤—Ü—é (–º–æ–∂–µ –Ω–µ –¥—ñ–π—Ç–∏, —è–∫—â–æ –Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–≤ /start)
        try:
            await bot.send_message(
                chat_id=tg_id,
                text=(
                    f"üîî –í–∞–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ <b>{label}</b>.\n"
                    f"–ó–∞–π–¥—ñ—Ç—å —É —Ç–µ–º—É –≤ —Å–ª—É–∂–±–æ–≤—ñ–π –≥—Ä—É–ø—ñ –π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –≤—ñ–¥ —Å–≤–æ–≥–æ —ñ–º–µ–Ω—ñ."
                ),
            )
        except Exception:
            await message.answer("‚ÑπÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –Ω–µ —Å—Ç–∞—Ä—Ç—É–≤–∞–≤ –±–æ—Ç–∞).")
        return

    # 3) –ü—ñ–¥–∫–∞–∑–∫–∞
    await message.answer(
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
        "‚Ä¢ /assign 123456789  ‚Äî –æ–¥—Ä–∞–∑—É –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞ Telegram ID\n"
        "‚Ä¢ /assign            ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —ñ –æ–±—Ä–∞—Ç–∏ –∑ –∫–Ω–æ–ø–æ–∫\n\n"
        "–ü–æ—Ä–∞–¥–∞: —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –º–æ–∂–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Å–≤—ñ–π ID –∫–æ–º–∞–Ω–¥–æ—é /who —É –ø—Ä–∏–≤–∞—Ç—ñ –∑ –±–æ—Ç–æ–º."
    )


# /close ‚Äî –∑–∞–∫—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
@router.message(
    Command("close"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
async def staff_close(message: Message, bot: Bot):
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
        if not t:
            return
        repo_t.close_ticket(conn, t["id"])
    finally:
        conn.close()

    await message.answer("üî¥ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ.")
    await bot.send_message(
        chat_id=t["client_user_id"],
        text="‚úÖ –©–∏—Ä–æ –¥—è–∫—É—î–º–æ –∑–∞ –¥–æ–≤—ñ—Ä—É. –Ø–∫—â–æ –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–æ–ø–æ–º–æ–≥–∞ ‚Äî –ø–∏—à—ñ—Ç—å, –±—É–¥–µ–º–æ —Ä–∞–¥—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏.",
    )


# /reopen ‚Äî –ø–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç–∏ –≤—Ä—É—á–Ω—É
@router.message(
    Command("reopen"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
async def staff_reopen(message: Message, bot: Bot):
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
        if not t:
            return
        repo_t.reopen(conn, t["id"])
    finally:
        conn.close()

    await message.answer("üü¢ –ü–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç–æ.")
    await bot.send_message(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=f"üü¢ –ü–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç–æ | –ö–ª—ñ—î–Ω—Ç: <code>{t['label'] or t['client_user_id']}</code>",
        reply_markup=ticket_actions_kb(t["client_user_id"]),
    )


# /card ‚Äî –∫–∞—Ä—Ç–∫–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –ø–æ—Ç–æ—á–Ω—É —Ç–µ–º—É
@router.message(
    Command("card"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
async def post_card(message: Message, bot: Bot):
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
    finally:
        conn.close()
    if not t:
        return

    try:
        await bot.send_message(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text=(
                f"üü¢ –ó–∞—è–≤–∫–∞\n"
                f"–ö–ª—ñ—î–Ω—Ç: <code>{t['label'] or t['client_user_id']}</code>\n"
                f"–°—Ç–∞—Ç—É—Å: {t['status']}"
            ),
            reply_markup=ticket_actions_kb(t["client_user_id"]),
        )
    except TelegramBadRequest:
        pass

@router.message(
    Command("client", "phone"),
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    IsSupportMember(),
)
async def show_client_info(message: Message):
    """
    /client –∞–±–æ /phone —É —Ç–µ–º—ñ ‚Üí –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞:
    - Telegram ID
    - —Ç–µ–ª–µ—Ñ–æ–Ω (—è–∫—â–æ —î) + —Å—Ç–∞—Ç—É—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    - –º—ñ—Ç–∫—É (label)
    - —Å–∫—ñ–ª—å–∫–∏ –∑–∞–∫—Ä–∏—Ç–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤
    """
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
        if not t:
            await message.answer("‚ÑπÔ∏è –ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç—ñ–∫–µ—Ç, –ø—Ä–∏–≤‚Äô—è–∑–∞–Ω–∏–π –¥–æ —Ü—ñ—î—ó —Ç–µ–º–∏.")
            return

        client_id = t["client_user_id"]
        c = repo_c.get_client(conn, client_id)  # –æ—á—ñ–∫—É—î–º–æ –ø–æ–ª—è: phone, phone_confirmed, label, total_closed
    finally:
        conn.close()

    label = (c and c.get("label")) or client_id
    phone = (c and c.get("phone")) or "‚Äî –Ω–µ –≤–∫–∞–∑–∞–Ω–æ ‚Äî"
    confirmed = None
    if c is not None:
        # phone_confirmed –º–æ–∂–µ –±—É—Ç–∏ 0/1 –∞–±–æ None
        pc = c.get("phone_confirmed")
        if pc is None:
            confirmed = " "
        else:
            confirmed = "–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ" if int(pc) == 1 else "–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚ùå"

    total_closed = (c and c.get("total_closed")) or 0

    # –∑—Ä—É—á–Ω—ñ –ª—ñ–Ω–∫–∏
    tg_link = f"tg://user?id={client_id}"

    text = (
        "<b>–ö–∞—Ä—Ç–∫–∞ –∫–ª—ñ—î–Ω—Ç–∞</b>\n"
        f"‚Ä¢ –ö–ª—ñ—î–Ω—Ç: <code>{label}</code>\n"
        f"‚Ä¢ Telegram ID: <a href='{tg_link}'>{client_id}</a>\n"
        f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>"
    )
    if confirmed is not None:
        text += f" ({confirmed})"
    text += f"\n‚Ä¢ –ó–∞–∫—Ä–∏—Ç–∏—Ö –∑–≤–µ—Ä–Ω–µ–Ω—å: <b>{total_closed}</b>"

    await message.answer(text, disable_web_page_preview=True)


# =====================================
# –ü–†–û–ö–°–Ü –í–Ü–î–ü–û–í–Ü–î–ï–ô –Ü–ó –¢–ï–ú–ò ‚Üí –ö–õ–Ü–Ñ–ù–¢–£
# =====================================
#  ‚Ä¢ –ù–ï –º–∞—Ç—á–∏–º–æ –∫–æ–º–∞–Ω–¥–∏ (~F.text.startswith("/"))
#  ‚Ä¢ –ù–ï –±–ª–æ–∫—É—î–º–æ —ñ–Ω—à—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ (flags={"block": False})
@router.message(
    F.chat.id == settings.support_group_id,
    F.is_topic_message == True,
    (F.text & ~F.text.startswith("/")),
    IsSupportMember(),
    flags={"block": False},
)
async def outbound_to_client(message: Message, bot: Bot):
    if message.from_user.is_bot:
        return
    if message.new_chat_members or message.left_chat_member or message.pinned_message:
        return

    # –∑–Ω–∞–π—Ç–∏ —Ç—ñ–∫–µ—Ç –∑–∞ thread_id
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
    finally:
        conn.close()
    if not t:
        return

    # üî∏ –∞–≤—Ç–æ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —è–∫—â–æ —â–µ –ø–æ—Ä–æ–∂–Ω—å–æ
    if not t.get("assigned_to"):
        conn = get_conn()
        try:
            repo_t.assign_to(conn, t["id"], message.from_user.id)
            repo_t.set_status(conn, t["id"], "in_progress")
        finally:
            conn.close()
        # –æ–ø—Ü—ñ–π–Ω–µ —Å–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ç–µ–º—É
        who_conn = get_conn()
        try:
            who = get_display_name(who_conn, message.from_user.id) or message.from_user.id
        finally:
            who_conn.close()
        try:
            await bot.send_message(
                chat_id=message.chat.id,
                message_thread_id=message.message_thread_id,
                text=f"üü° –ê–≤—Ç–æ–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: <b>{who}</b>"
            )
        except Exception:
            pass

    # –ü—Ä–µ—Ñ—ñ–∫—Å –∑ —Ä–æ–∑—É–º–Ω–∏–º fallback
    fallback = (
        message.from_user.full_name
        or (message.from_user.username and f"@{message.from_user.username}")
        or None
    )
    prefix = prefix_for_staff(message.from_user.id, fallback=fallback)

    from bot.service.msglog import log_and_touch  # —ñ–º–ø–æ—Ä—Ç —Ç—É—Ç, —â–æ–± —É–Ω–∏–∫–∞—Ç–∏ —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö —ñ–º–ø–æ—Ä—Ç—ñ–≤

    if message.content_type == "text":
        out = await bot.send_message(
            chat_id=t["client_user_id"],
            text=f"{prefix}\n\n{message.text}",
        )
        # –ª–æ–≥ + touch_staff
        log_and_touch(t["id"], "out", out.message_id, message.text, "text")
    else:
        out = await relay_media(
            bot,
            message,
            t["client_user_id"],
            prefix=prefix,   # "üë©‚Äç‚öïÔ∏è –Ü–º'—è‚Ä¶:" ‚Äî —è–∫ —É —Ç–µ–±–µ
        )
        log_and_touch(
            t["id"], "out", out.message_id,
            getattr(message, "caption", None),
            message.content_type
        )

# –ü–æ–∫–∞–∑–∞—Ç–∏ chat_id —ñ thread_id –ø–æ—Ç–æ—á–Ω–æ—ó —Ç–µ–º–∏
@router.message(Command("threadinfo"), F.chat.type == "supergroup")
async def thread_info(message: Message):
    tid = message.message_thread_id
    if not tid:
        await message.answer("‚ÑπÔ∏è –¶–µ –Ω–µ –≥—ñ–ª–∫–∞ (–∞–±–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –ø–æ–∑–∞ —Ç–µ–º–æ—é).")
        return
    await message.answer(
        f"<b>Thread info</b>\n"
        f"Chat ID: <code>{message.chat.id}</code>\n"
        f"Thread ID: <code>{tid}</code>\n"
        f"(–ù–∞–∑–≤—É —Ç–µ–º–∏ Telegram API –Ω–µ –≤—ñ–¥–¥–∞—î; —ó—ó –≤–∏–¥–Ω–æ —É —à–∞–ø—Ü—ñ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ)",
        parse_mode="HTML",
        disable_web_page_preview=True,
    )