#bot/routers/staff.py
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.exceptions import TelegramBadRequest
from core.config import settings
from core.db import get_conn
from core.repositories import messages as repo_m
from core.repositories import tickets as repo_t
from core.repositories.agents import get_display_name
from bot.keyboards.common import prefix_for_staff, ticket_actions_kb
from bot.routers._media import relay_media
from core.repositories import agents as repo_a
from bot.keyboards.common import assign_agents_kb

router = Router()

# –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ —Ç–µ–º–∏ ‚Üí –∫–ª—ñ—î–Ω—Ç—É (—ñ–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏/—Å–ª—É–∂–±–æ–≤—ñ)
@router.message(F.chat.id == settings.support_group_id, F.is_topic_message == True)
async def outbound_to_client(message: Message, bot: Bot):
    if message.from_user.is_bot:
        return
    if message.text and message.text.startswith("/"):
        return
    if message.new_chat_members or message.left_chat_member or message.pinned_message:
        return

    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
    finally:
        conn.close()
    if not t:
        return

    prefix = prefix_for_staff(message.from_user.id)

    if message.content_type == "text":
        out = await bot.send_message(chat_id=t["client_user_id"], text=f"{prefix}\n\n{message.text}")
        conn = get_conn()
        try:
            repo_m.insert(conn, t["id"], "out", out.message_id, message.text, "text")
        finally:
            conn.close()
    else:
        out = await relay_media(bot, message, t["client_user_id"], prefix)
        conn = get_conn()
        try:
            repo_m.insert(conn, t["id"], "out", out.message_id, getattr(message, "caption", None), message.content_type)
        finally:
            conn.close()

# /label ‚Äî –º—ñ—Ç–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (–í—ñ–¥ –∫–ª—ñ—î–Ω—Ç–∞ ‚Ä¶)
@router.message(Command("label"), F.chat.id == settings.support_group_id, F.is_topic_message == True)
async def set_label_cmd(message: Message, command: CommandObject, bot: Bot):
    new_label = (command.args or "").strip()
    if not new_label:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /label –Ü–º'—è_–∫–ª—ñ—î–Ω—Ç–∞_–∞–±–æ_—Ç–≤–∞—Ä–∏–Ω–∏"); return
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
        if not t: return
        repo_t.set_label(conn, t["id"], new_label)
    finally:
        conn.close()
    await message.answer(f"‚úÖ –ú—ñ—Ç–∫—É —Ç–µ–º–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: <b>{new_label}</b>")

# /assign ‚Äî –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∑ –ë–î; –∑ —á–∏—Å–ª–æ–≤–∏–º ID ‚Äî –æ–¥—Ä–∞–∑—É –ø—Ä–∏–∑–Ω–∞—á–∞—î
@router.message(Command("assign"), F.chat.id == settings.support_group_id, F.is_topic_message == True)
async def assign_cmd(message: Message, command: CommandObject, bot: Bot):
    # –∑–Ω–∞–π–¥–µ–º–æ —Ç—ñ–∫–µ—Ç –ø–æ—Ç–æ—á–Ω–æ—ó —Ç–µ–º–∏
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
    finally:
        conn.close()
    if not t:
        return

    label = t.get("label") or t["client_user_id"]
    args = (command.args or "").strip()

    # 1) –ù–µ–º–∞—î –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ ‚Üí –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑ –ë–î
    if not args:
        conn = get_conn()
        try:
            agents = repo_a.list_active(conn)
        finally:
            conn.close()

        if not agents:
            await message.answer("–°–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —ó—Ö —É pp_agents –∞–±–æ –Ω–µ—Ö–∞–π –≤–æ–Ω–∏ –≤–∏–∫–æ–Ω–∞—é—Ç—å /setname —É –ø—Ä–∏–≤–∞—Ç—ñ –∑ –±–æ—Ç–æ–º.")
            return

        kb = assign_agents_kb(agents, client_id=t["client_user_id"], exclude_id=None)
        await message.answer(f"–ö–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ <b>{label}</b>?", reply_markup=kb)
        return

    # 2) –Ø–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç —î —ñ —Ü–µ —á–∏—Å–ª–æ ‚Üí –æ–¥—Ä–∞–∑—É –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞ tg_id
    if args.isdigit():
        tg_id = int(args)

        conn = get_conn()
        try:
            repo_t.assign_to(conn, t["id"], tg_id)
            repo_t.set_status(conn, t["id"], "in_progress")
        finally:
            conn.close()

        who = get_display_name(get_conn(), tg_id) or tg_id
        await message.answer(f"üü° –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è: <b>{who}</b> –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ <b>{label}</b>")

        # —Å–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ DM –≤–∏–∫–æ–Ω–∞–≤—Ü—é (–º–æ–∂–µ –Ω–µ –¥—ñ–π—Ç–∏, —è–∫—â–æ –Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–≤ /start)
        try:
            await bot.send_message(
                chat_id=tg_id,
                text=(f"üîî –í–∞–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ <b>{label}</b>.\n"
                      f"–ó–∞–π–¥—ñ—Ç—å —É —Ç–µ–º—É –≤ —Å–ª—É–∂–±–æ–≤—ñ–π –≥—Ä—É–ø—ñ –π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –≤—ñ–¥ —Å–≤–æ–≥–æ —ñ–º–µ–Ω—ñ.")
            )
        except Exception:
            await message.answer("‚ÑπÔ∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∏–≤–∞—Ç–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –Ω–µ —Å—Ç–∞—Ä—Ç—É–≤–∞–≤ –±–æ—Ç–∞).")
        return

    # 3) –†–µ—à—Ç–∞ –≤–∏–ø–∞–¥–∫—ñ–≤ (–Ω–∞–ø—Ä., @username) ‚Äî –ø—ñ–¥–∫–∞–∑–∫–∞
    await message.answer(
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:\n"
        "‚Ä¢ /assign 123456789  ‚Äî –æ–¥—Ä–∞–∑—É –ø—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ –∑–∞ Telegram ID\n"
        "‚Ä¢ /assign            ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ —ñ –æ–±—Ä–∞—Ç–∏ –∑ –∫–Ω–æ–ø–æ–∫\n\n"
        "–ü–æ—Ä–∞–¥–∞: —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –º–æ–∂–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Å–≤—ñ–π ID –∫–æ–º–∞–Ω–¥–æ—é /who —É –ø—Ä–∏–≤–∞—Ç—ñ –∑ –±–æ—Ç–æ–º."
    )

# /close ‚Äî –∑–∞–∫—Ä–∏—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è
@router.message(Command("close"), F.chat.id == settings.support_group_id, F.is_topic_message == True)
async def staff_close(message: Message, bot: Bot):
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
        if not t: return
        repo_t.close_ticket(conn, t["id"])
    finally:
        conn.close()
    await message.answer("üî¥ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ.")
    await bot.send_message(chat_id=t["client_user_id"], text="‚úÖ –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ. –ù–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å-–∫–æ–ª–∏ ‚Äî –ø—Ä–æ–¥–æ–≤–∂–∏–º–æ –≤ —Ü—ñ–π –∂–µ —Ç–µ–º—ñ.")

# /reopen ‚Äî –ø–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç–∏ –≤—Ä—É—á–Ω—É
@router.message(Command("reopen"), F.chat.id == settings.support_group_id, F.is_topic_message == True)
async def staff_reopen(message: Message, bot: Bot):
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
        if not t: return
        repo_t.reopen(conn, t["id"])
    finally:
        conn.close()
    await message.answer("üü¢ –ü–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç–æ.")
    await bot.send_message(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=f"üü¢ –ü–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç–æ | –ö–ª—ñ—î–Ω—Ç: <code>{t['label'] or t['client_user_id']}</code>",
        reply_markup=ticket_actions_kb(t["client_user_id"]),
    )

# /card ‚Äî –∫–∞—Ä—Ç–∫–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –ø–æ—Ç–æ—á–Ω—É —Ç–µ–º—É
@router.message(Command("card"), F.chat.id == settings.support_group_id, F.is_topic_message == True)
async def post_card(message: Message, bot: Bot):
    conn = get_conn()
    try:
        t = repo_t.find_by_thread(conn, message.message_thread_id)
    finally:
        conn.close()
    if not t:
        return
    try:
        await bot.send_message(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text=(f"üü¢ –ó–∞—è–≤–∫–∞\n–ö–ª—ñ—î–Ω—Ç: <code>{t['label'] or t['client_user_id']}</code>\n"
                  f"–°—Ç–∞—Ç—É—Å: {t['status']}"),
            reply_markup=ticket_actions_kb(t["client_user_id"]),
        )
    except TelegramBadRequest:
        pass
