# bot/routers/agents.py
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.exceptions import TelegramBadRequest

from core.config import settings
from core.db import get_conn
from core.repositories import agents as repo_a
from core.repositories.agents import get_display_name

import logging
import re  # ‚Üê –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è _clean_name
logger = logging.getLogger(__name__)

router = Router()

def _is_staff_member_status(status: str) -> bool:
    return status in ("creator", "administrator", "member")

@router.message(Command("start"), F.chat.type == "private", flags={"block": False})
async def start_private(message: Message, bot: Bot):
    u = message.from_user
    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ —É support-–≥—Ä—É–ø—ñ
    is_staff = False
    try:
        cm = await bot.get_chat_member(settings.support_group_id, u.id)
        is_staff = cm.status in ("creator", "administrator", "member")
    except TelegramBadRequest:
        pass

    if not is_staff:
        # –ù–ï –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ —ñ –ù–ï –±–ª–æ–∫—É—î–º–æ
        return

    # –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑–∞–ø–∏—Å —É –ë–î (–ø–æ—Ä–æ–∂–Ω—î —ñ–º'—è –æ–∫ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ)
    conn = get_conn()
    try:
        repo_a.upsert_agent(conn, telegram_id=u.id, display_name="", role="doctor", active=1)
        conn.commit()
    finally:
        conn.close()

    display = get_display_name(get_conn(), u.id)
    if display:
        await message.answer(
            f"–í—ñ—Ç–∞—é! –¢–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ PetWealth üêæ\n"
            f"‚Ä¢ –¢–≤–æ—î —ñ–º‚Äô—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: <b>{display}</b>\n"
            f"‚Ä¢ –¢–≤—ñ–π Telegram ID: <a href='tg://user?id={u.id}'>{u.id}</a>\n"
            f"‚Ä¢ –£ —Ç–µ–º—ñ –≥—Ä—É–ø–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ /assign, /label, /close —Ç–æ—â–æ."
        )
    else:
        await message.answer(
            "–í—ñ—Ç–∞—é! –¢–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ PetWealth üêæ\n"
            "‚Ä¢ –ó–∞–¥–∞–π —ñ–º‚Äô—è, —è–∫–µ –±–∞—á–∏—Ç–∏–º—É—Ç—å –∫–ª—ñ—î–Ω—Ç–∏: /setname –Ü–º º—è –ü—Ä—ñ–∑–≤–∏—â–µ\n"
            f"‚Ä¢ –¢–≤—ñ–π Telegram ID: <a href='tg://user?id={u.id}'>{u.id}</a>\n"
            "‚Ä¢ –£ —Ç–µ–º—ñ –≥—Ä—É–ø–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ /assign, /label, /close —Ç–æ—â–æ."
        )

def _clean_name(s: str) -> str:
    return re.sub(r"\s+", " ", (s or "").strip())

def _is_active_agent(conn, telegram_id: int) -> bool:
    with conn.cursor() as cur:
        cur.execute("SELECT 1 FROM pp_agents WHERE telegram_id=%s AND active=1 LIMIT 1", (telegram_id,))
        return cur.fetchone() is not None

@router.message(Command("setname"), F.chat.type == "private")
async def setname_private(message: Message, command: CommandObject, bot: Bot):
    uid = message.from_user.id

    # –¥–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ —é–∑–µ—Ä —É support-–≥—Ä—É–ø—ñ –ê–ë–û –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π —É –ë–î
    allowed = False
    try:
        cm = await bot.get_chat_member(settings.support_group_id, uid)
        allowed = cm.status in ("creator", "administrator", "member")
    except TelegramBadRequest as e:
        logger.warning("get_chat_member failed: %s", e)

    if not allowed:
        conn = get_conn()
        try:
            allowed = _is_active_agent(conn, uid)
        finally:
            conn.close()

    if not allowed:
        return  # —Ç–∏—Ö–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω—ñ—Ö

    # –ø–∞—Ä—Å–∏–º–æ —ñ–º'—è
    name = _clean_name(command.args or "")
    if not name:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/setname –Ü–º º—è –ü—Ä—ñ–∑–≤–∏—â–µ</code>")
        return
    if len(name) > 50:
        await message.answer("‚ùå –ù–∞–¥—Ç–æ –¥–æ–≤–≥–µ —ñ–º‚Äô—è (–º–∞–∫—Å 50 —Å–∏–º–≤–æ–ª—ñ–≤).")
        return

    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ display_name
    conn = get_conn()
    try:
        # –í–∏–±–µ—Ä–∏ –û–î–ò–ù –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –≤–∏–∫–ª–∏–∫—É –∑–≥—ñ–¥–Ω–æ –∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—î–º:

        # –í–ê–†–Ü–ê–ù–¢ –ê: —è–∫—â–æ —Ç–∏ —Ä–µ–∞–ª—ñ–∑—É—î—à –∞–ø—Å–µ—Ä—Ç-–≤–µ—Ä—Å—ñ—é –∑ activate=
        repo_a.set_display_name(conn, telegram_id=uid, display_name=name, activate=True)

        # –í–ê–†–Ü–ê–ù–¢ B (–∑–∞–∫–æ–º–µ–Ω—Ç—É–π –ê): —è–∫—â–æ –∑–∞–ª–∏—à–∞—î—à —Å—Ç–∞—Ä—É —Ñ—É–Ω–∫—Ü—ñ—é –±–µ–∑ activate
        # —Å–ø–µ—Ä—à—É –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑–∞–ø–∏—Å, –ø–æ—Ç—ñ–º –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ
        # repo_a.upsert_agent(conn, telegram_id=uid, display_name="", role="doctor", active=1)
        # repo_a.set_display_name(conn, telegram_id=uid, display_name=name)

        conn.commit()
    except Exception:
        logger.exception("setname failed")
        await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –æ–Ω–æ–≤–∏—Ç–∏ —ñ–º º—è (–ë–î). –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return
    finally:
        conn.close()

    await message.answer(f"–ì–æ—Ç–æ–≤–æ ‚úÖ –í–∞—à–µ —ñ–º‚Äô—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: <b>{name}</b>")
