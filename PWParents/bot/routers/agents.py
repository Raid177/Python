# bot/routers/agents.py
from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.exceptions import TelegramBadRequest

from core.config import settings
from core.db import get_conn
from core.repositories import agents as repo_a
from core.repositories.agents import get_display_name

import logging
logger = logging.getLogger(__name__)

router = Router()  # ‚Üê –°–¢–ê–í–ò–ú–û –ü–ï–†–ï–î –î–ï–ö–û–†–ê–¢–û–†–ê–ú–ò

def _is_staff_member_status(status: str) -> bool:
    return status in ("creator", "administrator", "member")

@router.message(Command("start"), F.chat.type == "private", flags={"block": False})
async def start_private(message: Message, bot: Bot):
    u = message.from_user
    # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–ª–µ–Ω—Å—Ç–≤–∞ —É support-–≥—Ä—É–ø—ñ
    is_staff = False
    try:
        cm = await bot.get_chat_member(settings.support_group_id, u.id)
        is_staff = cm.status in ("creator", "administrator", "member")
    except TelegramBadRequest:
        pass

    if not is_staff:
        # –ù–ï –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ, —ñ –≥–æ–ª–æ–≤–Ω–µ ‚Äî –ù–ï –±–ª–æ–∫—É—î–º–æ (–∑–∞–≤–¥—è–∫–∏ flags={"block": False})
        return

       # –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑–∞–ø–∏—Å —É –ë–î
    conn = get_conn()
    try:
        repo_a.upsert_agent(conn, telegram_id=u.id, display_name="", role="doctor", active=1)
        conn.commit()
    finally:
        conn.close()

    display = get_display_name(get_conn(), u.id)
    if display:
        await message.answer(
            f"–í—ñ—Ç–∞—é! –¢–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ PetWealth üêæ\n"
            f"‚Ä¢ –¢–≤–æ—î —ñ–º‚Äô—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: <b>{display}</b>\n"
            f"‚Ä¢ –¢–≤—ñ–π Telegram ID: <a href='tg://user?id={u.id}'>{u.id}</a>\n"
            f"‚Ä¢ –£ —Ç–µ–º—ñ –≥—Ä—É–ø–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ /assign, /label, /close —Ç–æ—â–æ."
        )
    else:
        await message.answer(
            "–í—ñ—Ç–∞—é! –¢–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ PetWealth üêæ\n"
            "‚Ä¢ –ó–∞–¥–∞–π —ñ–º‚Äô—è, —è–∫–µ –±–∞—á–∏—Ç–∏–º—É—Ç—å –∫–ª—ñ—î–Ω—Ç–∏: /setname –Ü–º º—è –ü—Ä—ñ–∑–≤–∏—â–µ\n"
            f"‚Ä¢ –¢–≤—ñ–π Telegram ID: <a href='tg://user?id={u.id}'>{u.id}</a>\n"
            "‚Ä¢ –£ —Ç–µ–º—ñ –≥—Ä—É–ø–∏ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ /assign, /label, /close —Ç–æ—â–æ."
        )

@router.message(Command("setname"), F.chat.type == "private")
async def setname_private(message: Message, command: CommandObject):
    logger.info("SETNAME hit: uid=%s text=%r", message.from_user.id, message.text)
    name = (command.args or "").strip()
    if not name:
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: <code>/setname –Ü–º º—è –ü—Ä—ñ–∑–≤–∏—â–µ</code>")
        return

    uid = message.from_user.id
    conn = get_conn()
    try:
        repo_a.upsert_agent(conn, telegram_id=uid, display_name=name, role="doctor", active=1)
        conn.commit()
    finally:
        conn.close()

    await message.answer(f"–ì–æ—Ç–æ–≤–æ ‚úÖ –í–∞—à–µ —ñ–º‚Äô—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: <b>{name}</b>")

@router.message(Command("who"), F.chat.type == "private")
async def who_private(message: Message):
    await message.answer(f"–í–∞—à Telegram ID: <code>{message.from_user.id}</code>")

@router.message(Command("name"), F.chat.type == "private")
async def name_private(message: Message):
    display = get_display_name(get_conn(), message.from_user.id)
    await message.answer(f"–ü–æ—Ç–æ—á–Ω–µ —ñ–º‚Äô—è –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: <b>{display or '‚Äî –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî'}</b>")
