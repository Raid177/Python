from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from aiogram.exceptions import TelegramBadRequest

from core.db import get_conn
from core.repositories import tickets as repo_t
from core.repositories import agents as repo_a
from bot.keyboards.common import ticket_actions_kb, prefix_for_staff, assign_agents_kb

router = Router()

def _parse(data:str):
    try:
        action, payload = data.split(":", 1)
        return action, payload
    except Exception:
        return None, None

@router.callback_query(F.data.startswith("pp."))
async def ticket_callbacks(cb: CallbackQuery, bot: Bot):
    action, payload = _parse(cb.data)
    if not action:
        return

    # –í–∏—Ç—è–≥—É—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞/—Ç—ñ–∫–µ—Ç
    conn = get_conn()
    try:
        if action in ("pp.take", "pp.transfer", "pp.close"):
            client_id = int(payload)
            t = repo_t.find_latest_by_client(conn, client_id)
        elif action.startswith("pp.assignto"):
            # payload = "<client_id>:<assignee_id>"
            p1, p2 = payload.split(":")
            client_id = int(p1); assignee_id = int(p2)
            t = repo_t.find_latest_by_client(conn, client_id)
        elif action.startswith("pp.cancel"):
            client_id = int(payload)
            t = repo_t.find_latest_by_client(conn, client_id)
        else:
            t = None
    finally:
        conn.close()

    if not t:
        await cb.answer("–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return

    # --- –î—ñ—ó ---
    if action == "pp.take":
        conn = get_conn()
        try:
            repo_t.assign_to(conn, t["id"], cb.from_user.id)
            repo_t.set_status(conn, t["id"], "in_progress")
        finally:
            conn.close()
        who = prefix_for_staff(cb.from_user.id).replace("üë©‚Äç‚öïÔ∏è ", "").replace(":", "")
        try:
            await bot.edit_message_text(
                chat_id=cb.message.chat.id,
                message_id=cb.message.message_id,
                text=(f"üü° –í —Ä–æ–±–æ—Ç—ñ | –ö–ª—ñ—î–Ω—Ç: <code>{t['label'] or client_id}</code>\n"
                      f"–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {who}"),
                reply_markup=ticket_actions_kb(client_id),
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e).lower():
                raise
        await cb.answer("–í–∑—è—Ç–æ –≤ —Ä–æ–±–æ—Ç—É")

    elif action == "pp.transfer":
        # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É (–±–µ–∑ –Ω–µ–≥–∞–π–Ω–æ—ó –∑–º—ñ–Ω–∏ –∫–∞—Ä—Ç–∫–∏)
        conn = get_conn()
        try:
            agents = repo_a.list_active(conn)
        finally:
            conn.close()

        kb = assign_agents_kb(agents, client_id, exclude_id=None)
        await bot.send_message(
            chat_id=cb.message.chat.id,
            message_thread_id=cb.message.message_thread_id,
            text=f"–ö–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ <b>{t['label'] or client_id}</b>?",
            reply_markup=kb,
        )
        await cb.answer("–û–±–µ—Ä—ñ—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—è")

    elif action.startswith("pp.assignto"):
        # –ü—Ä–∏–∑–Ω–∞—á–∏—Ç–∏ —ñ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ª—ñ–∫–∞—Ä—è —É –ø—Ä–∏–≤–∞—Ç
        assignee_id = int(payload.split(":")[1])

        conn = get_conn()
        try:
            repo_t.assign_to(conn, t["id"], assignee_id)
            repo_t.set_status(conn, t["id"], "in_progress")
        finally:
            conn.close()

        who = prefix_for_staff(assignee_id).replace("üë©‚Äç‚öïÔ∏è ", "").replace(":", "")
        try:
            await bot.edit_message_text(
                chat_id=cb.message.chat.id,
                message_id=cb.message.message_id,
                text=(f"üü° –í —Ä–æ–±–æ—Ç—ñ | –ö–ª—ñ—î–Ω—Ç: <code>{t['label'] or client_id}</code>\n"
                      f"–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {who}"),
                reply_markup=ticket_actions_kb(client_id),
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e).lower():
                raise

        # DM –≤–∏–∫–æ–Ω–∞–≤—Ü—é
        try:
            await bot.send_message(
                chat_id=assignee_id,
                text=(f"üîî –í–∞–º –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ <b>{t['label'] or client_id}</b>.\n"
                      f"–ó–∞–π–¥—ñ—Ç—å —É —Ç–µ–º—É –≤ —Å–ª—É–∂–±–æ–≤—ñ–π –≥—Ä—É–ø—ñ –π –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –≤—ñ–¥ —Å–≤–æ–≥–æ —ñ–º–µ–Ω—ñ.")
            )
        except Exception:
            # –º–æ–≤—á–∫–∏ —ñ–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ –Ω–µ–º–∞—î /start —É –±–æ—Ç–∞
            pass

        await cb.answer("–ü–µ—Ä–µ–¥–∞–Ω–æ")

    elif action == "pp.close":
        conn = get_conn()
        try:
            repo_t.close_ticket(conn, t["id"])
        finally:
            conn.close()
        try:
            await bot.edit_message_text(
                chat_id=cb.message.chat.id,
                message_id=cb.message.message_id,
                text=(f"üî¥ –ó–∞–∫—Ä–∏—Ç–æ | –ö–ª—ñ—î–Ω—Ç: <code>{t['label'] or client_id}</code>"),
                reply_markup=None,
            )
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e).lower():
                raise
        await bot.send_message(chat_id=t["client_user_id"],
                               text="‚úÖ –©–∏—Ä–æ –¥—è–∫—É—î–º–æ –∑–∞ –¥–æ–≤—ñ—Ä—É. –Ø–∫—â–æ –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–æ–ø–æ–º–æ–≥–∞ ‚Äî –ø–∏—à—ñ—Ç—å, –±—É–¥–µ–º–æ —Ä–∞–¥—ñ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏.")
        await cb.answer("–ó–∞–∫—Ä–∏—Ç–æ")

    elif action == "pp.cancel":
        await cb.answer("–°–∫–∞—Å–æ–≤–∞–Ω–æ")
