# bot/service/reminder.py
import asyncio
from datetime import datetime, timezone
from aiogram import Bot

from core.db import get_conn
from core.config import settings
from core.repositories import tickets as repo_t
from core.repositories import agents as repo_a
from bot.keyboards.common import assign_agents_kb


async def start_idle_reminder(bot: Bot):
    while True:
        try:
            await check_and_ping_assigned(bot)
            if settings.ESCALATE_UNASSIGNED:
                await check_and_escalate_unassigned(bot)
        except Exception:
            # –Ω–µ –≤–∞–ª–∏–º–æ —Ü–∏–∫–ª —á–µ—Ä–µ–∑ –æ–¥–∏–Ω–∏—á–Ω—É –ø–æ–º–∏–ª–∫—É
            pass
        await asyncio.sleep(settings.REMINDER_PING_EVERY_MIN * 60)


async def check_and_ping_assigned(bot: Bot):
    """–ü—ñ–Ω–≥—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ–≥–æ, —è–∫—â–æ –∫–ª—ñ—î–Ω—Ç —á–µ–∫–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ–≤—à–µ –ø–æ—Ä–æ–≥—É.
    –ü–æ–≤–∞–∂–∞—î–º–æ snooze: —è–∫—â–æ snooze_until —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É ‚Äî –Ω–µ –ø—ñ–Ω–≥—É—î–º–æ.
    """
    now_utc = datetime.now(timezone.utc).replace(tzinfo=None)  # –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ naive –∑ MySQL DATETIME

    conn = get_conn()
    try:
        tickets = repo_t.find_idle(conn, min_idle_minutes=settings.REMINDER_IDLE_MINUTES)
        # –æ—á—ñ–∫—É—î–º–æ, —â–æ find_idle –≤–∂–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤—É—î –∑–∞–∫—Ä–∏—Ç—ñ; —è–∫—â–æ –Ω—ñ ‚Äî –ø—ñ–¥—Å—Ç—Ä–∞—Ö—É—î–º–æ—Å—è –Ω–∏–∂—á–µ
    finally:
        conn.close()

    for t in tickets:
        # 0) –ø—ñ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –ø—Ä–∞—Ü—é—î–º–æ –ª–∏—à–µ –∑ open/in_progress
        if t.get("status") not in ("open", "in_progress"):
            continue

        # 1) snooze: —è–∫—â–æ –¥–æ —Ü—å–æ–≥–æ —á–∞—Å—É ¬´–¥—Ä—ñ–º–∞—î¬ª ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        snooze_until = t.get("snooze_until")
        if snooze_until and snooze_until > now_utc:
            continue

        # 2) –º–∞—î –±—É—Ç–∏ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å
        if not t.get("assigned_to"):
            continue

        # 3) –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ REMINDER_PING_EVERY_MIN
        if t.get("since_last_reminder") is not None and t["since_last_reminder"] < settings.REMINDER_PING_EVERY_MIN:
            continue

        label = t.get("label") or str(t["client_user_id"])
        minutes = t.get("idle_minutes") or settings.REMINDER_IDLE_MINUTES

        try:
            # –æ—Å–æ–±–∏—Å—Ç–∏–π –ø—ñ–Ω–≥ –≤–∏–∫–æ–Ω–∞–≤—Ü—é
            await bot.send_message(
                chat_id=t["assigned_to"],
                text=(f"‚è∞ –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–ª—ñ—î–Ω—Ç—É –≤–∂–µ {minutes} —Ö–≤ —É —Ç–µ–º—ñ "
                      f"<code>{label}</code>. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è/–ø–µ—Ä–µ–¥–∞–π—Ç–µ/–∑–∞–∫—Ä–∏–π—Ç–µ.")
            )

            # –æ–ø—Ü—ñ–π–Ω–æ –ø—Ä–æ–¥—É–±–ª—é—î–º–æ –≤ —Ç–µ–º—É
            if settings.POST_ASSIGNED_REMINDER_TO_THREAD and t.get("thread_id"):
                try:
                    await bot.send_message(
                        chat_id=settings.support_group_id,
                        message_thread_id=t["thread_id"],
                        text=(f"‚ö†Ô∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è <code>{label}</code>: "
                              f"–∫–ª—ñ—î–Ω—Ç —á–µ–∫–∞—î {minutes} —Ö–≤. "
                              f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –∞–±–æ –ø–µ—Ä–µ–¥–∞–π—Ç–µ / –∑–∞–∫—Ä–∏–π—Ç–µ.")
                    )
                except Exception:
                    # —Ç–µ–º—É –º–æ–≥–ª–∏ –≤–∏–¥–∞–ª–∏—Ç–∏ ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
                    pass

            # –∑–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ —Ñ–∞–∫—Ç –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
            conn = get_conn()
            try:
                repo_t.mark_reminded(conn, t["id"])
            finally:
                conn.close()

        except Exception:
            # DM –º–æ–∂–µ –Ω–µ –¥—ñ–π—Ç–∏ (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–ø—É—Å–∫–∞–≤ –±–æ—Ç–∞ —Ç–æ—â–æ) ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ
            pass


async def check_and_escalate_unassigned(bot: Bot):
    """–ï—Å–∫–∞–ª–∞—Ü—ñ—è –¥–ª—è –Ω–µ–ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫.
    –¢–∞–∫ —Å–∞–º–æ –ø–æ–≤–∞–∂–∞—î–º–æ snooze —Ç–∞ —Å—Ç–∞—Ç—É—Å —Ç—ñ–∫–µ—Ç–∞.
    """
    if not settings.ADMIN_ALERT_CHAT_ID:
        return

    now_utc = datetime.now(timezone.utc).replace(tzinfo=None)

    conn = get_conn()
    try:
        tickets = repo_t.find_unassigned_idle(conn, min_idle_minutes=settings.UNASSIGNED_IDLE_MINUTES)
        agents = repo_a.list_active(conn)
    finally:
        conn.close()

    for t in tickets:
        # 0) —Å—Ç–∞—Ç—É—Å
        if t.get("status") not in ("open", "in_progress"):
            continue

        # 1) snooze
        snooze_until = t.get("snooze_until")
        if snooze_until and snooze_until > now_utc:
            continue

        # 2) –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ REMINDER_PING_EVERY_MIN
        if t.get("since_last_alert") is not None and t["since_last_alert"] < settings.REMINDER_PING_EVERY_MIN:
            continue

        label = t.get("label") or str(t["client_user_id"])
        minutes = t.get("idle_minutes") or settings.UNASSIGNED_IDLE_MINUTES
        kb = assign_agents_kb(agents, client_id=t["client_user_id"]) if agents else None

        text = (f"üö® –ü–µ—Ä–≤–∏–Ω–Ω–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ {minutes} —Ö–≤.\n"
                f"–ö–ª—ñ—î–Ω—Ç: <code>{label}</code>\nTicket ID: {t['id']}")

        try:
            # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ç–µ–º—É (—è–∫—â–æ —î)
            if t.get("thread_id"):
                try:
                    await bot.send_message(
                        chat_id=settings.support_group_id,
                        message_thread_id=t["thread_id"],
                        text=text
                    )
                except Exception:
                    pass

            # –∞–ª–µ—Ä—Ç —É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—Å—å–∫–∏–π —á–∞—Ç
            await bot.send_message(
                chat_id=settings.ADMIN_ALERT_CHAT_ID,
                text=text,
                reply_markup=kb
            )

            # –∑–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ —Ñ–∞–∫—Ç –µ—Å–∫–∞–ª–∞—Ü—ñ—ó
            conn = get_conn()
            try:
                repo_t.mark_unassigned_alerted(conn, t["id"])
            finally:
                conn.close()

        except Exception:
            pass
