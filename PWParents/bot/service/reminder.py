#bot/service/reminder.py
import asyncio
from datetime import datetime, timezone
from aiogram import Bot
from core.db import get_conn
from core.config import settings
from core.repositories import tickets as repo_t
from bot.keyboards.common import assign_agents_kb  # –æ–ø—Ü—ñ–π–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
from core.repositories import agents as repo_a     # —â–æ–± –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É

async def start_idle_reminder(bot: Bot):
    while True:
        try:
            await check_and_ping_assigned(bot)
            if settings.ESCALATE_UNASSIGNED:
                await check_and_escalate_unassigned(bot)
        except Exception:
            pass
        await asyncio.sleep(settings.REMINDER_PING_EVERY_MIN * 60)

async def check_and_ping_assigned(bot: Bot):
    conn = get_conn()
    try:
        tickets = repo_t.find_idle(conn, min_idle_minutes=settings.REMINDER_IDLE_MINUTES)
    finally:
        conn.close()

    for t in tickets:
        if not t.get("assigned_to"):
            continue
        # –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ REMINDER_PING_EVERY_MIN
        if t.get("since_last_reminder") is not None and t["since_last_reminder"] < settings.REMINDER_PING_EVERY_MIN:
            continue
        label = t.get("label") or str(t["client_user_id"])
        minutes = t.get("idle_minutes") or settings.REMINDER_IDLE_MINUTES
        try:
            await bot.send_message(
                chat_id=t["assigned_to"],
                text=(f"‚è∞ –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–ª—ñ—î–Ω—Ç—É –≤–∂–µ {minutes} —Ö–≤ —É —Ç–µ–º—ñ "
                      f"<code>{label}</code>. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è/–ø–µ—Ä–µ–¥–∞–π—Ç–µ/–∑–∞–∫—Ä–∏–π—Ç–µ.")
            )
            # –æ–ø—Ü—ñ–π–Ω–æ –¥—É–±–ª—é—î–º–æ –≤ —Ç–µ–º—É, —â–æ–± –∫–æ–º–∞–Ω–¥–∞ –±–∞—á–∏–ª–∞ ¬´–≥–æ—Ä–∏—Ç—å¬ª
            if settings.POST_ASSIGNED_REMINDER_TO_THREAD and t.get("thread_id"):
                await bot.send_message(
                    chat_id=settings.support_group_id,
                    message_thread_id=t["thread_id"],
                    text=(f"‚ö†Ô∏è –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–≤—Ü—è <code>{label}</code>: "
                          f"–∫–ª—ñ—î–Ω—Ç —á–µ–∫–∞—î {minutes} —Ö–≤. "
                          f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –∞–±–æ –ø–µ—Ä–µ–¥–∞–π—Ç–µ / –∑–∞–∫—Ä–∏–π—Ç–µ.")
                )
            conn = get_conn()
            try:
                repo_t.mark_reminded(conn, t["id"])
            finally:
                conn.close()
        except Exception:
            pass

async def check_and_escalate_unassigned(bot: Bot):
    if not settings.ADMIN_ALERT_CHAT_ID:
        return
    conn = get_conn()
    try:
        tickets = repo_t.find_unassigned_idle(conn, min_idle_minutes=settings.UNASSIGNED_IDLE_MINUTES)
        agents = repo_a.list_active(conn)
    finally:
        conn.close()

    for t in tickets:
        # –Ω–µ —á–∞—Å—Ç—ñ—à–µ, –Ω—ñ–∂ —Ä–∞–∑ –Ω–∞ REMINDER_PING_EVERY_MIN
        if t.get("since_last_alert") is not None and t["since_last_alert"] < settings.REMINDER_PING_EVERY_MIN:
            continue
        label = t.get("label") or str(t["client_user_id"])
        minutes = t.get("idle_minutes") or settings.UNASSIGNED_IDLE_MINUTES
        kb = assign_agents_kb(agents, client_id=t["client_user_id"]) if agents else None
        text = (f"üö® –ü–µ—Ä–≤–∏–Ω–Ω–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ {minutes} —Ö–≤.\n"
                f"–ö–ª—ñ—î–Ω—Ç: <code>{label}</code>\nTicket ID: {t['id']}")
        try:
            if t.get("thread_id"):
                await bot.send_message(chat_id=settings.support_group_id, message_thread_id=t["thread_id"], text=text)
            await bot.send_message(chat_id=settings.ADMIN_ALERT_CHAT_ID, text=text, reply_markup=kb)
            conn = get_conn()
            try:
                repo_t.mark_unassigned_alerted(conn, t["id"])
            finally:
                conn.close()
        except Exception:
            pass
