from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from core.db import get_conn
from core.repositories import messages as repo_m
from core.repositories import tickets as repo_t
from bot.keyboards.common import ticket_actions_kb

async def _log_in(conn, ticket_id:int, tg_msg_id:int, text:str|None, media_type:str):
    repo_m.insert(conn, ticket_id, "in", tg_msg_id, text, media_type)

async def _post_restored_notice_and_card(bot: Bot, support_group_id:int, thread_id:int, ticket_id:int):
    conn = get_conn()
    try:
        t = repo_t.get_by_id(conn, ticket_id)
    finally:
        conn.close()
    if not t:
        return
    # —Å–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å–∞–ø–ø–æ—Ä—Ç—É
    await bot.send_message(
        chat_id=support_group_id,
        message_thread_id=thread_id,
        text=f"‚ôªÔ∏è –¢–µ–º—É –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ <code>{t['client_user_id']}</code> (ticket #{ticket_id}).",
    )
    # –∫–∞—Ä—Ç–∫–∞ –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.send_message(
        chat_id=support_group_id,
        message_thread_id=thread_id,
        text=(f"üü¢ –ó–∞—è–≤–∫–∞\n–ö–ª—ñ—î–Ω—Ç: <code>{t['client_user_id']}</code>\n"
              f"–°—Ç–∞—Ç—É—Å: {t['status']}"),
        reply_markup=ticket_actions_kb(t["client_user_id"]),
    )

async def log_and_send_text_to_topic(bot: Bot, support_group_id:int, thread_id:int, ticket_id:int, text:str, head:str):
    try:
        sent = await bot.send_message(chat_id=support_group_id, message_thread_id=thread_id, text=f"{head}\n\n{text}")
    except TelegramBadRequest as e:
        if "message thread not found" in str(e).lower():
            # –¥—ñ—Å—Ç–∞—Ç–∏ client_id —â–æ–± –Ω–∞–∑–≤–∞—Ç–∏ —Ç–µ–º—É ID<client_id>
            conn = get_conn()
            try:
                t = repo_t.get_by_id(conn, ticket_id)
                client_id = t["client_user_id"] if t else None
            finally:
                conn.close()
            topic = await bot.create_forum_topic(
                chat_id=support_group_id,
                name=f"ID{client_id or ticket_id}"
            )
            # –æ–Ω–æ–≤–∏—Ç–∏ thread_id
            conn = get_conn()
            try:
                repo_t.update_thread(conn, ticket_id, topic.message_thread_id)
            finally:
                conn.close()
            # —Å–ª—É–∂–±–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è + –∫–∞—Ä—Ç–∫–∞
            await _post_restored_notice_and_card(bot, support_group_id, topic.message_thread_id, ticket_id)
            # –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç
            sent = await bot.send_message(chat_id=support_group_id, message_thread_id=topic.message_thread_id, text=f"{head}\n\n{text}")
        else:
            raise
    conn = get_conn()
    try:
        await _log_in(conn, ticket_id, sent.message_id, text, "text")
    finally:
        conn.close()

async def log_inbound_media_copy(message, support_group_id:int, thread_id:int, ticket_id:int, head:str, bot: Bot):
    try:
        sent = await message.copy_to(chat_id=support_group_id, message_thread_id=thread_id, caption=head)
    except TelegramBadRequest as e:
        if "message thread not found" in str(e).lower():
            conn = get_conn()
            try:
                t = repo_t.get_by_id(conn, ticket_id)
                client_id = t["client_user_id"] if t else None
            finally:
                conn.close()
            topic = await bot.create_forum_topic(
                chat_id=support_group_id,
                name=f"ID{client_id or ticket_id}"
            )
            conn = get_conn()
            try:
                repo_t.update_thread(conn, ticket_id, topic.message_thread_id)
            finally:
                conn.close()
            await _post_restored_notice_and_card(bot, support_group_id, topic.message_thread_id, ticket_id)
            sent = await message.copy_to(chat_id=support_group_id, message_thread_id=topic.message_thread_id, caption=head)
        else:
            raise
    conn = get_conn()
    try:
        repo_m.insert(conn, ticket_id, "in", sent.message_id, getattr(message, "caption", None), message.content_type)
    finally:
        conn.close()
