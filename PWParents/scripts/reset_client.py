#scripts/reset_client.py
# –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ë–î (–æ–±–Ω—É–ª–µ–Ω–Ω—è)


import os
import sys
import pymysql
from dotenv import load_dotenv

# -------------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# -------------------------------
ENV_PATH = "/root/Python/PWParents/.env"
TELEGRAM_ID_TO_RESET = 6557995963      # ‚Üê –ø–æ–º—ñ–Ω—è–π —Ç—É—Ç –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π ID
DRY_RUN = False                        # ‚Üê True = —Ç—ñ–ª—å–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–∏, —â–æ –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ

# -------------------------------
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
# -------------------------------
if not os.path.exists(ENV_PATH):
    print(f"[ERROR] .env –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {ENV_PATH}")
    sys.exit(1)

load_dotenv(ENV_PATH)
DB_CONFIG = {
    "host": os.getenv("DB_HOST", "127.0.0.1"),
    "port": int(os.getenv("DB_PORT", 3306)),
    "user": os.getenv("DB_USER"),
    "password": os.getenv("DB_PASSWORD"),
    "database": os.getenv("DB_NAME"),
    "charset": "utf8mb4",
    "autocommit": False,
}

def table_exists(cur, table_name: str) -> bool:
    cur.execute("SHOW TABLES LIKE %s", (table_name,))
    return cur.fetchone() is not None

def reset_client(conn, telegram_id: int):
    cur = conn.cursor()

    # 1) –∑–Ω–∞–π–¥–µ–º–æ —Ç—ñ–∫–µ—Ç–∏
    cur.execute("SELECT id FROM pp_tickets WHERE client_user_id=%s", (telegram_id,))
    ticket_ids = [row[0] for row in cur.fetchall()]
    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ç—ñ–∫–µ—Ç—ñ–≤ –∫–ª—ñ—î–Ω—Ç–∞ {telegram_id}: {len(ticket_ids)} -> {ticket_ids}")

    # 2) –≤–∏–¥–∞–ª–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ü–∏—Ö —Ç—ñ–∫–µ—Ç—ñ–≤
    if ticket_ids:
        placeholders = ", ".join(["%s"] * len(ticket_ids))
        delete_msgs_sql = f"DELETE FROM pp_messages WHERE ticket_id IN ({placeholders})"
        if DRY_RUN:
            print(f"[DRY] {delete_msgs_sql}  {ticket_ids}")
        else:
            cur.execute(delete_msgs_sql, ticket_ids)
            print(f"[OK] –í–∏–¥–∞–ª–µ–Ω–æ –∑ pp_messages: {cur.rowcount}")

    # 3) (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ) –≤–∏–¥–∞–ª–∏–º–æ ¬´–≤–∏—Å—è—á–∏–π –Ω–∞–º—ñ—Ä¬ª –∑ pp_client_intents
    if table_exists(cur, "pp_client_intents"):
        if DRY_RUN:
            print(f"[DRY] DELETE FROM pp_client_intents WHERE client_user_id={telegram_id}")
        else:
            cur.execute("DELETE FROM pp_client_intents WHERE client_user_id=%s", (telegram_id,))
            print(f"[OK] –í–∏–¥–∞–ª–µ–Ω–æ –∑ pp_client_intents: {cur.rowcount}")

    # 4) –≤–∏–¥–∞–ª–∏–º–æ —Ç—ñ–∫–µ—Ç–∏
    if DRY_RUN:
        print(f"[DRY] DELETE FROM pp_tickets WHERE client_user_id={telegram_id}")
    else:
        cur.execute("DELETE FROM pp_tickets WHERE client_user_id=%s", (telegram_id,))
        print(f"[OK] –í–∏–¥–∞–ª–µ–Ω–æ –∑ pp_tickets: {cur.rowcount}")

    # 5) –≤–∏–¥–∞–ª–∏–º–æ –∫–ª—ñ—î–Ω—Ç–∞
    if DRY_RUN:
        print(f"[DRY] DELETE FROM pp_clients WHERE telegram_id={telegram_id}")
    else:
        cur.execute("DELETE FROM pp_clients WHERE telegram_id=%s", (telegram_id,))
        print(f"[OK] –í–∏–¥–∞–ª–µ–Ω–æ –∑ pp_clients: {cur.rowcount}")

    cur.close()

def main():
    print(f"üîπ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {os.getenv('DB_NAME')} ...")
    conn = pymysql.connect(**DB_CONFIG)
    try:
        reset_client(conn, TELEGRAM_ID_TO_RESET)
        if DRY_RUN:
            conn.rollback()
            print("‚úÖ DRY-RUN –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–º—ñ–Ω–∏ –ù–ï –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
        else:
            conn.commit()
            print("‚úÖ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ.")
    finally:
        conn.close()

if __name__ == "__main__":
    main()
